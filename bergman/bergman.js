//# 1 "bergman.bc.runtime.js"
// Generated by js_of_ocaml 4.0.0+git-8ae6b13
(function(Object)
   {typeof globalThis
    !==
    "object"
    &&
    (this
      ?get()
      :(Object.defineProperty
         (Object.prototype,"_T_",{configurable:true,get:get}),
        _T_));
    function get()
     {var global=this || self;
      global.globalThis = global;
      delete Object.prototype._T_}}
  (Object));
(function(globalThis)
   {"use strict";
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    var caml_global_data=[0];
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function caml_jsbytes_of_string(s)
     {s.t & 6 && caml_convert_string_to_bytes(s);return s.c}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_expm1_float(x){return Math.expm1(x)}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function fs_node_supported()
     {return typeof globalThis.process
             !==
             "undefined"
             &&
             typeof globalThis.process.versions
             !==
             "undefined"
             &&
             typeof globalThis.process.versions.node
             !==
             "undefined"}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return fs_node_supported()
              &&
              globalThis.process
              &&
              globalThis.process.platform
              ?globalThis.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
     var caml_current_dir=globalThis.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_bytes_of_string(s){return s}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_ml_bytes_length(s){return s.l}
    function caml_convert_bytes_to_array(s)
     {if(globalThis.Uint8Array)
       var a=new (globalThis.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof globalThis.Uint8Array))
       a = new (globalThis.Uint8Array)(a);
      var buffer=globalThis.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof globalThis.Uint8Array))
       a = new (globalThis.Uint8Array)(a);
      var buffer=globalThis.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (globalThis.Uint8Array)(1),buffer=globalThis.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    function caml_failwith(msg)
     {if(! caml_global_data.Failure)
       caml_global_data.Failure = [248,caml_string_of_jsbytes("Failure"),- 3];
      caml_raise_with_string(caml_global_data.Failure,msg)}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root"),
     jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res && fs_node_supported())
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_sys_is_directory(name)
     {var root=resolve_fs_device(name),a=root.device.is_dir(root.rest);
      return a?1:0}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=globalThis,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
       return caml_string_of_jsstring(globalThis.jsoo_static_env[n]);
      caml_raise_not_found()}
    function shift_right_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=len1 - 1;i >= 0;i--)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a >>> nbits | wrap;
        wrap = a << 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    var caml_gr_state;
    function caml_gr_state_get()
     {if(caml_gr_state)return caml_gr_state;
      throw [0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]}
    function caml_gr_point_color(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.getImageData(x,s.height - y,1,1),
       d=im.data;
      return (d[0] << 16) + (d[1] << 8) + d[2]}
    var MlObjectTable;
    if(typeof globalThis.WeakMap === "undefined")
     MlObjectTable
     =
     function()
       {function NaiveLookup(objs){this.objs = objs}
        NaiveLookup.prototype.get
        =
        function(v)
         {for(var i=0;i < this.objs.length;i++)if(this.objs[i] === v)return i};
        NaiveLookup.prototype.set = function(){};
        return function()
         {this.objs = [];this.lookup = new NaiveLookup(this.objs)}}
      ();
    else
     MlObjectTable
     =
     function(){this.objs = [];this.lookup = new (globalThis.WeakMap)()};
    MlObjectTable.prototype.store
    =
    function(v){this.lookup.set(v,this.objs.length);this.objs.push(v)};
    MlObjectTable.prototype.recall
    =
    function(v)
     {var i=this.lookup.get(v);
      return i === undefined?undefined:this.objs.length - i};
    function caml_sys_rename(o,n)
     {var o_root=resolve_fs_device(o),n_root=resolve_fs_device(n);
      if(o_root.device != n_root.device)
       caml_failwith
        ("caml_sys_rename: cannot move file between two filesystem");
      if(! o_root.device.rename)
       caml_failwith("caml_sys_rename: no implemented");
      o_root.device.rename(o_root.rest,n_root.rest)}
    function caml_log10_float(x){return Math.log10(x)}
    function unix_unlink(name)
     {var root=resolve_fs_device(name);
      if(! root.device.unlink)caml_failwith("unix_unlink: not implemented");
      return root.device.unlink(root.rest,true)}
    var caml_runtime_warnings=0;
    function caml_ml_enable_runtime_warnings(bool)
     {caml_runtime_warnings = bool;return 0}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function unix_rmdir(name)
     {var root=resolve_fs_device(name);
      if(! root.device.rmdir)caml_failwith("unix_rmdir: not implemented");
      return root.device.rmdir(root.rest,true)}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    var caml_ml_channels=new Array();
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_ml_input_scan_line(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      var p=chan.offset,len=chan.file.length();
      if(p >= len)return 0;
      while(true)
       {if(p >= len)return - (p - chan.offset);
        if(chan.file.read_one(p) == 10)return p - chan.offset + 1;
        p++}}
    function caml_gc_minor(){return 0}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_ba_uint8_get64(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3),
       b5=ba.get(ofs + 4),
       b6=ba.get(ofs + 5),
       b7=ba.get(ofs + 6),
       b8=ba.get(ofs + 7);
      return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1])}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_ba_num_dims(ba){return ba.dims.length}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (globalThis.RangeError
        &&
        e instanceof globalThis.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (globalThis.InternalError
        &&
        e instanceof globalThis.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof globalThis.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function jsoo_create_file(name,content)
     {var
       name=caml_string_of_jsbytes(name),
       content=caml_string_of_jsbytes(content);
      return caml_create_file(name,content)}
    function caml_fs_init()
     {var tmp=globalThis.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        jsoo_create_file(tmp[i].name,tmp[i].content);
      globalThis.jsoo_create_file = jsoo_create_file;
      globalThis.caml_fs_tmp = [];
      return 0}
    function caml_set_parser_trace(){return 0}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function unix_gettimeofday(){return new Date().getTime() / 1000}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function num_digits_nat(nat,ofs,len)
     {for(var i=len - 1;i >= 0;i--)if(nat.data[ofs + i] != 0)return i + 1;
      return 1}
    function caml_hash_nat(x)
     {var len=num_digits_nat(x,0,x.data.length),h=0;
      for(var i=0;i < len;i++)h = caml_hash_mix_int(h,x.data[i]);
      return h}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_js_wrap_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,[args])}}
    function caml_sys_chdir(dir)
     {var root=resolve_fs_device(dir);
      if(root.device.exists(root.rest))
       {if(root.rest)
         caml_current_dir = caml_trailing_slash(root.path + root.rest);
        else
         caml_current_dir = root.path;
        return 0}
      else
       caml_raise_no_such_file(caml_jsbytes_of_string(dir))}
    function caml_gc_counters(){return [254,0,0,0]}
    function caml_gr_synchronize()
     {caml_failwith("caml_gr_synchronize not Implemented")}
    function unix_has_symlink(unit){return fs_node_supported()?1:0}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (globalThis.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (globalThis.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=globalThis,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (globalThis.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (globalThis.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function div_helper(a,b,c)
     {var
       x=a * 65536 + (b >>> 16),
       y=Math.floor(x / c) * 65536,
       z=x % c * 65536,
       w=z + (b & 0x0000FFFF);
      return [y + Math.floor(w / c),w % c]}
    function div_digit_nat(natq,ofsq,natr,ofsr,nat1,ofs1,len,nat2,ofs2)
     {var rem=nat1.data[ofs1 + len - 1] >>> 0;
      for(var i=len - 2;i >= 0;i--)
       {var x=div_helper(rem,nat1.data[ofs1 + i] >>> 0,nat2.data[ofs2] >>> 0);
        natq.data[ofsq + i] = x[0];
        rem = x[1]}
      natr.data[ofsr] = rem;
      return 0}
    function num_leading_zero_bits_in_digit(nat,ofs)
     {var a=nat.data[ofs],b=0;
      if(a & 0xFFFF0000){b += 16;a >>>= 16}
      if(a & 0xFF00){b += 8;a >>>= 8}
      if(a & 0xF0){b += 4;a >>>= 4}
      if(a & 12){b += 2;a >>>= 2}
      if(a & 2){b += 1;a >>>= 1}
      if(a & 1)b += 1;
      return 32 - b}
    function shift_left_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=0;i < len1;i++)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a << nbits | wrap;
        wrap = a >>> 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    function MlNat(x)
     {this.data = new (globalThis.Int32Array)(x);
      this.length = this.data.length + 2}
    MlNat.prototype.caml_custom = "_nat";
    function create_nat(size)
     {var arr=new MlNat(size);
      for(var i=0;i < size;i++)arr.data[i] = - 1;
      return arr}
    function set_to_zero_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)nat.data[ofs + i] = 0;return 0}
    function incr_nat(nat,ofs,len,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) + carry;
        nat.data[ofs + i] = x | 0;
        if(x == x >>> 0){carry = 0;break}else carry = 1}
      return carry}
    function add_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
        nat1.data[ofs1 + i] = x;
        if(x == x >>> 0)carry = 0;else carry = 1}
      return incr_nat(nat1,ofs1 + len2,len1 - len2,carry)}
    function nat_of_array(l){return new MlNat(l)}
    function mult_digit_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3)
     {var carry=0,a=nat3.data[ofs3] >>> 0;
      for(var i=0;i < len2;i++)
       {var
         x1=
          (nat1.data[ofs1 + i] >>> 0)
          +
          (nat2.data[ofs2 + i] >>> 0)
          *
          (a & 0x0000FFFF)
          +
          carry,
         x2=(nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
        carry = Math.floor(x2 / 65536);
        var x3=x1 + x2 % 65536 * 65536;
        nat1.data[ofs1 + i] = x3;
        carry += Math.floor(x3 / 4294967296)}
      return len2 < len1 && carry
              ?add_nat
                (nat1,ofs1 + len2,len1 - len2,nat_of_array([carry]),0,1,0)
              :carry}
    function decr_nat(nat,ofs,len,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) - borrow;
        nat.data[ofs + i] = x;
        if(x >= 0){borrow = 0;break}else borrow = 1}
      return borrow == 1?0:1}
    function sub_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
        nat1.data[ofs1 + i] = x;
        if(x >= 0)borrow = 0;else borrow = 1}
      return decr_nat(nat1,ofs1 + len2,len1 - len2,borrow == 1?0:1)}
    function compare_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var a=num_digits_nat(nat1,ofs1,len1),b=num_digits_nat(nat2,ofs2,len2);
      if(a > b)return 1;
      if(a < b)return - 1;
      for(var i=len1 - 1;i >= 0;i--)
       {if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0)return 1;
        if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0)return - 1}
      return 0}
    function div_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {if(len2 == 1)
       {div_digit_nat(nat1,ofs1 + 1,nat1,ofs1,nat1,ofs1,len1,nat2,ofs2);
        return 0}
      var s=num_leading_zero_bits_in_digit(nat2,ofs2 + len2 - 1);
      shift_left_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      shift_left_nat(nat1,ofs1,len1,nat_of_array([0]),0,s);
      var d=(nat2.data[ofs2 + len2 - 1] >>> 0) + 1,a=create_nat(len2 + 1);
      for(var i=len1 - 1;i >= len2;i--)
       {var
         quo=
          d == 4294967296
           ?nat1.data[ofs1 + i] >>> 0
           :div_helper
              (nat1.data[ofs1 + i] >>> 0,nat1.data[ofs1 + i - 1] >>> 0,d)
             [0];
        set_to_zero_nat(a,0,len2 + 1);
        mult_digit_nat(a,0,len2 + 1,nat2,ofs2,len2,nat_of_array([quo]),0);
        sub_nat(nat1,ofs1 + i - len2,len2 + 1,a,0,len2 + 1,1);
        while
         (nat1.data[ofs1 + i]
          !=
          0
          ||
          compare_nat(nat1,ofs1 + i - len2,len2,nat2,ofs2,len2)
          >=
          0)
         {quo = quo + 1;
          sub_nat(nat1,ofs1 + i - len2,len2 + 1,nat2,ofs2,len2,1)}
        nat1.data[ofs1 + i] = quo}
      shift_right_nat(nat1,ofs1,len2,nat_of_array([0]),0,s);
      shift_right_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      return 0}
    function caml_ba_blit(src,dst)
     {if(dst.dims.length != src.dims.length)
       caml_invalid_argument("Bigarray.blit: dimension mismatch");
      for(var i=0;i < dst.dims.length;i++)
       if(dst.dims[i] != src.dims[i])
        caml_invalid_argument("Bigarray.blit: dimension mismatch");
      dst.data.set(src.data);
      return 0}
    function is_digit_int(nat,ofs){if(nat.data[ofs] >= 0)return 1;return 0}
    function caml_int64_div(x,y){return x.div(y)}
    function caml_js_html_entities(s)
     {var entity=/^&#?[0-9a-zA-Z]+;$/;
      if(s.match(entity))
       {var str,temp=document.createElement("p");
        temp.innerHTML = s;
        str = temp.textContent || temp.innerText;
        temp = null;
        return str}
      else
       caml_failwith("Invalid entity " + s)}
    function caml_string_unsafe_set(s,i,c)
     {return caml_bytes_unsafe_set(s,i,c)}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return new
              MlInt64
              (x & 0xffffff,
               Math.floor(x * caml_int64_offset) & 0xffffff,
               Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff)}
    function caml_ml_channel_size_64(chanid)
     {var chan=caml_ml_channels[chanid];
      return caml_int64_of_float(chan.file.length())}
    function caml_ba_set_2(ba,i0,i1,v){ba.set(ba.offset([i0,i1]),v);return 0}
    var
     caml_argv=
      function()
        {var g=globalThis,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       (),
     caml_executable_name=caml_argv[1];
    function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s))}
    function serialize_nat(writer,nat,sz)
     {var len=nat.data.length;
      writer.write(32,len);
      for(var i=0;i < len;i++)writer.write(32,nat.data[i]);
      sz[0] = len * 4;
      sz[1] = len * 8}
    function caml_memprof_set(_control){return 0}
    function caml_sys_exit(code)
     {var g=globalThis;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_channel_descriptor(chanid)
     {var chan=caml_ml_channels[chanid];return chan.fd}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_reshape(ba,vind)
     {vind = caml_js_from_array(vind);
      var new_dim=[],num_dims=vind.length;
      if(num_dims < 0 || num_dims > 16)
       caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
      var num_elts=1;
      for(var i=0;i < num_dims;i++)
       {new_dim[i] = vind[i];
        if(new_dim[i] < 0)
         caml_invalid_argument("Bigarray.reshape: negative dimension");
        num_elts = num_elts * new_dim[i]}
      var size=caml_ba_get_size(ba.dims);
      if(num_elts != size)
       caml_invalid_argument("Bigarray.reshape: size mismatch");
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dim,ba.data)}
    var caml_oo_last_id=0;
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_gr_fill_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.fillRect(x,s.height - y,w,- h);
      return 0}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function caml_gr_set_window_title(name)
     {var s=caml_gr_state_get();
      s.title = name;
      var jsname=caml_jsstring_of_string(name);
      if(s.set_title)s.set_title(jsname);
      return 0}
    function caml_get_global_data(){return caml_global_data}
    function caml_int64_shift_right_unsigned(x,s)
     {return x.shift_right_unsigned(s)}
    function caml_ba_uint8_get16(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      var b1=ba.get(ofs),b2=ba.get(ofs + 1);
      return b1 | b2 << 8}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_int64_to_float(x){return x.toFloat()}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_bigstring_memcmp(s1,pos1,s2,pos2,len)
     {for(var i=0;i < len;i++)
       {var a=caml_ba_get_1(s1,pos1 + i),b=caml_ba_get_1(s2,pos2 + i);
        if(a < b)return - 1;
        if(a > b)return 1}
      return 0}
    function caml_new_string(s){return caml_string_of_jsbytes(s)}
    function caml_erf_float(x)
     {var
       a1=0.254829592,
       a2=- 0.284496736,
       a3=1.421413741,
       a4=- 1.453152027,
       a5=1.061405429,
       p=0.3275911,
       sign=1;
      if(x < 0)sign = - 1;
      x = Math.abs(x);
      var
       t=1.0 / (1.0 + p * x),
       y=
        1.0
        -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1)
        *
        t
        *
        Math.exp(- (x * x));
      return sign * y}
    function caml_ba_uint8_get32(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3);
      return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24}
    function caml_raw_backtrace_length(){return 0}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_gr_clear_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = s.width;
      s.canvas.height = s.height;
      return 0}
    function bigstring_to_array_buffer(bs){return bs.data.buffer}
    function caml_sys_const_naked_pointers_checked(_unit){return 0}
    function lxor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] ^= nat2.data[ofs2];return 0}
    function caml_obj_add_offset(v,offset)
     {caml_failwith("Obj.add_offset is not supported")}
    function caml_final_release(){return 0}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_gr_plot(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.createImageData(1,1),
       d=im.data,
       color=s.color;
      d[0] = color >> 16 & 0xff;
      d[1] = color >> 8 & 0xff,d[2] = color >> 0 & 0xff;
      d[3] = 0xFF;
      s.x = x;
      s.y = y;
      s.context.putImageData(im,x,s.height - y);
      return 0}
    function caml_bytes_set16(s,i,i16)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b2=0xFF & i16 >> 8,b1=0xFF & i16;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      return 0}
    function caml_string_set16(s,i,i16){return caml_bytes_set16(s,i,i16)}
    function caml_bytes_set64(s,i,i64)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=caml_int64_to_bytes(i64);
      for(var j=0;j < 8;j++)caml_bytes_unsafe_set(s,i + 7 - j,a[j]);
      return 0}
    function caml_int64_bswap(x)
     {var y=caml_int64_to_bytes(x);
      return caml_int64_of_bytes([y[7],y[6],y[5],y[4],y[3],y[2],y[1],y[0]])}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_string=caml_fill_bytes;
    function caml_gc_major(){return 0}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function unix_getuid(unit)
     {if(globalThis.process && globalThis.process.getuid)
       return globalThis.process.getuid();
      caml_raise_not_found()}
    function caml_sys_file_exists(name)
     {var root=resolve_fs_device(name);return root.device.exists(root.rest)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_gr_size_x(){var s=caml_gr_state_get();return s.width}
    function caml_ml_debug_info_status(){return 0}
    var
     os_type=
      globalThis.process
       &&
       globalThis.process.platform
       &&
       globalThis.process.platform
       ==
       "win32"
       ?"Cygwin"
       :"Unix";
    function caml_sys_const_ostype_cygwin(){return os_type == "Cygwin"?1:0}
    function caml_cosh_float(x){return Math.cosh(x)}
    var caml_ephe_key_offset=3;
    function caml_weak_check(x,i)
     {return x[caml_ephe_key_offset + i]
              !==
              undefined
              &&
              x[caml_ephe_key_offset + i]
              !==
              0
              ?1
              :0}
    var caml_ephe_check_key=caml_weak_check;
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_gr_text_size(txt)
     {var
       s=caml_gr_state_get(),
       w=s.context.measureText(caml_jsstring_of_string(txt)).width;
      return [0,w,s.text_size]}
    function caml_lex_run_mem(s,i,mem,curr_pos)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)
         mem[dst + 1] = curr_pos;
        else
         mem[dst + 1] = mem[src + 1]}}
    function caml_lex_run_tag(s,i,mem)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)mem[dst + 1] = - 1;else mem[dst + 1] = mem[src + 1]}}
    function caml_new_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_mem=10,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5,
       lex_base_code=6,
       lex_backtrk_code=7,
       lex_default_code=8,
       lex_trans_code=9,
       lex_check_code=10,
       lex_code=11;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      if(! tbl.lex_default_code)
       {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
      if(tbl.lex_code == null)
       tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)
         {var pc_off=tbl.lex_base_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          return - base - 1}
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {var pc_off=tbl.lex_backtrk_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        var pstate=state;
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         {var base_code=tbl.lex_base_code[pstate],pc_off;
          if(tbl.lex_check_code[base_code + c] == pstate)
           pc_off = tbl.lex_trans_code[base_code + c];
          else
           pc_off = tbl.lex_default_code[pstate];
          if(pc_off > 0)
           caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
          if(c == 256)lexbuf[lex_eof_reached] = 0}}}
    function caml_ba_uint8_set64(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var v=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)ba.set(ofs + i,v[7 - i]);
      return 0}
    function caml_sys_executable_name(a){return caml_executable_name}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_acosh_float(x){return Math.acosh(x)}
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_seek_out_64(chanid,pos)
     {caml_ml_flush(chanid);
      caml_ml_channels[chanid].offset = caml_int64_to_float(pos);
      return 0}
    function compare_nat_real(nat1,nat2)
     {return compare_nat(nat1,0,nat1.data.length,nat2,0,nat2.data.length)}
    function caml_gc_set(_control){return 0}
    function caml_js_get(o,f){return o[f]}
    function caml_ml_set_buffered(c,v){return 0}
    function caml_gc_compaction(){return 0}
    function caml_weak_get(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_key");
      return x[caml_ephe_key_offset + i] === undefined
              ?0
              :x[caml_ephe_key_offset + i]}
    var caml_ephe_get_key=caml_weak_get;
    function caml_bigstring_blit_bytes_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_bytes_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_bytes(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function win_cleanup(){}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function caml_exn_with_js_backtrace(exn,force)
     {if(! exn.js_error || force || exn[0] == 248)
       exn.js_error
       =
       new (globalThis.Error)("Js exception containing backtrace");
      return exn}
    function caml_sys_isatty(_chan){return 0}
    function is_digit_zero(nat,ofs){if(nat.data[ofs] == 0)return 1;return 0}
    function unix_inet_addr_of_string(){return 0}
    function caml_js_set(o,f,v){o[f] = v;return 0}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_log2_float(x){return Math.log2(x)}
    function caml_gc_huge_fallback_count(unit){return 0}
    function caml_spacetime_only_works_for_native_code()
     {caml_failwith("Spacetime profiling only works for native code")}
    function caml_int64_sub(x,y){return x.sub(y)}
    function caml_ml_seek_in_64(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = caml_int64_to_float(pos);
      return 0}
    function caml_int64_shift_left(x,s){return x.shift_left(s)}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_sys_const_int_size(){return 32}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_is_js(){return 1}
    function caml_ba_dim(ba,i)
     {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
      return ba.dims[i]}
    function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
    function unix_localtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(d.getFullYear(),0,1).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    var caml_ephe_create=caml_weak_create;
    function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s)}
    function unix_mktime(tm)
     {var
       d=new Date(tm[6] + 1900,tm[5],tm[4],tm[3],tm[2],tm[1]).getTime(),
       t=Math.floor(d / 1000),
       tm2=unix_localtime(t);
      return [0,t,tm2]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_bytes_get64(s,i)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_bytes_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_sys_remove(name)
     {var root=resolve_fs_device(name),ok=root.device.unlink(root.rest);
      if(ok == 0)caml_raise_no_such_file(caml_jsbytes_of_string(name));
      return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get32(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 3)caml_string_bound_error();
      var
       b1=caml_string_unsafe_get(s,i),
       b2=caml_string_unsafe_get(s,i + 1),
       b3=caml_string_unsafe_get(s,i + 2),
       b4=caml_string_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_hypot_float(x,y){return Math.hypot(x,y)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_ephe_unset_key(x,i){return caml_weak_set(x,i,0)}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_ml_bytes_content(s)
     {switch(s.t & 6)
       {default:caml_convert_string_to_bytes(s);case 0:return s.c;
        case 4:return s.c
        }}
    function caml_hash_mix_bytes(h,v)
     {var content=caml_ml_bytes_content(v);
      return typeof content === "string"
              ?caml_hash_mix_jsbytes(h,content)
              :caml_hash_mix_bytes_arr(h,content)}
    function caml_bytes_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_erfc_float(x){return 1 - caml_erf_float(x)}
    function caml_gr_fill_poly(ar)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(ar[1][1],s.height - ar[1][2]);
      for(var i=2;i < ar.length;i++)
       s.context.lineTo(ar[i][1],s.height - ar[i][2]);
      s.context.lineTo(ar[1][1],s.height - ar[1][2]);
      s.context.fill();
      return 0}
    function caml_gc_quick_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_ml_input_int(chanid)
     {var chan=caml_ml_channels[chanid],file=chan.file;
      while(chan.offset + 3 >= file.length())
       {var l=caml_ml_refill_input(chan);if(l == 0)caml_raise_end_of_file()}
      var
       o=chan.offset,
       r=
        file.read_one(o)
        <<
        24
        |
        file.read_one(o + 1)
        <<
        16
        |
        file.read_one(o + 2)
        <<
        8
        |
        file.read_one(o + 3);
      chan.offset += 4;
      return r}
    function caml_gr_display_mode()
     {caml_failwith("caml_gr_display_mode not Implemented")}
    function caml_obj_reachable_words(o){return 0}
    function nth_digit_nat(nat,ofs){return nat.data[ofs]}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[5] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_sys_getcwd()
     {return caml_string_of_jsbytes(caml_current_dir)}
    function caml_sys_const_big_endian(){return 0}
    function caml_list_to_js_array(l)
     {var a=[];for(;l !== 0;l = l[2])a.push(l[1]);return a}
    var
     caml_legacy_custom_code=false,
     caml_output_val=
      function()
        {function Writer(){this.chunk = []}
         Writer.prototype
         =
         {chunk_idx:20,
          block_len:0,
          obj_counter:0,
          size_32:0,
          size_64:0,
          write:
          function(size,value)
           {for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_at:
          function(pos,size,value)
           {var pos=pos;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[pos++] = value >> i & 0xFF},
          write_code:
          function(size,code,value)
           {this.chunk[this.chunk_idx++] = code;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_shared:
          function(offset)
           {if(offset < 1 << 8)
             this.write_code(8,0x04,offset);
            else
             if(offset < 1 << 16)
              this.write_code(16,0x05,offset);
             else
              this.write_code(32,0x06,offset)},
          pos:function(){return this.chunk_idx},
          finalize:
          function()
           {this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
            this.write(32,0x8495A6BE);
            this.write(32,this.block_len);
            this.write(32,this.obj_counter);
            this.write(32,this.size_32);
            this.write(32,this.size_64);
            return this.chunk}};
         return function(v,flags)
          {flags = caml_list_to_js_array(flags);
           var
            no_sharing=flags.indexOf(0) !== - 1,
            closures=flags.indexOf(1) !== - 1;
           if(closures)
            globalThis.console.warn
             ("in caml_output_val: flag Marshal.Closures is not supported.");
           var
            writer=new Writer(),
            stack=[],
            intern_obj_table=no_sharing?null:new MlObjectTable();
           function memo(v)
            {if(no_sharing)return false;
             var existing_offset=intern_obj_table.recall(v);
             if(existing_offset)
              {writer.write_shared(existing_offset);return true}
             else
              {intern_obj_table.store(v);return false}}
           function extern_rec(v)
            {if(v.caml_custom)
              {if(memo(v))return;
               var
                name=v.caml_custom,
                ops=caml_custom_ops[name],
                sz_32_64=[0,0];
               if(! ops.serialize)
                caml_invalid_argument("output_value: abstract value (Custom)");
               if(caml_legacy_custom_code)
                {writer.write(8,0x12);
                 for(var i=0;i < name.length;i++)
                  writer.write(8,name.charCodeAt(i));
                 writer.write(8,0);
                 ops.serialize(writer,v,sz_32_64)}
               else
                if(ops.fixed_length == undefined)
                 {writer.write(8,0x18);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var header_pos=writer.pos();
                  for(var i=0;i < 12;i++)writer.write(8,0);
                  ops.serialize(writer,v,sz_32_64);
                  writer.write_at(header_pos,32,sz_32_64[0]);
                  writer.write_at(header_pos + 4,32,0);
                  writer.write_at(header_pos + 8,32,sz_32_64[1])}
                else
                 {writer.write(8,0x19);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var old_pos=writer.pos();
                  ops.serialize(writer,v,sz_32_64);
                  if(ops.fixed_length != writer.pos() - old_pos)
                   caml_failwith
                    ("output_value: incorrect fixed sizes specified by " + name)}
               writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
               writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3)}
             else
              if(v instanceof Array && v[0] === (v[0] | 0))
               {if(v[0] == 251)
                 caml_failwith("output_value: abstract value (Abstract)");
                if(v.length > 1 && memo(v))return;
                if(v[0] < 16 && v.length - 1 < 8)
                 writer.write(8,0x80 + v[0] + (v.length - 1 << 4));
                else
                 writer.write_code(32,0x08,v.length - 1 << 10 | v[0]);
                writer.size_32 += v.length;
                writer.size_64 += v.length;
                if(v.length > 1)stack.push(v,1)}
              else
               if(caml_is_ml_bytes(v))
                {if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
                  caml_failwith
                   ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
                 if(memo(v))return;
                 var len=caml_ml_bytes_length(v);
                 if(len < 0x20)
                  writer.write(8,0x20 + len);
                 else
                  if(len < 0x100)
                   writer.write_code(8,0x09,len);
                  else
                   writer.write_code(32,0x0A,len);
                 for(var i=0;i < len;i++)
                  writer.write(8,caml_bytes_unsafe_get(v,i));
                 writer.size_32 += 1 + ((len + 4) / 4 | 0);
                 writer.size_64 += 1 + ((len + 8) / 8 | 0)}
               else
                if(caml_is_ml_string(v))
                 {var len=caml_ml_string_length(v);
                  if(len < 0x20)
                   writer.write(8,0x20 + len);
                  else
                   if(len < 0x100)
                    writer.write_code(8,0x09,len);
                   else
                    writer.write_code(32,0x0A,len);
                  for(var i=0;i < len;i++)
                   writer.write(8,caml_string_unsafe_get(v,i));
                  writer.size_32 += 1 + ((len + 4) / 4 | 0);
                  writer.size_64 += 1 + ((len + 8) / 8 | 0)}
                else
                 if(v != (v | 0))
                  {var type_of_v=typeof v;
                   caml_failwith
                    ("output_value: abstract value (" + type_of_v + ")")}
                 else
                  if(v >= 0 && v < 0x40)
                   writer.write(8,0X40 + v);
                  else
                   if(v >= - (1 << 7) && v < 1 << 7)
                    writer.write_code(8,0x00,v);
                   else
                    if(v >= - (1 << 15) && v < 1 << 15)
                     writer.write_code(16,0x01,v);
                    else
                     writer.write_code(32,0x02,v)}
           extern_rec(v);
           while(stack.length > 0)
            {var i=stack.pop(),v=stack.pop();
             if(i + 1 < v.length)stack.push(v,i + 1);
             extern_rec(v[i])}
           if(intern_obj_table)
            writer.obj_counter = intern_obj_table.objs.length;
           writer.finalize();
           return writer.chunk}}
       ();
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    function caml_output_value_to_string(v,flags)
     {return caml_string_of_array(caml_output_val(v,flags))}
    function caml_raise_not_a_dir(name)
     {caml_raise_sys_error(name + ": Not a directory")}
    function caml_sys_system_command(cmd)
     {var cmd=caml_jsstring_of_string(cmd);
      if
       (typeof require
        !=
        "undefined"
        &&
        require("child_process")
        &&
        require("child_process").execSync)
       try
        {require("child_process").execSync(cmd,{stdio:"inherit"});return 0}
       catch(e){return 1}
      else
       return 127}
    function unix_isatty(fileDescriptor)
     {if(fs_node_supported())
       {var tty=require("tty");return tty.isatty(fileDescriptor)?1:0}
      else
       return 0}
    function caml_js_error_of_exception(exn)
     {if(exn.js_error)return exn.js_error;return null}
    function deserialize_nat(reader,sz)
     {var len=reader.read32s(),nat=new MlNat(len);
      for(var i=0;i < len;i++)nat.data[i] = reader.read32s();
      sz[0] = len * 4;
      return nat}
    function initialize_nat()
     {caml_custom_ops["_nat"]
      =
      {deserialize:deserialize_nat,serialize:serialize_nat,hash:caml_hash_nat}}
    function caml_gr_open_subwindow(a,b,c,d)
     {caml_failwith("caml_gr_open_subwindow not Implemented")}
    function unix_lstat(name)
     {var root=resolve_fs_device(name);
      if(! root.device.lstat)caml_failwith("unix_lstat: not implemented");
      return root.device.lstat(root.rest,true)}
    var unix_lstat_64=unix_lstat;
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=globalThis;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_copysign_float(x,y)
     {if(y == 0)y = 1 / y;x = Math.abs(x);return y < 0?- x:x}
    function caml_gr_set_text_size(size)
     {var s=caml_gr_state_get();
      s.text_size = size;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[],content=caml_ml_bytes_content(s);
           if(typeof content === "string")
            {var b=content;
             for(var i=0;i < len;i += 4)
              {var j=i + ofs;
               buf[i >> 2]
               =
               b.charCodeAt(j)
               |
               b.charCodeAt(j + 1)
               <<
               8
               |
               b.charCodeAt(j + 2)
               <<
               16
               |
               b.charCodeAt(j + 3)
               <<
               24}
             for(;i < len;i++)
              buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3)}
           else
            {var a=content;
             for(var i=0;i < len;i += 4)
              {var j=i + ofs;
               buf[i >> 2]
               =
               a[j]
               |
               a[j + 1]
               <<
               8
               |
               a[j + 2]
               <<
               16
               |
               a[j + 3]
               <<
               24}
             for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)}
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ba_set_generic(ba,i,v)
     {ba.set(ba.offset(caml_js_from_array(i)),v);return 0}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_bytes_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_string_lessequal(s1,s2){return caml_bytes_lessequal(s1,s2)}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_nextafter_float(x,y)
     {if(isNaN(x) || isNaN(y))return NaN;
      if(x == y)return y;
      if(x == 0)return y < 0?- Math.pow(2,- 1074):Math.pow(2,- 1074);
      var bits=caml_int64_bits_of_float(x),one=caml_int64_of_int32(1);
      if(x < y == x > 0)
       bits = caml_int64_add(bits,one);
      else
       bits = caml_int64_sub(bits,one);
      return caml_int64_float_of_bits(bits)}
    function caml_gr_size_y(){var s=caml_gr_state_get();return s.height}
    function caml_ml_pos_in(chanid){return caml_ml_channels[chanid].offset}
    function caml_int64_and(x,y){return x.and(y)}
    function caml_sys_const_word_size(){return 32}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=globalThis;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function MlStringReader(s,i)
     {this.s = caml_jsbytes_of_string(s);this.i = i}
    MlStringReader.prototype
    =
    {read8u:function(){return this.s.charCodeAt(this.i++)},
     read8s:function(){return this.s.charCodeAt(this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (s.charCodeAt(i)
               <<
               24
               |
               s.charCodeAt(i + 1)
               <<
               16
               |
               s.charCodeAt(i + 2)
               <<
               8
               |
               s.charCodeAt(i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return s.charCodeAt(i)
              <<
              24
              |
              s.charCodeAt(i + 1)
              <<
              16
              |
              s.charCodeAt(i + 2)
              <<
              8
              |
              s.charCodeAt(i + 3)},
     readstr:
     function(len)
      {var i=this.i;
       this.i = i + len;
       return caml_string_of_jsbytes(this.s.substring(i,i + len))}};
    function caml_float_of_bytes(a)
     {return caml_int64_float_of_bits(caml_int64_of_bytes(a))}
    function caml_input_value_from_reader(reader,ofs)
     {var
       _magic=reader.read32u(),
       _block_len=reader.read32u(),
       num_objects=reader.read32u(),
       _size_32=reader.read32u(),
       _size_64=reader.read32u(),
       stack=[],
       intern_obj_table=num_objects > 0?[]:null,
       obj_counter=0;
      function intern_rec()
       {var code=reader.read8u();
        if(code >= 0x40)
         if(code >= 0x80)
          {var tag=code & 0xF,size=code >> 4 & 0x7,v=[tag];
           if(size == 0)return v;
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           stack.push(v,size);
           return v}
         else
          return code & 0x3F;
        else
         if(code >= 0x20)
          {var len=code & 0x1F,v=reader.readstr(len);
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           return v}
         else
          switch(code)
           {case 0x00:return reader.read8s();
            case 0x01:return reader.read16s();
            case 0x02:return reader.read32s();
            case 0x03:caml_failwith("input_value: integer too large");break;
            case 0x04:
             var offset=reader.read8u();
             return intern_obj_table[obj_counter - offset];
            case 0x05:
             var offset=reader.read16u();
             return intern_obj_table[obj_counter - offset];
            case 0x06:
             var offset=reader.read32u();
             return intern_obj_table[obj_counter - offset];
            case 0x08:
             var
              header=reader.read32u(),
              tag=header & 0xFF,
              size=header >> 10,
              v=[tag];
             if(size == 0)return v;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             stack.push(v,size);
             return v;
            case 0x13:
             caml_failwith("input_value: data block too large");break;
            case 0x09:
             var len=reader.read8u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0A:
             var len=reader.read32u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0C:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[7 - i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0B:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0E:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0D:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x07:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0F:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x10:
            case 0x11:caml_failwith("input_value: code pointer");break;
            case 0x12:
            case 0x18:
            case 0x19:
             var c,s="";
             while((c = reader.read8u()) != 0)s += String.fromCharCode(c);
             var ops=caml_custom_ops[s],expected_size;
             if(! ops)
              caml_failwith("input_value: unknown custom block identifier");
             switch(code)
              {case 0x12:break;
               case 0x19:
                if(! ops.fixed_length)
                 caml_failwith
                  ("input_value: expected a fixed-size custom block");
                expected_size = ops.fixed_length;
                break;
               case 0x18:
                expected_size = reader.read32u();
                reader.read32s();
                reader.read32s();
                break
               }
             var old_pos=reader.i,size=[0],v=ops.deserialize(reader,size);
             if(expected_size != undefined)
              if(expected_size != size[0])
               caml_failwith
                ("input_value: incorrect length of serialized custom block");
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            default:caml_failwith("input_value: ill-formed message")}}
      var res=intern_rec();
      while(stack.length > 0)
       {var size=stack.pop(),v=stack.pop(),d=v.length;
        if(d < size)stack.push(v,size);
        v[d] = intern_rec()}
      if(typeof ofs != "number")ofs[0] = reader.i;
      return res}
    function caml_string_of_bytes(s){return s}
    function caml_input_value_from_bytes(s,ofs)
     {var
       reader=
        new
         MlStringReader
         (caml_string_of_bytes(s),typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    var
     re_match=
      function()
        {var
          re_word_letters=
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
          opcodes=
           {CHAR:0,
            CHARNORM:1,
            STRING:2,
            STRINGNORM:3,
            CHARCLASS:4,
            BOL:5,
            EOL:6,
            WORDBOUNDARY:7,
            BEGGROUP:8,
            ENDGROUP:9,
            REFGROUP:10,
            ACCEPT:11,
            SIMPLEOPT:12,
            SIMPLESTAR:13,
            SIMPLEPLUS:14,
            GOTO:15,
            PUSHBACK:16,
            SETMARK:17,
            CHECKPROGRESS:18};
         function is_word_letter(c)
          {return re_word_letters[c >> 3] >> (c & 7) & 1}
         function in_bitset(s,i)
          {return caml_string_get(s,i >> 3) >> (i & 7) & 1}
         function re_match_impl(re,s,pos,partial)
          {var
            prog=caml_js_from_array(re[1]),
            cpool=caml_js_from_array(re[2]),
            normtable=caml_jsbytes_of_string(re[3]),
            numgroups=re[4] | 0,
            numregisters=re[5] | 0,
            startchars=re[6] | 0,
            s=caml_array_of_string(s),
            pc=0,
            quit=false,
            stack=[],
            groups=new Array(numgroups),
            re_register=new Array(numregisters);
           for(var i=0;i < groups.length;i++)groups[i] = {start:- 1,end:- 1};
           groups[0].start = pos;
           function backtrack()
            {while(stack.length)
              {var item=stack.pop();
               if(item.undo)
                item.undo.obj[item.undo.prop] = item.undo.value;
               else
                if(item.pos){pc = item.pos.pc;pos = item.pos.txt;return}}
             quit = true}
           function push(item){stack.push(item)}
           function accept()
            {groups[0].end = pos;
             var result=new Array(1 + groups.length * 2);
             result[0] = 0;
             for(var i=0;i < groups.length;i++)
              {var g=groups[i];
               if(g.start < 0 || g.end < 0)g.start = g.end = - 1;
               result[2 * i + 1] = g.start;
               result[2 * i + 1 + 1] = g.end}
             return result}
           function prefix_match()
            {if(partial)return accept();else backtrack()}
           while(! quit)
            {var
              op=prog[pc] & 0xff,
              sarg=prog[pc] >> 8,
              uarg=sarg & 0xff,
              c=s[pos],
              group;
             pc++;
             switch(op)
              {case opcodes.CHAR:
                if(pos === s.length){prefix_match();break}
                if(c === uarg)pos++;else backtrack();
                break;
               case opcodes.CHARNORM:
                if(pos === s.length){prefix_match();break}
                if(normtable.charCodeAt(c) === uarg)pos++;else backtrack();
                break;
               case opcodes.STRING:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(c === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.STRINGNORM:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(normtable.charCodeAt(c) === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.CHARCLASS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))pos++;else backtrack();
                break;
               case opcodes.BOL:
                if(pos > 0 && s[pos - 1] != 10)backtrack();break;
               case opcodes.EOL:
                if(pos < s.length && s[pos] != 10)backtrack();break;
               case opcodes.WORDBOUNDARY:
                if(pos == 0)
                 {if(pos === s.length){prefix_match();break}
                  if(is_word_letter(s[0]))break;
                  backtrack()}
                else
                 if(pos === s.length)
                  {if(is_word_letter(s[pos - 1]))break;backtrack()}
                 else
                  {if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos]))
                    break;
                   backtrack()}
                break;
               case opcodes.BEGGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"start",value:group.start}});
                group.start = pos;
                break;
               case opcodes.ENDGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"end",value:group.end}});
                group.end = pos;
                break;
               case opcodes.REFGROUP:
                group = groups[uarg];
                if(group.start < 0 || group.end < 0){backtrack();break}
                for(var i=group.start;i < group.end;i++)
                 {if(pos === s.length){prefix_match();break}
                  if(s[i] != s[pos]){backtrack();break}
                  pos++}
                break;
               case opcodes.SIMPLEOPT:if(in_bitset(cpool[uarg],c))pos++;break;
               case opcodes.SIMPLESTAR:
                while(in_bitset(cpool[uarg],c))c = s[++pos];break;
               case opcodes.SIMPLEPLUS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))
                 do c = s[++pos];while(in_bitset(cpool[uarg],c));
                else
                 backtrack();
                break;
               case opcodes.ACCEPT:return accept();
               case opcodes.GOTO:pc = pc + sarg;break;
               case opcodes.PUSHBACK:push({pos:{pc:pc + sarg,txt:pos}});break;
               case opcodes.SETMARK:
                push
                 ({undo:{obj:re_register,prop:uarg,value:re_register[uarg]}});
                re_register[uarg] = pos;
                break;
               case opcodes.CHECKPROGRESS:
                if(re_register[uarg] === pos)backtrack();break;
               default:throw new Error("Invalid bytecode")}}
           return 0}
         return re_match_impl}
       ();
    function re_search_backward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_backward");
      while(pos >= 0){var res=re_match(re,s,pos,0);if(res)return res;pos--}
      return [0]}
    function caml_js_from_string(s){return caml_jsstring_of_string(s)}
    function caml_ba_sub(ba,ofs,len)
     {var changed_dim,mul=1;
      if(ba.layout == 0)
       {for(var i=1;i < ba.dims.length;i++)mul = mul * ba.dims[i];
        changed_dim = 0}
      else
       {for(var i=0;i < ba.dims.length - 1;i++)mul = mul * ba.dims[i];
        changed_dim = ba.dims.length - 1;
        ofs = ofs - 1}
      if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
       caml_invalid_argument("Bigarray.sub: bad sub-array");
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)new_dims[i] = ba.dims[i];
      new_dims[changed_dim] = len;
      mul *= caml_ba_get_size_per_element(ba.kind);
      var new_data=ba.data.subarray(ofs * mul,(ofs + len) * mul);
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dims,new_data)}
    function caml_gc_full_major(){return 0}
    function caml_bytes_set32(s,i,i32)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b4=0xFF & i32 >> 24,
       b3=0xFF & i32 >> 16,
       b2=0xFF & i32 >> 8,
       b1=0xFF & i32;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      caml_bytes_unsafe_set(s,i + 2,b3);
      caml_bytes_unsafe_set(s,i + 3,b4);
      return 0}
    function caml_gr_sigio_signal(){return 0}
    function caml_ba_uint8_set32(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      ba.set(ofs + 2,v >>> 16 & 0xff);
      ba.set(ofs + 3,v >>> 24 & 0xff);
      return 0}
    function caml_sys_const_ostype_unix(){return os_type == "Unix"?1:0}
    function caml_signbit_float(x){if(x == 0)x = 1 / x;return x < 0?1:0}
    function caml_gr_set_line_width(w)
     {var s=caml_gr_state_get();
      s.line_width = w;
      s.context.lineWidth = w;
      return 0}
    function caml_gr_set_font(f)
     {var s=caml_gr_state_get();
      s.font = f;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    function caml_gr_set_color(color)
     {var s=caml_gr_state_get();
      function convert(number)
       {var str="" + number.toString(16);
        while(str.length < 2)str = "0" + str;
        return str}
      var r=color >> 16 & 0xff,g=color >> 8 & 0xff,b=color >> 0 & 0xff;
      s.color = color;
      var c_str="#" + convert(r) + convert(g) + convert(b);
      s.context.fillStyle = c_str;
      s.context.strokeStyle = c_str;
      return 0}
    function caml_gr_moveto(x,y)
     {var s=caml_gr_state_get();s.x = x;s.y = y;return 0}
    function caml_gr_resize_window(w,h)
     {var s=caml_gr_state_get();
      s.width = w;
      s.height = h;
      s.canvas.width = w;
      s.canvas.height = h;
      return 0}
    function caml_gr_state_init()
     {caml_gr_moveto(caml_gr_state.x,caml_gr_state.y);
      caml_gr_resize_window(caml_gr_state.width,caml_gr_state.height);
      caml_gr_set_line_width(caml_gr_state.line_width);
      caml_gr_set_text_size(caml_gr_state.text_size);
      caml_gr_set_font(caml_gr_state.font);
      caml_gr_set_color(caml_gr_state.color);
      caml_gr_set_window_title(caml_gr_state.title);
      caml_gr_state.context.textBaseline = "bottom"}
    function caml_gr_current_x(){var s=caml_gr_state_get();return s.x}
    function caml_ba_kind_of_typed_array(ta)
     {var g=globalThis,kind;
      if(ta instanceof g.Float32Array)
       kind = 0;
      else
       if(ta instanceof g.Float64Array)
        kind = 1;
       else
        if(ta instanceof g.Int8Array)
         kind = 2;
        else
         if(ta instanceof g.Uint8Array)
          kind = 3;
         else
          if(ta instanceof g.Int16Array)
           kind = 4;
          else
           if(ta instanceof g.Uint16Array)
            kind = 5;
           else
            if(ta instanceof g.Int32Array)
             kind = 6;
            else
             if(ta instanceof g.Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ml_seek_out(chanid,pos)
     {caml_ml_flush(chanid);caml_ml_channels[chanid].offset = pos;return 0}
    function caml_js_typeof(o){return typeof o}
    function caml_restore_raw_backtrace(exn,bt){return 0}
    function caml_gr_lineto(x,y)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(s.x,s.height - s.y);
      s.context.lineTo(x,s.height - y);
      s.context.stroke();
      s.x = x;
      s.y = y;
      return 0}
    function caml_js_wrap_meth_callback_unsafe(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return f.apply(null,args)}}
    function caml_ba_dim_3(ba){return caml_ba_dim(ba,2)}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          globalThis.console.error("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    var caml_ephe_data_offset=2;
    function caml_ephe_check_data(x)
     {return x[caml_ephe_data_offset] === undefined?0:1}
    function caml_bytes_get16(s,i)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b1=caml_bytes_unsafe_get(s,i),b2=caml_bytes_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_js_from_bool(x){return ! ! x}
    function caml_ml_set_channel_name(){return 0}
    function caml_exp2_float(x){return Math.pow(2,x)}
    function caml_gr_close_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = 0;
      s.canvas.height = 0;
      return 0}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    function caml_md5_chan(chanid,len)
     {var chan=caml_ml_channels[chanid],chan_len=chan.file.length();
      if(len < 0)len = chan_len - chan.offset;
      if(chan.offset + len > chan_len)caml_raise_end_of_file();
      var buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      return caml_md5_string(caml_string_of_bytes(buf),0,len)}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_weak_get_copy(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_copy");
      var y=caml_weak_get(x,i);
      if(y === 0)return y;
      var z=y[1];
      if(z instanceof Array)return [0,caml_obj_dup(z)];
      return y}
    function caml_atanh_float(x){return Math.atanh(x)}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_xmlhttprequest_create(unit)
     {var g=globalThis;
      if(typeof g.XMLHttpRequest !== "undefined")
       try {return new (g.XMLHttpRequest)()}catch(e){}
      if(typeof g.activeXObject !== "undefined")
       {try {return new (g.activeXObject)("Msxml2.XMLHTTP")}catch(e){}
        try {return new (g.activeXObject)("Msxml3.XMLHTTP")}catch(e){}
        try {return new (g.activeXObject)("Microsoft.XMLHTTP")}catch(e){}}
      caml_failwith("Cannot create a XMLHttpRequest")}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_ml_is_buffered(c){return 1}
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_ml_set_channel_refill(chanid,f)
     {caml_ml_channels[chanid].refill = f;return 0}
    function caml_js_expr(s)
     {js_print_stderr("caml_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function caml_int64_mul(x,y){return x.mul(y)}
    function caml_ml_runtime_warnings_enabled(_unit)
     {return caml_runtime_warnings}
    function caml_output_value_to_bytes(v,flags)
     {return caml_bytes_of_array(caml_output_val(v,flags))}
    function caml_eventlog_resume(unit){return 0}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(caml_is_ml_bytes(obj))
          {count--;
           var content=caml_ml_bytes_content(obj);
           if(typeof content === "string")
            for(var b=content,l=b.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
           else
            for(var a=content,l=a.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + a[i] | 0}
         else
          if(caml_is_ml_string(obj))
           {var jsbytes=caml_jsbytes_of_string(obj);
            for(var b=jsbytes,l=jsbytes.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0}
          else
           if(typeof obj === "string")
            for(var b=obj,l=obj.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
           else
            if(obj === (obj | 0))
             {count--;hash_accu = hash_accu * 65599 + obj | 0}
            else
             if(obj === + obj)
              {count--;
               var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
               for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
             else
              if(obj && obj.caml_custom)
               if
                (caml_custom_ops[obj.caml_custom]
                 &&
                 caml_custom_ops[obj.caml_custom].hash)
                {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
                 hash_accu = hash_accu * 65599 + h | 0}}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_output_value_to_buffer(s,ofs,len,v,flags)
     {var t=caml_output_val(v,flags);
      if(t.length > len)caml_failwith("Marshal.to_buffer: buffer overflow");
      caml_blit_bytes(t,0,s,ofs,t.length);
      return 0}
    function re_replacement_text(repl,groups,orig)
     {var
       repl=caml_jsbytes_of_string(repl),
       len=repl.length,
       orig=caml_jsbytes_of_string(orig),
       res="",
       n=0,
       cur,
       start,
       end,
       c;
      while(n < len)
       {cur = repl.charAt(n++);
        if(cur != "\\")
         res += cur;
        else
         {if(n == len)
           caml_failwith("Str.replace: illegal backslash sequence");
          cur = repl.charAt(n++);
          switch(cur)
           {case "\\":res += cur;break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
             c = + cur;
             if(c * 2 >= groups.length - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             start = caml_array_get(groups,c * 2);
             end = caml_array_get(groups,c * 2 + 1);
             if(start == - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             res += orig.slice(start,end);
             break;
            default:res += "\\" + cur}}}
      return caml_string_of_jsbytes(res)}
    function caml_pure_js_expr(s)
     {js_print_stderr("caml_pure_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function blit_nat(nat1,ofs1,nat2,ofs2,len)
     {for(var i=0;i < len;i++)nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
      return 0}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_int64_xor(x,y){return x.xor(y)}
    function caml_bigstring_blit_ba_to_bytes(ba1,pos1,bytes2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(pos2 + len > caml_ml_bytes_length(bytes2))caml_array_bound_error();
      var slice=ba1.data.slice(ofs1,ofs1 + len);
      caml_blit_bytes(caml_bytes_of_array(slice),0,bytes2,pos2,len);
      return 0}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function jsoo_create_file_extern(name,content)
     {if(globalThis.jsoo_create_file)
       globalThis.jsoo_create_file(name,content);
      else
       {if(! globalThis.caml_fs_tmp)globalThis.caml_fs_tmp = [];
        globalThis.caml_fs_tmp.push({name:name,content:content})}
      return 0}
    function caml_to_js_string(s){return caml_jsstring_of_string(s)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function re_search_forward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_forward");
      while(pos <= caml_ml_string_length(s))
       {var res=re_match(re,s,pos,0);if(res)return res;pos++}
      return [0]}
    var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_seek_in(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = pos;
      return 0}
    function caml_sys_read_directory(name)
     {var
       root=resolve_fs_device(name),
       a=root.device.readdir(root.rest),
       l=new Array(a.length + 1);
      l[0] = 0;
      for(var i=0;i < a.length;i++)l[i + 1] = caml_string_of_jsbytes(a[i]);
      return l}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_sys_const_ostype_win32(){return os_type == "Win32"?1:0}
    function caml_obj_is_block(x){return + (x instanceof Array)}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    function caml_obj_set_raw_field(o,i,v){return o[i + 1] = v}
    function caml_js_var(x)
     {var x=caml_jsstring_of_string(x);
      if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
       js_print_stderr
        ('caml_js_var: "'
         +
         x
         +
         '" is not a valid JavaScript variable. continuing ..');
      return eval(x)}
    function caml_trunc_float(x){return Math.trunc(x)}
    function caml_ephe_blit_data(src,dst)
     {dst[caml_ephe_data_offset] = src[caml_ephe_data_offset];return 0}
    function caml_is_printable(c){return + (c > 31 && c < 127)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function re_partial_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.partial_match");
      var res=re_match(re,s,pos,1);
      return res?res:[0]}
    function caml_sys_random_seed()
     {if(globalThis.crypto)
       if(typeof globalThis.crypto.getRandomValues === "function")
        {var a=new (globalThis.Uint32Array)(1);
         globalThis.crypto.getRandomValues(a);
         return [0,a[0]]}
       else
        if(globalThis.crypto.randomBytes === "function")
         {var
           buff=globalThis.crypto.randomBytes(4),
           a=new (globalThis.Uint32Array)(buff);
          return [0,a[0]]}
      var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_final_register_called_without_value(){return 0}
    function caml_ba_get_2(ba,i0,i1){return ba.get(ba.offset([i0,i1]))}
    function win_handle_fd(x){return x}
    function caml_ba_uint8_set16(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      return 0}
    var win_filedescr_of_channel=caml_channel_descriptor;
    function caml_js_delete(o,f){delete o[f];return 0}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_list_mount_point()
     {var prev=0;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var old=prev;
        prev = [0,caml_string_of_jsbytes(jsoo_mount_point[i].path),old]}
      return prev}
    var
     caml_marshal_constants=
      {PREFIX_SMALL_BLOCK:0x80,
       PREFIX_SMALL_INT:0x40,
       PREFIX_SMALL_STRING:0x20,
       CODE_INT8:0x00,
       CODE_INT16:0x01,
       CODE_INT32:0x02,
       CODE_INT64:0x03,
       CODE_SHARED8:0x04,
       CODE_SHARED16:0x05,
       CODE_SHARED32:0x06,
       CODE_BLOCK32:0x08,
       CODE_BLOCK64:0x13,
       CODE_STRING8:0x09,
       CODE_STRING32:0x0A,
       CODE_DOUBLE_BIG:0x0B,
       CODE_DOUBLE_LITTLE:0x0C,
       CODE_DOUBLE_ARRAY8_BIG:0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE:0x0E,
       CODE_DOUBLE_ARRAY32_BIG:0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE:0x07,
       CODE_CODEPOINTER:0x10,
       CODE_INFIXPOINTER:0x11,
       CODE_CUSTOM:0x12,
       CODE_CUSTOM_LEN:0x18,
       CODE_CUSTOM_FIXED:0x19};
    function caml_obj_raw_field(o,i){return o[i + 1]}
    function caml_js_equals(x,y){return + (x == y)}
    function bigstring_to_typed_array(bs){return bs.data}
    function caml_gr_arc_aux(ctx,cx,cy,ry,rx,a1,a2)
     {while(a1 > a2)a2 += 360;
      a1 /= 180;
      a2 /= 180;
      var
       rot=0,
       xPos,
       yPos,
       xPos_prev,
       yPos_prev,
       space=2,
       num=(a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
       delta=(a2 - a1) * Math.PI / num,
       i=a1 * Math.PI;
      for(var j=0;j <= num;j++)
       {xPos
        =
        cx
        -
        rx
        *
        Math.sin(i)
        *
        Math.sin(rot * Math.PI)
        +
        ry
        *
        Math.cos(i)
        *
        Math.cos(rot * Math.PI);
        xPos = xPos.toFixed(2);
        yPos
        =
        cy
        +
        ry
        *
        Math.cos(i)
        *
        Math.sin(rot * Math.PI)
        +
        rx
        *
        Math.sin(i)
        *
        Math.cos(rot * Math.PI);
        yPos = yPos.toFixed(2);
        if(j == 0)
         ctx.moveTo(xPos,yPos);
        else
         if(xPos_prev != xPos || yPos_prev != yPos)ctx.lineTo(xPos,yPos);
        xPos_prev = xPos;
        yPos_prev = yPos;
        i -= delta}
      return 0}
    function caml_gr_fill_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.fill();
      return 0}
    function caml_ba_slice(ba,vind)
     {vind = caml_js_from_array(vind);
      var num_inds=vind.length,index=[],sub_dims=[],ofs;
      if(num_inds > ba.dims.length)
       caml_invalid_argument("Bigarray.slice: too many indices");
      if(ba.layout == 0)
       {for(var i=0;i < num_inds;i++)index[i] = vind[i];
        for(;i < ba.dims.length;i++)index[i] = 0;
        sub_dims = ba.dims.slice(num_inds)}
      else
       {for(var i=0;i < num_inds;i++)
         index[ba.dims.length - num_inds + i] = vind[i];
        for(var i=0;i < ba.dims.length - num_inds;i++)index[i] = 1;
        sub_dims = ba.dims.slice(0,ba.dims.length - num_inds)}
      ofs = ba.offset(index);
      var
       size=caml_ba_get_size(sub_dims),
       size_per_element=caml_ba_get_size_per_element(ba.kind),
       new_data=
        ba.data.subarray
         (ofs * size_per_element,(ofs + size) * size_per_element);
      return caml_ba_create_unsafe(ba.kind,ba.layout,sub_dims,new_data)}
    function caml_marshal_data_size(s,ofs)
     {function get32(s,i)
       {return caml_bytes_unsafe_get(s,i)
               <<
               24
               |
               caml_bytes_unsafe_get(s,i + 1)
               <<
               16
               |
               caml_bytes_unsafe_get(s,i + 2)
               <<
               8
               |
               caml_bytes_unsafe_get(s,i + 3)}
      if(get32(s,ofs) != (0x8495A6BE | 0))
       caml_failwith("Marshal.data_size: bad object");
      return get32(s,ofs + 4)}
    function caml_input_value(chanid)
     {var chan=caml_ml_channels[chanid],buf=caml_create_bytes(8);
      chan.file.read(chan.offset,buf,0,8);
      var len=caml_marshal_data_size(buf,0) + 20,buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      var offset=[0],res=caml_input_value_from_bytes(buf,offset);
      chan.offset = chan.offset + offset[0];
      return res}
    function caml_ba_kind(ba){return ba.kind}
    function caml_js_fun_call(f,a)
     {switch(a.length)
       {case 1:return f();
        case 2:return f(a[1]);
        case 3:return f(a[1],a[2]);
        case 4:return f(a[1],a[2],a[3]);
        case 5:return f(a[1],a[2],a[3],a[4]);
        case 6:return f(a[1],a[2],a[3],a[4],a[5]);
        case 7:return f(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return f(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      return f.apply(null,caml_js_from_array(a))}
    function caml_gc_major_slice(work){return 0}
    function caml_js_pure_expr(f){return f()}
    function compare_digits_nat(nat1,ofs1,nat2,ofs2)
     {if(nat1.data[ofs1] > nat2.data[ofs2])return 1;
      if(nat1.data[ofs1] < nat2.data[ofs2])return - 1;
      return 0}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_gr_wait_event(_evl)
     {caml_failwith
       ("caml_gr_wait_event not Implemented: use Graphics_js instead")}
    function caml_gr_sigio_handler(){return 0}
    function caml_hash_mix_bigstring(h,bs)
     {return caml_hash_mix_bytes_arr(h,bs.data)}
    function caml_record_backtrace(){return 0}
    function unix_gmtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(Date.UTC(d.getUTCFullYear(),0,1)).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000);
      return [0,
              d.getUTCSeconds(),
              d.getUTCMinutes(),
              d.getUTCHours(),
              d.getUTCDate(),
              d.getUTCMonth(),
              d.getUTCFullYear() - 1900,
              d.getUTCDay(),
              doy,
              false | 0]}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_get_config()
     {return [0,caml_string_of_jsbytes(os_type),32,0]}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_asinh_float(x){return Math.asinh(x)}
    function bigstring_of_array_buffer(ab)
     {var ta=new (globalThis.Uint8Array)(ab);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_ba_init(){return 0}
    function re_string_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.string_match");
      var res=re_match(re,s,pos,0);
      return res?res:[0]}
    function BigStringReader(bs,i){this.s = bs;this.i = i}
    BigStringReader.prototype
    =
    {read8u:function(){return caml_ba_get_1(this.s,this.i++)},
     read8s:function(){return caml_ba_get_1(this.s,this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 8 | caml_ba_get_1(s,i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 24 >> 16 | caml_ba_get_1(s,i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (caml_ba_get_1(s,i)
               <<
               24
               |
               caml_ba_get_1(s,i + 1)
               <<
               16
               |
               caml_ba_get_1(s,i + 2)
               <<
               8
               |
               caml_ba_get_1(s,i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return caml_ba_get_1(s,i)
              <<
              24
              |
              caml_ba_get_1(s,i + 1)
              <<
              16
              |
              caml_ba_get_1(s,i + 2)
              <<
              8
              |
              caml_ba_get_1(s,i + 3)},
     readstr:
     function(len)
      {var i=this.i,arr=new Array(len);
       for(var j=0;j < len;j++)arr[j] = caml_ba_get_1(this.s,i + j);
       this.i = i + len;
       return caml_string_of_array(arr)}};
    function caml_gr_dump_image(im)
     {var data=[0];
      for(var i=0;i < im.height;i++)
       {data[i + 1] = [0];
        for(var j=0;j < im.width;j++)
         {var
           o=i * (im.width * 4) + j * 4,
           r=im.data[o + 0],
           g=im.data[o + 1],
           b=im.data[o + 2];
          data[i + 1][j + 1] = (r << 16) + (g << 8) + b}}
      return data}
    function caml_ba_get_generic(ba,i)
     {var ofs=ba.offset(caml_js_from_array(i));return ba.get(ofs)}
    function caml_get_exception_backtrace(){return 0}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_mount_autoload(name,f)
     {var path=caml_make_path(name),name=caml_trailing_slash(path.join("/"));
      jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)});
      return 0}
    function caml_bigstring_blit_ba_to_ba(ba1,pos1,ba2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(12 != ba2.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1),ofs2=ba2.offset(pos2);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=ba1.data.subarray(ofs1,ofs1 + len);
      ba2.data.set(slice,pos2);
      return 0}
    var caml_blit_bigstring_to_bigstring=caml_bigstring_blit_ba_to_ba;
    function caml_string_lessthan(s1,s2){return caml_bytes_lessthan(s1,s2)}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_ephe_get_data_copy(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,caml_obj_dup(x[caml_ephe_data_offset])]}
    function caml_memprof_start(rate,stack_size,tracker){return 0}
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_js_to_bool(x){return + x}
    function caml_gr_create_image(x,y)
     {var s=caml_gr_state_get();return s.context.createImageData(x,y)}
    var caml_ephe_get_key_copy=caml_weak_get_copy;
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_raw_backtrace_next_slot(){return 0}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && globalThis.toplevelReloc)
       n = globalThis.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3,len3)
     {var carry=0;
      for(var i=0;i < len3;i++)
       carry
       +=
       mult_digit_nat(nat1,ofs1 + i,len1 - i,nat2,ofs2,len2,nat3,ofs3 + i);
      return carry}
    function square_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var carry=0;
      carry += add_nat(nat1,ofs1,len1,nat1,ofs1,len1,0);
      carry += mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat2,ofs2,len2);
      return carry}
    function caml_js_from_float(x){return x}
    function caml_floatarray_create(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_gc_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_get_major_credit(n){return 0}
    function caml_sys_modify_argv(arg){caml_argv = arg;return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === undefined)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_js_get_console()
     {var
       c=globalThis.console?globalThis.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name)}
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var refill=null;
      if(fd == 0 && fs_node_supported())
       {var fs=require("fs");
        refill
        =
        function(){return caml_string_of_jsstring(fs.readFileSync(0,"utf8"))}}
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function bigstring_of_typed_array(ba)
     {var
       ta=
        new
         (globalThis.Uint8Array)
         (ba.buffer,ba.byteOffset,ba.length * ba.BYTES_PER_ELEMENT);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_round_float(x){return Math.round(x)}
    function unix_stat(name)
     {var root=resolve_fs_device(name);
      if(! root.device.stat)caml_failwith("unix_stat: not implemented");
      return root.device.stat(root.rest,true)}
    var unix_stat_64=unix_stat;
    function caml_ojs_new_arr(c,a)
     {switch(a.length)
       {case 0:return new c();
        case 1:return new c(a[0]);
        case 2:return new c(a[0],a[1]);
        case 3:return new c(a[0],a[1],a[2]);
        case 4:return new c(a[0],a[1],a[2],a[3]);
        case 5:return new c(a[0],a[1],a[2],a[3],a[4]);
        case 6:return new c(a[0],a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[0],a[1],a[2],a[3],a[4],a[5],a[6])
        }
      function F(){return c.apply(this,a)}
      F.prototype = c.prototype;
      return new F()}
    function complement_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)
       nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0)}
    var caml_js_regexps={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
    function caml_js_html_escape(s)
     {if(! caml_js_regexps.all.test(s))return s;
      return s.replace(caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;")}
    function caml_ba_dim_2(ba){return caml_ba_dim(ba,1)}
    function caml_js_wrap_meth_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,[this,args])}}
    function caml_sinh_float(x){return Math.sinh(x)}
    function caml_ldexp_float(x,exp)
     {exp |= 0;
      if(exp > 1023)
       {exp -= 1023;
        x *= Math.pow(2,1023);
        if(exp > 1023){exp -= 1023;x *= Math.pow(2,1023)}}
      if(exp < - 1023){exp += 1023;x *= Math.pow(2,- 1023)}
      x *= Math.pow(2,exp);
      return x}
    function caml_gr_state_set(ctx)
     {caml_gr_state = ctx;caml_gr_state_init();return 0}
    function caml_js_wrap_callback_strict(arity,f)
     {return function()
       {var n=arguments.length;
        if(n == arity && f.length == arity)return f.apply(null,arguments);
        var args=new Array(arity),len=Math.min(arguments.length,arity);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_gc_minor_words(unit){return 0}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_get_current_callstack(){return [0]}
    function land_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] &= nat2.data[ofs2];return 0}
    function caml_int64_mod(x,y){return x.mod(y)}
    function unix_readlink(name)
     {var root=resolve_fs_device(name);
      if(! root.device.readlink)
       caml_failwith("unix_readlink: not implemented");
      return root.device.readlink(root.rest,true)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_int32_bswap(x)
     {return (x & 0x000000FF)
             <<
             24
             |
             (x & 0x0000FF00)
             <<
             8
             |
             (x & 0x00FF0000)
             >>>
             8
             |
             (x & 0xFF000000)
             >>>
             24}
    function win_startup(){}
    function caml_ba_set_3(ba,i0,i1,i2,v)
     {ba.set(ba.offset([i0,i1,i2]),v);return 0}
    function caml_js_instanceof(o,c){return o instanceof c?1:0}
    function caml_get_major_bucket(n){return 0}
    var caml_blit_bigstring_to_string=caml_bigstring_blit_ba_to_bytes;
    function set_digit_nat_native(nat,ofs,digit)
     {nat.data[ofs] = digit;return 0}
    function nth_digit_nat_native(nat,ofs){return nat.data[ofs]}
    function caml_string_set64(s,i,i64){return caml_bytes_set64(s,i,i64)}
    function caml_gr_state_create(canvas,w,h)
     {var context=canvas.getContext("2d");
      return {context:context,
              canvas:canvas,
              x:0,
              y:0,
              width:w,
              height:h,
              line_width:1,
              font:caml_string_of_jsbytes("fixed"),
              text_size:26,
              color:0x000000,
              title:caml_string_of_jsbytes("")}}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_gr_draw_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.stroke();
      return 0}
    function caml_ba_map_file(vfd,kind,layout,shared,dims,pos)
     {caml_failwith("caml_ba_map_file not implemented")}
    function caml_ba_map_file_bytecode(argv,argn)
     {return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5])}
    function unix_symlink(to_dir,src,dst)
     {var src_root=resolve_fs_device(src),dst_root=resolve_fs_device(dst);
      if(src_root.device != dst_root.device)
       caml_failwith("unix_symlink: cannot symlink between two filesystems");
      if(! src_root.device.symlink)
       caml_failwith("unix_symlink: not implemented");
      return src_root.device.symlink(to_dir,src_root.rest,dst_root.rest,true)}
    function caml_ba_create_from(data1,data2,jstyp,kind,layout,dims)
     {if(data2 || caml_ba_get_size_per_element(kind) == 2)
       caml_invalid_argument
        ("caml_ba_create_from: use return caml_ba_create_unsafe");
      return caml_ba_create_unsafe(kind,layout,dims,data1)}
    function caml_tanh_float(x){return Math.tanh(x)}
    function caml_gr_draw_str(str)
     {var s=caml_gr_state_get(),m=s.context.measureText(str),dx=m.width;
      s.context.fillText(str,s.x,s.height - s.y);
      s.x += dx | 0;
      return 0}
    function caml_gr_draw_string(str)
     {caml_gr_draw_str(caml_jsstring_of_string(str));return 0}
    function caml_gr_draw_char(c)
     {caml_gr_draw_str(String.fromCharCode(c));return 0}
    function caml_unmount(name)
     {var
       path=caml_make_path(name),
       name=caml_trailing_slash(path.join("/")),
       idx=- 1;
      for(var i=0;i < jsoo_mount_point.length;i++)
       if(jsoo_mount_point[i].path == name)idx = i;
      if(idx > - 1)jsoo_mount_point.splice(idx,1);
      return 0}
    function caml_input_value_from_string(s,ofs)
     {var reader=new MlStringReader(s,typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_ml_pos_in_64(chanid)
     {return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_gr_draw_image(im,x,y)
     {var s=caml_gr_state_get();
      if(! im.image)
       {var canvas=document.createElement("canvas");
        canvas.width = s.width;
        canvas.height = s.height;
        canvas.getContext("2d").putImageData(im,0,0);
        var image=new (globalThis.Image)();
        image.onload
        =
        function()
         {s.context.drawImage(image,x,s.height - im.height - y);
          im.image = image};
        image.src = canvas.toDataURL("image/png")}
      else
       s.context.drawImage(im.image,x,s.height - im.height - y);
      return 0}
    function caml_register_channel_for_spacetime(_channel){return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_sys_rmdir(name)
     {var root=resolve_fs_device(name);root.device.rmdir(root.rest);return 0}
    function caml_ml_pos_out(chanid)
     {caml_ml_flush(chanid);return caml_ml_channels[chanid].offset}
    function caml_spacetime_enabled(_unit){return 0}
    function caml_bytes_notequal(s1,s2){return 1 - caml_bytes_equal(s1,s2)}
    function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("")}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++)
       {var p=a[i];o[caml_jsstring_of_string(p[1])] = p[2]}
      return o}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_weak_blit(a1,i1,a2,i2,len)
     {caml_array_blit
       (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
      return 0}
    function caml_gr_remember_mode()
     {caml_failwith("caml_gr_remember_mode not Implemented")}
    function caml_fma_float(x,y,z)
     {var
       SPLIT=Math.pow(2,27) + 1,
       MIN_VALUE=Math.pow(2,- 1022),
       EPSILON=Math.pow(2,- 52),
       C=416,
       A=Math.pow(2,+ C),
       B=Math.pow(2,- C);
      function multiply(a,b)
       {var
         at=SPLIT * a,
         ahi=at - (at - a),
         alo=a - ahi,
         bt=SPLIT * b,
         bhi=bt - (bt - b),
         blo=b - bhi,
         p=a * b,
         e=ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
        return {p:p,e:e}}
      function add(a,b)
       {var s=a + b,v=s - a,e=a - (s - v) + (b - v);return {s:s,e:e}}
      function adjust(x,y)
       {return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
                ?x * (1 + (x < 0?- 1:+ 1) * (y < 0?- 1:+ 1) * EPSILON)
                :x}
      if
       (x
        ===
        0
        ||
        x
        !==
        x
        ||
        x
        ===
        +
        (1 / 0)
        ||
        x
        ===
        -
        (1 / 0)
        ||
        y
        ===
        0
        ||
        y
        !==
        y
        ||
        y
        ===
        +
        (1 / 0)
        ||
        y
        ===
        -
        (1 / 0))
       return x * y + z;
      if(z === 0)return x * y;
      if(z !== z || z === + (1 / 0) || z === - (1 / 0))return z;
      var scale=1;
      while(Math.abs(x) > A){scale *= A;x *= B}
      while(Math.abs(y) > A){scale *= A;y *= B}
      if(scale === 1 / 0)return x * y * scale;
      while(Math.abs(x) < B){scale *= B;x *= A}
      while(Math.abs(y) < B){scale *= B;y *= A}
      if(scale === 0)return z;
      var xs=x,ys=y,zs=z / scale;
      if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON)return z;
      if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
       zs = (z < 0?- 1:+ 1) * MIN_VALUE;
      var
       xy=multiply(xs,ys),
       s=add(xy.p,zs),
       u=add(xy.e,s.e),
       i=add(s.s,u.s),
       f=i.s + adjust(i.e,u.e);
      if(f === 0)return f;
      var fs=f * scale;
      if(Math.abs(fs) > MIN_VALUE)return fs;
      return fs + adjust(f - fs / scale,i.e) * scale}
    function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
    function caml_ml_set_binary_mode(chanid,mode)
     {var chan=caml_ml_channels[chanid],data=caml_global_data.fds[chan.fd];
      data.flags.text = ! mode;
      data.flags.binary = mode;
      return 0}
    function caml_final_register(){return 0}
    function caml_gr_draw_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.strokeRect(x,s.height - y,w,- h);
      return 0}
    function caml_string_get16(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 1)caml_string_bound_error();
      var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_ephe_unset_data(x,data)
     {x[caml_ephe_data_offset] = undefined;return 0}
    function caml_output_value(chanid,v,flags)
     {var s=caml_output_value_to_string(v,flags);
      caml_ml_output(chanid,s,0,caml_ml_string_length(s));
      return 0}
    function caml_ba_get_3(ba,i0,i1,i2){return ba.get(ba.offset([i0,i1,i2]))}
    var
     caml_ephe_blit_key=caml_weak_blit,
     caml_initial_time=new Date().getTime() * 0.001;
    function caml_sys_time()
     {var now=new Date().getTime();return now * 0.001 - caml_initial_time}
    function caml_sys_time_include_children(b){return caml_sys_time()}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function unix_getpwuid(unit){caml_raise_not_found()}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_ba_to_typed_array(ba){return ba.data}
    function caml_bytes_get32(s,i)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b1=caml_bytes_unsafe_get(s,i),
       b2=caml_bytes_unsafe_get(s,i + 1),
       b3=caml_bytes_unsafe_get(s,i + 2),
       b4=caml_bytes_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_frexp_float(x)
     {if(x == 0 || ! isFinite(x))return [0,x,0];
      var neg=x < 0;
      if(neg)x = - x;
      var exp=Math.max(- 1023,jsoo_floor_log2(x) + 1);
      x *= Math.pow(2,- exp);
      while(x < 0.5){x *= 2;exp--}
      while(x >= 1){x *= 0.5;exp++}
      if(neg)x = - x;
      return [0,x,exp]}
    function caml_string_get64(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 7)caml_string_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_string_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_js_error_option_of_exception(exn)
     {if(exn.js_error)return [0,exn.js_error];return 0}
    function caml_ml_pos_out_64(chanid)
     {caml_ml_flush(chanid);
      return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_gr_close_subwindow(a)
     {caml_failwith("caml_gr_close_subwindow not Implemented")}
    function caml_floatarray_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_get_minor_free(unit){return 0}
    function caml_set_static_env(k,v)
     {if(! globalThis.jsoo_static_env)globalThis.jsoo_static_env = {};
      globalThis.jsoo_static_env[k] = v;
      return 0}
    function caml_ba_change_layout(ba,layout)
     {if(ba.layout == layout)return ba;
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)
       new_dims[i] = ba.dims[ba.dims.length - i - 1];
      return caml_ba_create_unsafe(ba.kind,layout,new_dims,ba.data)}
    function caml_js_new(c,a)
     {switch(a.length)
       {case 1:return new c();
        case 2:return new c(a[1]);
        case 3:return new c(a[1],a[2]);
        case 4:return new c(a[1],a[2],a[3]);
        case 5:return new c(a[1],a[2],a[3],a[4]);
        case 6:return new c(a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      function F(){return c.apply(this,caml_js_from_array(a))}
      F.prototype = c.prototype;
      return new F()}
    function unix_mkdir(name,perm)
     {var root=resolve_fs_device(name);
      if(! root.device.mkdir)caml_failwith("unix_mkdir: not implemented");
      return root.device.mkdir(root.rest,perm,true)}
    function caml_gr_current_y(){var s=caml_gr_state_get();return s.y}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    function caml_obj_truncate(x,s)
     {if(s <= 0 || s + 1 > x.length)caml_invalid_argument("Obj.truncate");
      if(x.length != s + 1)x.length = s + 1;
      return 0}
    function caml_js_to_string(s){return caml_string_of_jsstring(s)}
    function is_digit_odd(nat,ofs){if(nat.data[ofs] & 1)return 1;return 0}
    function caml_runtime_variant(_unit){return caml_string_of_jsbytes("")}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_array_concat(l)
     {var a=[0];
      while(l !== 0)
       {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
      return a}
    function caml_gr_open_graph(info)
     {var g=globalThis,info=caml_jsstring_of_string(info);
      function get(name)
       {var res=info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
        if(res)return res[2]}
      var specs=[];
      if(! (info == ""))specs.push(info);
      var target=get("target");
      if(! target)target = "";
      var status=get("status");
      if(! status)specs.push("status=1");
      var w=get("width");
      w = w?parseInt(w):200;
      specs.push("width=" + w);
      var h=get("height");
      h = h?parseInt(h):200;
      specs.push("height=" + h);
      var win=g.open("about:blank",target,specs.join(","));
      if(! win)caml_failwith("Graphics.open_graph: cannot open the window");
      var doc=win.document,canvas=doc.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var ctx=caml_gr_state_create(canvas,w,h);
      ctx.set_title = function(title){doc.title = title};
      caml_gr_state_set(ctx);
      var body=doc.body;
      body.style.margin = "0px";
      body.appendChild(canvas);
      return 0}
    function caml_ephe_set_data(x,data)
     {x[caml_ephe_data_offset] = data;return 0}
    function caml_make_float_vect(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_cbrt_float(x){return Math.cbrt(x)}
    function caml_memprof_stop(unit){return 0}
    function caml_eventlog_pause(unit){return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_log1p_float(x){return Math.log1p(x)}
    function caml_int64_or(x,y){return x.or(y)}
    function caml_lazy_make_forward(v){return [250,v]}
    function lor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] |= nat2.data[ofs2];return 0}
    function caml_gr_blit_image(im,x,y)
     {var
       s=caml_gr_state_get(),
       im2=
        s.context.getImageData(x,s.height - im.height - y,im.width,im.height);
      for(var i=0;i < im2.data.length;i += 4)
       {im.data[i] = im2.data[i];
        im.data[i + 1] = im2.data[i + 1];
        im.data[i + 2] = im2.data[i + 2];
        im.data[i + 3] = im2.data[i + 3]}
      return 0}
    function caml_gr_window_id(a)
     {caml_failwith("caml_gr_window_id not Implemented")}
    function caml_js_on_ie()
     {var ua=globalThis.navigator?globalThis.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_int64_shift_right(x,s){return x.shift_right(s)}
    function caml_ba_layout(ba){return ba.layout}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_array_set(array,index,newval)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      array[index + 1] = newval;
      return 0}
    function caml_bytes_greaterequal(s1,s2)
     {return caml_bytes_lessequal(s2,s1)}
    function set_digit_nat(nat,ofs,digit){nat.data[ofs] = digit;return 0}
    function caml_gr_doc_of_state(state)
     {if(state.canvas.ownerDocument)return state.canvas.ownerDocument}
    function caml_ml_output_int(chanid,i)
     {var
       arr=[i >> 24 & 0xFF,i >> 16 & 0xFF,i >> 8 & 0xFF,i & 0xFF],
       s=caml_string_of_array(arr);
      caml_ml_output(chanid,s,0,4);
      return 0}
    function caml_obj_with_tag(tag,x)
     {var l=x.length,a=new Array(l);
      a[0] = tag;
      for(var i=1;i < l;i++)a[i] = x[i];
      return a}
    function caml_ml_channel_size(chanid)
     {var chan=caml_ml_channels[chanid];return chan.file.length()}
    function caml_raw_backtrace_slot()
     {caml_invalid_argument
       ("Printexc.get_raw_backtrace_slot: index out of bounds")}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_js_wrap_meth_callback_strict(arity,f)
     {return function()
       {var args=new Array(arity + 1),len=Math.min(arguments.length,arity);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_backtrace_status(){return 0}
    function caml_sys_argv(a){return caml_argv}
    function caml_install_signal_handler(){return 0}
    function caml_ba_fill(ba,v){ba.fill(v);return 0}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_gc_get(){return [0,0,0,0,0,0,0,0,0]}
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return - 1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return - 1;
      return 0}
    function caml_string_set32(s,i,i32){return caml_bytes_set32(s,i,i32)}
    function caml_parse_engine(tables,env,cmd,arg)
     {var
       ERRCODE=256,
       loop=6,
       testshift=7,
       shift=8,
       shift_recover=9,
       reduce=10,
       READ_TOKEN=0,
       RAISE_PARSE_ERROR=1,
       GROW_STACKS_1=2,
       GROW_STACKS_2=3,
       COMPUTE_SEMANTIC_ACTION=4,
       CALL_ERROR_FUNCTION=5,
       env_s_stack=1,
       env_v_stack=2,
       env_symb_start_stack=3,
       env_symb_end_stack=4,
       env_stacksize=5,
       env_stackbase=6,
       env_curr_char=7,
       env_lval=8,
       env_symb_start=9,
       env_symb_end=10,
       env_asp=11,
       env_rule_len=12,
       env_rule_number=13,
       env_sp=14,
       env_state=15,
       env_errflag=16,
       tbl_transl_const=2,
       tbl_transl_block=3,
       tbl_lhs=4,
       tbl_len=5,
       tbl_defred=6,
       tbl_dgoto=7,
       tbl_sindex=8,
       tbl_rindex=9,
       tbl_gindex=10,
       tbl_tablesize=11,
       tbl_table=12,
       tbl_check=13;
      if(! tables.dgoto)
       {tables.defred = caml_lex_array(tables[tbl_defred]);
        tables.sindex = caml_lex_array(tables[tbl_sindex]);
        tables.check = caml_lex_array(tables[tbl_check]);
        tables.rindex = caml_lex_array(tables[tbl_rindex]);
        tables.table = caml_lex_array(tables[tbl_table]);
        tables.len = caml_lex_array(tables[tbl_len]);
        tables.lhs = caml_lex_array(tables[tbl_lhs]);
        tables.gindex = caml_lex_array(tables[tbl_gindex]);
        tables.dgoto = caml_lex_array(tables[tbl_dgoto])}
      var
       res=0,
       n,
       n1,
       n2,
       state1,
       sp=env[env_sp],
       state=env[env_state],
       errflag=env[env_errflag];
      exit:
      for(;;)
       switch(cmd)
        {case 0:state = 0;errflag = 0;
         case 6:
          n = tables.defred[state];
          if(n != 0){cmd = reduce;break}
          if(env[env_curr_char] >= 0){cmd = testshift;break}
          res = READ_TOKEN;
          break exit;
         case 1:
          if(arg instanceof Array)
           {env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
            env[env_lval] = arg[1]}
          else
           {env[env_curr_char] = tables[tbl_transl_const][arg + 1];
            env[env_lval] = 0}
         case 7:
          n1 = tables.sindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {cmd = shift;break}
          n1 = tables.rindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {n = tables.table[n2];cmd = reduce;break}
          if(errflag <= 0){res = CALL_ERROR_FUNCTION;break exit}
         case 5:
          if(errflag < 3)
           {errflag = 3;
            for(;;)
             {state1 = env[env_s_stack][sp + 1];
              n1 = tables.sindex[state1];
              n2 = n1 + ERRCODE;
              if
               (n1
                !=
                0
                &&
                n2
                >=
                0
                &&
                n2
                <=
                tables[tbl_tablesize]
                &&
                tables.check[n2]
                ==
                ERRCODE)
               {cmd = shift_recover;break}
              else
               {if(sp <= env[env_stackbase])return RAISE_PARSE_ERROR;sp--}}}
          else
           {if(env[env_curr_char] == 0)return RAISE_PARSE_ERROR;
            env[env_curr_char] = - 1;
            cmd = loop;
            break}
         case 8:env[env_curr_char] = - 1;if(errflag > 0)errflag--;
         case 9:
          state = tables.table[n2];
          sp++;
          if(sp >= env[env_stacksize]){res = GROW_STACKS_1;break exit}
         case 2:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = env[env_lval];
          env[env_symb_start_stack][sp + 1] = env[env_symb_start];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end];
          cmd = loop;
          break;
         case 10:
          var m=tables.len[n];
          env[env_asp] = sp;
          env[env_rule_number] = n;
          env[env_rule_len] = m;
          sp = sp - m + 1;
          m = tables.lhs[n];
          state1 = env[env_s_stack][sp];
          n1 = tables.gindex[m];
          n2 = n1 + state1;
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            state1)
           state = tables.table[n2];
          else
           state = tables.dgoto[m];
          if(sp >= env[env_stacksize]){res = GROW_STACKS_2;break exit}
         case 3:res = COMPUTE_SEMANTIC_ACTION;break exit;
         case 4:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = arg;
          var asp=env[env_asp];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
          if(sp > asp)
           env[env_symb_start_stack][sp + 1]
           =
           env[env_symb_end_stack][asp + 1];
          cmd = loop;
          break;
         default:return RAISE_PARSE_ERROR}
      env[env_sp] = sp;
      env[env_state] = state;
      env[env_errflag] = errflag;
      return res}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_sys_mkdir(name,perm)
     {var root=resolve_fs_device(name);
      root.device.mkdir(root.rest,perm);
      return 0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_bytes_greaterthan(s1,s2){return caml_bytes_lessthan(s2,s1)}
    function caml_gr_make_image(arr)
     {var
       s=caml_gr_state_get(),
       h=arr.length - 1,
       w=arr[1].length - 1,
       im=s.context.createImageData(w,h);
      for(var i=0;i < h;i++)
       for(var j=0;j < w;j++)
        {var c=arr[i + 1][j + 1],o=i * (w * 4) + j * 4;
         if(c == - 1)
          {im.data[o + 0] = 0;
           im.data[o + 1] = 0;
           im.data[o + 2] = 0;
           im.data[o + 3] = 0}
         else
          {im.data[o + 0] = c >> 16 & 0xff;
           im.data[o + 1] = c >> 8 & 0xff;
           im.data[o + 2] = c >> 0 & 0Xff;
           im.data[o + 3] = 0xff}}
      return im}
    function caml_ml_set_channel_output(chanid,f)
     {var chan=caml_ml_channels[chanid];
      caml_global_data.fds[chan.fd].output = f;
      return 0}
    function caml_read_file_content(name)
     {var
       name=typeof name == "string"?caml_string_of_jsbytes(name):name,
       root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=caml_create_bytes(len);
        file.read(0,buf,0,len);
        return caml_string_of_bytes(buf)}
      caml_raise_no_such_file(caml_jsbytes_of_string(name))}
    function caml_js_to_float(x){return x}
    function caml_setup_uncaught_exception_handler()
     {var g=globalThis;
      if(g.process && g.process.on)
       g.process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);g.process.exit(2)});
      else
       if(g.addEventListener)
        g.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    globalThis.jsoo_runtime
    =
    {caml_ephe_key_offset:caml_ephe_key_offset,
     caml_ephe_data_offset:caml_ephe_data_offset,
     caml_weak_create:caml_weak_create,
     caml_weak_set:caml_weak_set,
     caml_weak_get:caml_weak_get,
     caml_weak_get_copy:caml_weak_get_copy,
     caml_weak_check:caml_weak_check,
     caml_weak_blit:caml_weak_blit,
     caml_ephe_create:caml_ephe_create,
     caml_ephe_blit_key:caml_ephe_blit_key,
     caml_ephe_get_key:caml_ephe_get_key,
     caml_ephe_get_key_copy:caml_ephe_get_key_copy,
     caml_ephe_check_key:caml_ephe_check_key,
     caml_ephe_set_key:caml_ephe_set_key,
     caml_ephe_unset_key:caml_ephe_unset_key,
     caml_ephe_blit_data:caml_ephe_blit_data,
     caml_ephe_get_data:caml_ephe_get_data,
     caml_ephe_get_data_copy:caml_ephe_get_data_copy,
     caml_ephe_set_data:caml_ephe_set_data,
     caml_ephe_unset_data:caml_ephe_unset_data,
     caml_ephe_check_data:caml_ephe_check_data,
     unix_gettimeofday:unix_gettimeofday,
     unix_time:unix_time,
     unix_gmtime:unix_gmtime,
     unix_localtime:unix_localtime,
     unix_mktime:unix_mktime,
     win_startup:win_startup,
     win_cleanup:win_cleanup,
     win_handle_fd:win_handle_fd,
     unix_isatty:unix_isatty,
     make_unix_err_args:make_unix_err_args,
     unix_stat:unix_stat,
     unix_stat_64:unix_stat_64,
     unix_lstat:unix_lstat,
     unix_lstat_64:unix_lstat_64,
     unix_mkdir:unix_mkdir,
     unix_rmdir:unix_rmdir,
     unix_symlink:unix_symlink,
     unix_readlink:unix_readlink,
     unix_unlink:unix_unlink,
     unix_getuid:unix_getuid,
     unix_getpwuid:unix_getpwuid,
     unix_has_symlink:unix_has_symlink,
     re_match:re_match,
     re_search_forward:re_search_forward,
     re_search_backward:re_search_backward,
     re_string_match:re_string_match,
     re_partial_match:re_partial_match,
     re_replacement_text:re_replacement_text,
     caml_raise_sys_error:caml_raise_sys_error,
     caml_sys_exit:caml_sys_exit,
     caml_is_special_exception:caml_is_special_exception,
     caml_format_exception:caml_format_exception,
     caml_fatal_uncaught_exception:caml_fatal_uncaught_exception,
     caml_set_static_env:caml_set_static_env,
     caml_sys_getenv:caml_sys_getenv,
     caml_sys_unsafe_getenv:caml_sys_unsafe_getenv,
     caml_argv:caml_argv,
     caml_executable_name:caml_executable_name,
     caml_sys_get_argv:caml_sys_get_argv,
     caml_sys_argv:caml_sys_argv,
     caml_sys_modify_argv:caml_sys_modify_argv,
     caml_sys_executable_name:caml_sys_executable_name,
     caml_sys_system_command:caml_sys_system_command,
     caml_sys_time:caml_sys_time,
     caml_sys_time_include_children:caml_sys_time_include_children,
     caml_sys_random_seed:caml_sys_random_seed,
     caml_sys_const_big_endian:caml_sys_const_big_endian,
     caml_sys_const_word_size:caml_sys_const_word_size,
     caml_sys_const_int_size:caml_sys_const_int_size,
     caml_sys_const_max_wosize:caml_sys_const_max_wosize,
     caml_sys_const_ostype_unix:caml_sys_const_ostype_unix,
     caml_sys_const_ostype_win32:caml_sys_const_ostype_win32,
     caml_sys_const_ostype_cygwin:caml_sys_const_ostype_cygwin,
     caml_sys_const_backend_type:caml_sys_const_backend_type,
     os_type:os_type,
     caml_sys_get_config:caml_sys_get_config,
     caml_sys_isatty:caml_sys_isatty,
     caml_runtime_variant:caml_runtime_variant,
     caml_runtime_parameters:caml_runtime_parameters,
     caml_install_signal_handler:caml_install_signal_handler,
     unix_inet_addr_of_string:unix_inet_addr_of_string,
     caml_runtime_warnings:caml_runtime_warnings,
     caml_ml_enable_runtime_warnings:caml_ml_enable_runtime_warnings,
     caml_ml_runtime_warnings_enabled:caml_ml_runtime_warnings_enabled,
     caml_spacetime_enabled:caml_spacetime_enabled,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_register_channel_for_spacetime:caml_register_channel_for_spacetime,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_call_gen:caml_call_gen,
     caml_named_values:caml_named_values,
     caml_register_named_value:caml_register_named_value,
     caml_named_value:caml_named_value,
     caml_global_data:caml_global_data,
     caml_register_global:caml_register_global,
     caml_get_global_data:caml_get_global_data,
     caml_is_printable:caml_is_printable,
     caml_parse_engine:caml_parse_engine,
     caml_set_parser_trace:caml_set_parser_trace,
     caml_update_dummy:caml_update_dummy,
     caml_obj_is_block:caml_obj_is_block,
     caml_obj_tag:caml_obj_tag,
     caml_obj_set_tag:caml_obj_set_tag,
     caml_obj_block:caml_obj_block,
     caml_obj_with_tag:caml_obj_with_tag,
     caml_obj_dup:caml_obj_dup,
     caml_obj_truncate:caml_obj_truncate,
     caml_obj_make_forward:caml_obj_make_forward,
     caml_lazy_make_forward:caml_lazy_make_forward,
     caml_get_public_method:caml_get_public_method,
     caml_oo_last_id:caml_oo_last_id,
     caml_set_oo_id:caml_set_oo_id,
     caml_fresh_oo_id:caml_fresh_oo_id,
     caml_obj_raw_field:caml_obj_raw_field,
     caml_obj_set_raw_field:caml_obj_set_raw_field,
     caml_obj_reachable_words:caml_obj_reachable_words,
     caml_obj_add_offset:caml_obj_add_offset,
     initialize_nat:initialize_nat,
     MlNat:MlNat,
     caml_hash_nat:caml_hash_nat,
     nat_of_array:nat_of_array,
     create_nat:create_nat,
     set_to_zero_nat:set_to_zero_nat,
     blit_nat:blit_nat,
     set_digit_nat:set_digit_nat,
     nth_digit_nat:nth_digit_nat,
     set_digit_nat_native:set_digit_nat_native,
     nth_digit_nat_native:nth_digit_nat_native,
     num_digits_nat:num_digits_nat,
     num_leading_zero_bits_in_digit:num_leading_zero_bits_in_digit,
     is_digit_int:is_digit_int,
     is_digit_zero:is_digit_zero,
     is_digit_odd:is_digit_odd,
     incr_nat:incr_nat,
     add_nat:add_nat,
     complement_nat:complement_nat,
     decr_nat:decr_nat,
     sub_nat:sub_nat,
     mult_digit_nat:mult_digit_nat,
     mult_nat:mult_nat,
     square_nat:square_nat,
     shift_left_nat:shift_left_nat,
     div_helper:div_helper,
     div_digit_nat:div_digit_nat,
     div_nat:div_nat,
     shift_right_nat:shift_right_nat,
     compare_digits_nat:compare_digits_nat,
     compare_nat:compare_nat,
     compare_nat_real:compare_nat_real,
     land_digit_nat:land_digit_nat,
     lor_digit_nat:lor_digit_nat,
     lxor_digit_nat:lxor_digit_nat,
     serialize_nat:serialize_nat,
     deserialize_nat:deserialize_nat,
     caml_str_repeat:caml_str_repeat,
     caml_subarray_to_jsbytes:caml_subarray_to_jsbytes,
     caml_utf8_of_utf16:caml_utf8_of_utf16,
     caml_utf16_of_utf8:caml_utf16_of_utf8,
     jsoo_is_ascii:jsoo_is_ascii,
     caml_bytes_unsafe_get:caml_bytes_unsafe_get,
     caml_bytes_unsafe_set:caml_bytes_unsafe_set,
     caml_string_bound_error:caml_string_bound_error,
     caml_bytes_bound_error:caml_bytes_bound_error,
     caml_string_get:caml_string_get,
     caml_string_get16:caml_string_get16,
     caml_bytes_get16:caml_bytes_get16,
     caml_string_get32:caml_string_get32,
     caml_bytes_get32:caml_bytes_get32,
     caml_string_get64:caml_string_get64,
     caml_bytes_get64:caml_bytes_get64,
     caml_bytes_get:caml_bytes_get,
     caml_string_set:caml_string_set,
     caml_bytes_set16:caml_bytes_set16,
     caml_string_set16:caml_string_set16,
     caml_bytes_set32:caml_bytes_set32,
     caml_string_set32:caml_string_set32,
     caml_bytes_set64:caml_bytes_set64,
     caml_string_set64:caml_string_set64,
     caml_bytes_set:caml_bytes_set,
     caml_bytes_of_utf16_jsstring:caml_bytes_of_utf16_jsstring,
     MlBytes:MlBytes,
     caml_convert_string_to_bytes:caml_convert_string_to_bytes,
     caml_convert_bytes_to_array:caml_convert_bytes_to_array,
     caml_array_of_bytes:caml_array_of_bytes,
     caml_array_of_string:caml_array_of_string,
     caml_create_string:caml_create_string,
     caml_create_bytes:caml_create_bytes,
     caml_string_of_array:caml_string_of_array,
     caml_bytes_of_array:caml_bytes_of_array,
     caml_bytes_compare:caml_bytes_compare,
     caml_bytes_equal:caml_bytes_equal,
     caml_string_notequal:caml_string_notequal,
     caml_bytes_notequal:caml_bytes_notequal,
     caml_bytes_lessequal:caml_bytes_lessequal,
     caml_bytes_lessthan:caml_bytes_lessthan,
     caml_string_greaterequal:caml_string_greaterequal,
     caml_bytes_greaterequal:caml_bytes_greaterequal,
     caml_string_greaterthan:caml_string_greaterthan,
     caml_bytes_greaterthan:caml_bytes_greaterthan,
     caml_fill_bytes:caml_fill_bytes,
     caml_fill_string:caml_fill_string,
     caml_blit_bytes:caml_blit_bytes,
     caml_blit_string:caml_blit_string,
     caml_ml_bytes_length:caml_ml_bytes_length,
     caml_bytes_of_jsbytes:caml_bytes_of_jsbytes,
     caml_string_unsafe_get:caml_string_unsafe_get,
     caml_string_unsafe_set:caml_string_unsafe_set,
     caml_ml_string_length:caml_ml_string_length,
     caml_string_compare:caml_string_compare,
     caml_string_equal:caml_string_equal,
     caml_string_lessequal:caml_string_lessequal,
     caml_string_lessthan:caml_string_lessthan,
     caml_string_of_bytes:caml_string_of_bytes,
     caml_bytes_of_string:caml_bytes_of_string,
     caml_string_of_jsbytes:caml_string_of_jsbytes,
     caml_jsbytes_of_string:caml_jsbytes_of_string,
     caml_jsstring_of_string:caml_jsstring_of_string,
     caml_string_of_jsstring:caml_string_of_jsstring,
     caml_is_ml_bytes:caml_is_ml_bytes,
     caml_ml_bytes_content:caml_ml_bytes_content,
     caml_is_ml_string:caml_is_ml_string,
     caml_js_to_byte_string:caml_js_to_byte_string,
     caml_new_string:caml_new_string,
     caml_js_from_string:caml_js_from_string,
     caml_to_js_string:caml_to_js_string,
     caml_js_to_string:caml_js_to_string,
     caml_md5_chan:caml_md5_chan,
     caml_md5_string:caml_md5_string,
     caml_md5_bytes:caml_md5_bytes,
     caml_marshal_constants:caml_marshal_constants,
     MlStringReader:MlStringReader,
     BigStringReader:BigStringReader,
     caml_float_of_bytes:caml_float_of_bytes,
     caml_input_value_from_string:caml_input_value_from_string,
     caml_input_value_from_bytes:caml_input_value_from_bytes,
     caml_int64_unmarshal:caml_int64_unmarshal,
     caml_int64_marshal:caml_int64_marshal,
     caml_int32_unmarshal:caml_int32_unmarshal,
     caml_nativeint_unmarshal:caml_nativeint_unmarshal,
     caml_custom_ops:caml_custom_ops,
     caml_input_value_from_reader:caml_input_value_from_reader,
     caml_marshal_data_size:caml_marshal_data_size,
     MlObjectTable:MlObjectTable,
     caml_legacy_custom_code:caml_legacy_custom_code,
     caml_output_val:caml_output_val,
     caml_output_value_to_string:caml_output_value_to_string,
     caml_output_value_to_bytes:caml_output_value_to_bytes,
     caml_output_value_to_buffer:caml_output_value_to_buffer,
     caml_lex_array:caml_lex_array,
     caml_lex_engine:caml_lex_engine,
     caml_new_lex_engine:caml_new_lex_engine,
     caml_js_on_ie:caml_js_on_ie,
     caml_js_html_escape:caml_js_html_escape,
     caml_js_html_entities:caml_js_html_entities,
     caml_js_get_console:caml_js_get_console,
     caml_xmlhttprequest_create:caml_xmlhttprequest_create,
     caml_js_error_of_exception:caml_js_error_of_exception,
     caml_js_pure_expr:caml_js_pure_expr,
     caml_js_set:caml_js_set,
     caml_js_get:caml_js_get,
     caml_js_delete:caml_js_delete,
     caml_js_instanceof:caml_js_instanceof,
     caml_js_typeof:caml_js_typeof,
     caml_trampoline:caml_trampoline,
     caml_trampoline_return:caml_trampoline_return,
     js_print_stdout:js_print_stdout,
     js_print_stderr:js_print_stderr,
     caml_is_js:caml_is_js,
     caml_wrap_exception:caml_wrap_exception,
     caml_exn_with_js_backtrace:caml_exn_with_js_backtrace,
     caml_js_error_option_of_exception:caml_js_error_option_of_exception,
     caml_js_from_bool:caml_js_from_bool,
     caml_js_to_bool:caml_js_to_bool,
     caml_js_from_float:caml_js_from_float,
     caml_js_to_float:caml_js_to_float,
     caml_js_from_array:caml_js_from_array,
     caml_js_to_array:caml_js_to_array,
     caml_list_of_js_array:caml_list_of_js_array,
     caml_list_to_js_array:caml_list_to_js_array,
     caml_js_var:caml_js_var,
     caml_js_call:caml_js_call,
     caml_js_fun_call:caml_js_fun_call,
     caml_js_meth_call:caml_js_meth_call,
     caml_js_new:caml_js_new,
     caml_ojs_new_arr:caml_ojs_new_arr,
     caml_js_wrap_callback:caml_js_wrap_callback,
     caml_js_wrap_callback_arguments:caml_js_wrap_callback_arguments,
     caml_js_wrap_callback_strict:caml_js_wrap_callback_strict,
     caml_js_wrap_meth_callback:caml_js_wrap_meth_callback,
     caml_js_wrap_meth_callback_arguments:caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback_strict:caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_unsafe:caml_js_wrap_meth_callback_unsafe,
     caml_js_equals:caml_js_equals,
     caml_js_eval_string:caml_js_eval_string,
     caml_js_expr:caml_js_expr,
     caml_pure_js_expr:caml_pure_js_expr,
     caml_js_object:caml_js_object,
     caml_sys_close:caml_sys_close,
     caml_std_output:caml_std_output,
     caml_sys_open:caml_sys_open,
     caml_ml_set_channel_name:caml_ml_set_channel_name,
     caml_ml_channels:caml_ml_channels,
     caml_ml_out_channels_list:caml_ml_out_channels_list,
     caml_ml_open_descriptor_out:caml_ml_open_descriptor_out,
     caml_ml_open_descriptor_in:caml_ml_open_descriptor_in,
     caml_channel_descriptor:caml_channel_descriptor,
     win_filedescr_of_channel:win_filedescr_of_channel,
     caml_ml_set_binary_mode:caml_ml_set_binary_mode,
     caml_ml_close_channel:caml_ml_close_channel,
     caml_ml_channel_size:caml_ml_channel_size,
     caml_ml_channel_size_64:caml_ml_channel_size_64,
     caml_ml_set_channel_output:caml_ml_set_channel_output,
     caml_ml_set_channel_refill:caml_ml_set_channel_refill,
     caml_ml_refill_input:caml_ml_refill_input,
     caml_ml_may_refill_input:caml_ml_may_refill_input,
     caml_ml_input:caml_ml_input,
     caml_input_value:caml_input_value,
     caml_ml_input_char:caml_ml_input_char,
     caml_ml_input_int:caml_ml_input_int,
     caml_ml_seek_in:caml_ml_seek_in,
     caml_ml_seek_in_64:caml_ml_seek_in_64,
     caml_ml_pos_in:caml_ml_pos_in,
     caml_ml_pos_in_64:caml_ml_pos_in_64,
     caml_ml_input_scan_line:caml_ml_input_scan_line,
     caml_ml_flush:caml_ml_flush,
     caml_ml_output_bytes:caml_ml_output_bytes,
     caml_ml_output:caml_ml_output,
     caml_ml_output_char:caml_ml_output_char,
     caml_output_value:caml_output_value,
     caml_ml_seek_out:caml_ml_seek_out,
     caml_ml_seek_out_64:caml_ml_seek_out_64,
     caml_ml_pos_out:caml_ml_pos_out,
     caml_ml_pos_out_64:caml_ml_pos_out_64,
     caml_ml_output_int:caml_ml_output_int,
     caml_ml_is_buffered:caml_ml_is_buffered,
     caml_ml_set_buffered:caml_ml_set_buffered,
     caml_format_int:caml_format_int,
     caml_parse_sign_and_base:caml_parse_sign_and_base,
     caml_parse_digit:caml_parse_digit,
     caml_int_of_string:caml_int_of_string,
     caml_mul:caml_mul,
     caml_div:caml_div,
     caml_mod:caml_mod,
     caml_bswap16:caml_bswap16,
     caml_int32_bswap:caml_int32_bswap,
     caml_int64_bswap:caml_int64_bswap,
     caml_int64_offset:caml_int64_offset,
     MlInt64:MlInt64,
     caml_int64_ult:caml_int64_ult,
     caml_int64_compare:caml_int64_compare,
     caml_int64_neg:caml_int64_neg,
     caml_int64_add:caml_int64_add,
     caml_int64_sub:caml_int64_sub,
     caml_int64_mul:caml_int64_mul,
     caml_int64_is_zero:caml_int64_is_zero,
     caml_int64_is_negative:caml_int64_is_negative,
     caml_int64_and:caml_int64_and,
     caml_int64_or:caml_int64_or,
     caml_int64_xor:caml_int64_xor,
     caml_int64_shift_left:caml_int64_shift_left,
     caml_int64_shift_right_unsigned:caml_int64_shift_right_unsigned,
     caml_int64_shift_right:caml_int64_shift_right,
     caml_int64_div:caml_int64_div,
     caml_int64_mod:caml_int64_mod,
     caml_int64_of_int32:caml_int64_of_int32,
     caml_int64_to_int32:caml_int64_to_int32,
     caml_int64_to_float:caml_int64_to_float,
     caml_int64_of_float:caml_int64_of_float,
     caml_int64_format:caml_int64_format,
     caml_int64_of_string:caml_int64_of_string,
     caml_int64_create_lo_mi_hi:caml_int64_create_lo_mi_hi,
     caml_int64_create_lo_hi:caml_int64_create_lo_hi,
     caml_int64_lo32:caml_int64_lo32,
     caml_int64_hi32:caml_int64_hi32,
     caml_int64_of_bytes:caml_int64_of_bytes,
     caml_int64_to_bytes:caml_int64_to_bytes,
     caml_int64_hash:caml_int64_hash,
     jsoo_floor_log2:jsoo_floor_log2,
     caml_int64_bits_of_float:caml_int64_bits_of_float,
     caml_int32_bits_of_float:caml_int32_bits_of_float,
     caml_hexstring_of_float:caml_hexstring_of_float,
     caml_int64_float_of_bits:caml_int64_float_of_bits,
     caml_nextafter_float:caml_nextafter_float,
     caml_trunc_float:caml_trunc_float,
     caml_int32_float_of_bits:caml_int32_float_of_bits,
     caml_classify_float:caml_classify_float,
     caml_modf_float:caml_modf_float,
     caml_ldexp_float:caml_ldexp_float,
     caml_frexp_float:caml_frexp_float,
     caml_float_compare:caml_float_compare,
     caml_copysign_float:caml_copysign_float,
     caml_signbit_float:caml_signbit_float,
     caml_expm1_float:caml_expm1_float,
     caml_exp2_float:caml_exp2_float,
     caml_log1p_float:caml_log1p_float,
     caml_log2_float:caml_log2_float,
     caml_hypot_float:caml_hypot_float,
     caml_log10_float:caml_log10_float,
     caml_cosh_float:caml_cosh_float,
     caml_acosh_float:caml_acosh_float,
     caml_sinh_float:caml_sinh_float,
     caml_asinh_float:caml_asinh_float,
     caml_tanh_float:caml_tanh_float,
     caml_atanh_float:caml_atanh_float,
     caml_round_float:caml_round_float,
     caml_cbrt_float:caml_cbrt_float,
     caml_erf_float:caml_erf_float,
     caml_erfc_float:caml_erfc_float,
     caml_fma_float:caml_fma_float,
     caml_format_float:caml_format_float,
     caml_float_of_string:caml_float_of_string,
     caml_hash_univ_param:caml_hash_univ_param,
     caml_hash_mix_int:caml_hash_mix_int,
     caml_hash_mix_final:caml_hash_mix_final,
     caml_hash_mix_float:caml_hash_mix_float,
     caml_hash_mix_int64:caml_hash_mix_int64,
     caml_hash_mix_jsbytes:caml_hash_mix_jsbytes,
     caml_hash_mix_bytes_arr:caml_hash_mix_bytes_arr,
     caml_hash_mix_bytes:caml_hash_mix_bytes,
     caml_hash_mix_string:caml_hash_mix_string,
     caml_hash:caml_hash,
     caml_gr_state:caml_gr_state,
     caml_gr_state_get:caml_gr_state_get,
     caml_gr_state_set:caml_gr_state_set,
     caml_gr_open_graph:caml_gr_open_graph,
     caml_gr_state_init:caml_gr_state_init,
     caml_gr_state_create:caml_gr_state_create,
     caml_gr_doc_of_state:caml_gr_doc_of_state,
     caml_gr_close_graph:caml_gr_close_graph,
     caml_gr_set_window_title:caml_gr_set_window_title,
     caml_gr_resize_window:caml_gr_resize_window,
     caml_gr_clear_graph:caml_gr_clear_graph,
     caml_gr_size_x:caml_gr_size_x,
     caml_gr_size_y:caml_gr_size_y,
     caml_gr_set_color:caml_gr_set_color,
     caml_gr_plot:caml_gr_plot,
     caml_gr_point_color:caml_gr_point_color,
     caml_gr_moveto:caml_gr_moveto,
     caml_gr_current_x:caml_gr_current_x,
     caml_gr_current_y:caml_gr_current_y,
     caml_gr_lineto:caml_gr_lineto,
     caml_gr_draw_rect:caml_gr_draw_rect,
     caml_gr_arc_aux:caml_gr_arc_aux,
     caml_gr_draw_arc:caml_gr_draw_arc,
     caml_gr_set_line_width:caml_gr_set_line_width,
     caml_gr_fill_rect:caml_gr_fill_rect,
     caml_gr_fill_poly:caml_gr_fill_poly,
     caml_gr_fill_arc:caml_gr_fill_arc,
     caml_gr_draw_str:caml_gr_draw_str,
     caml_gr_draw_char:caml_gr_draw_char,
     caml_gr_draw_string:caml_gr_draw_string,
     caml_gr_set_font:caml_gr_set_font,
     caml_gr_set_text_size:caml_gr_set_text_size,
     caml_gr_text_size:caml_gr_text_size,
     caml_gr_make_image:caml_gr_make_image,
     caml_gr_dump_image:caml_gr_dump_image,
     caml_gr_draw_image:caml_gr_draw_image,
     caml_gr_create_image:caml_gr_create_image,
     caml_gr_blit_image:caml_gr_blit_image,
     caml_gr_sigio_handler:caml_gr_sigio_handler,
     caml_gr_sigio_signal:caml_gr_sigio_signal,
     caml_gr_wait_event:caml_gr_wait_event,
     caml_gr_synchronize:caml_gr_synchronize,
     caml_gr_remember_mode:caml_gr_remember_mode,
     caml_gr_display_mode:caml_gr_display_mode,
     caml_gr_window_id:caml_gr_window_id,
     caml_gr_open_subwindow:caml_gr_open_subwindow,
     caml_gr_close_subwindow:caml_gr_close_subwindow,
     caml_gc_minor:caml_gc_minor,
     caml_gc_major:caml_gc_major,
     caml_gc_full_major:caml_gc_full_major,
     caml_gc_compaction:caml_gc_compaction,
     caml_gc_counters:caml_gc_counters,
     caml_gc_quick_stat:caml_gc_quick_stat,
     caml_gc_stat:caml_gc_stat,
     caml_gc_set:caml_gc_set,
     caml_gc_get:caml_gc_get,
     caml_memprof_set:caml_memprof_set,
     caml_final_register:caml_final_register,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_release:caml_final_release,
     caml_memprof_start:caml_memprof_start,
     caml_memprof_stop:caml_memprof_stop,
     caml_eventlog_resume:caml_eventlog_resume,
     caml_eventlog_pause:caml_eventlog_pause,
     caml_gc_huge_fallback_count:caml_gc_huge_fallback_count,
     caml_gc_major_slice:caml_gc_major_slice,
     caml_gc_minor_words:caml_gc_minor_words,
     caml_get_minor_free:caml_get_minor_free,
     caml_get_major_bucket:caml_get_major_bucket,
     caml_get_major_credit:caml_get_major_credit,
     fs_node_supported:fs_node_supported,
     MlNodeDevice:MlNodeDevice,
     MlNodeFile:MlNodeFile,
     MlFakeDevice:MlFakeDevice,
     MlFakeFile:MlFakeFile,
     caml_trailing_slash:caml_trailing_slash,
     caml_current_dir:caml_current_dir,
     caml_get_root:caml_get_root,
     caml_root:caml_root,
     MlFile:MlFile,
     path_is_absolute:path_is_absolute,
     caml_make_path:caml_make_path,
     jsoo_mount_point:jsoo_mount_point,
     caml_list_mount_point:caml_list_mount_point,
     resolve_fs_device:resolve_fs_device,
     caml_mount_autoload:caml_mount_autoload,
     caml_unmount:caml_unmount,
     caml_sys_getcwd:caml_sys_getcwd,
     caml_sys_chdir:caml_sys_chdir,
     caml_raise_no_such_file:caml_raise_no_such_file,
     caml_raise_not_a_dir:caml_raise_not_a_dir,
     caml_sys_file_exists:caml_sys_file_exists,
     caml_sys_read_directory:caml_sys_read_directory,
     caml_sys_remove:caml_sys_remove,
     caml_sys_is_directory:caml_sys_is_directory,
     caml_sys_rename:caml_sys_rename,
     caml_sys_mkdir:caml_sys_mkdir,
     caml_sys_rmdir:caml_sys_rmdir,
     caml_ba_map_file:caml_ba_map_file,
     caml_ba_map_file_bytecode:caml_ba_map_file_bytecode,
     jsoo_create_file_extern:jsoo_create_file_extern,
     caml_fs_init:caml_fs_init,
     caml_create_file:caml_create_file,
     jsoo_create_file:jsoo_create_file,
     caml_read_file_content:caml_read_file_content,
     caml_parse_format:caml_parse_format,
     caml_finish_formatting:caml_finish_formatting,
     caml_raise_constant:caml_raise_constant,
     caml_return_exn_constant:caml_return_exn_constant,
     caml_raise_with_arg:caml_raise_with_arg,
     caml_raise_with_args:caml_raise_with_args,
     caml_raise_with_string:caml_raise_with_string,
     caml_failwith:caml_failwith,
     caml_invalid_argument:caml_invalid_argument,
     caml_raise_end_of_file:caml_raise_end_of_file,
     caml_raise_zero_divide:caml_raise_zero_divide,
     caml_raise_not_found:caml_raise_not_found,
     caml_array_bound_error:caml_array_bound_error,
     caml_compare_val_tag:caml_compare_val_tag,
     caml_compare_val_get_custom:caml_compare_val_get_custom,
     caml_compare_val_number_custom:caml_compare_val_number_custom,
     caml_compare_val:caml_compare_val,
     caml_compare:caml_compare,
     caml_int_compare:caml_int_compare,
     caml_equal:caml_equal,
     caml_notequal:caml_notequal,
     caml_greaterequal:caml_greaterequal,
     caml_greaterthan:caml_greaterthan,
     caml_lessequal:caml_lessequal,
     caml_lessthan:caml_lessthan,
     caml_blit_bigstring_to_bigstring:caml_blit_bigstring_to_bigstring,
     caml_blit_bigstring_to_string:caml_blit_bigstring_to_string,
     caml_blit_string_to_bigstring:caml_blit_string_to_bigstring,
     caml_hash_mix_bigstring:caml_hash_mix_bigstring,
     bigstring_to_array_buffer:bigstring_to_array_buffer,
     bigstring_to_typed_array:bigstring_to_typed_array,
     bigstring_of_array_buffer:bigstring_of_array_buffer,
     bigstring_of_typed_array:bigstring_of_typed_array,
     caml_bigstring_memcmp:caml_bigstring_memcmp,
     caml_bigstring_blit_ba_to_ba:caml_bigstring_blit_ba_to_ba,
     caml_bigstring_blit_string_to_ba:caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_bytes_to_ba:caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_ba_to_bytes:caml_bigstring_blit_ba_to_bytes,
     caml_ba_init:caml_ba_init,
     caml_ba_get_size:caml_ba_get_size,
     caml_ba_get_size_per_element:caml_ba_get_size_per_element,
     caml_ba_create_buffer:caml_ba_create_buffer,
     caml_ba_custom_name:caml_ba_custom_name,
     Ml_Bigarray:Ml_Bigarray,
     Ml_Bigarray_c_1_1:Ml_Bigarray_c_1_1,
     caml_ba_compare:caml_ba_compare,
     caml_ba_create_unsafe:caml_ba_create_unsafe,
     caml_ba_create:caml_ba_create,
     caml_ba_change_layout:caml_ba_change_layout,
     caml_ba_kind:caml_ba_kind,
     caml_ba_layout:caml_ba_layout,
     caml_ba_num_dims:caml_ba_num_dims,
     caml_ba_dim:caml_ba_dim,
     caml_ba_dim_1:caml_ba_dim_1,
     caml_ba_dim_2:caml_ba_dim_2,
     caml_ba_dim_3:caml_ba_dim_3,
     caml_ba_get_generic:caml_ba_get_generic,
     caml_ba_uint8_get16:caml_ba_uint8_get16,
     caml_ba_uint8_get32:caml_ba_uint8_get32,
     caml_ba_uint8_get64:caml_ba_uint8_get64,
     caml_ba_get_1:caml_ba_get_1,
     caml_ba_get_2:caml_ba_get_2,
     caml_ba_get_3:caml_ba_get_3,
     caml_ba_set_generic:caml_ba_set_generic,
     caml_ba_uint8_set16:caml_ba_uint8_set16,
     caml_ba_uint8_set32:caml_ba_uint8_set32,
     caml_ba_uint8_set64:caml_ba_uint8_set64,
     caml_ba_set_1:caml_ba_set_1,
     caml_ba_set_2:caml_ba_set_2,
     caml_ba_set_3:caml_ba_set_3,
     caml_ba_fill:caml_ba_fill,
     caml_ba_blit:caml_ba_blit,
     caml_ba_sub:caml_ba_sub,
     caml_ba_slice:caml_ba_slice,
     caml_ba_reshape:caml_ba_reshape,
     caml_ba_serialize:caml_ba_serialize,
     caml_ba_deserialize:caml_ba_deserialize,
     caml_ba_create_from:caml_ba_create_from,
     caml_ba_hash:caml_ba_hash,
     caml_ba_to_typed_array:caml_ba_to_typed_array,
     caml_ba_kind_of_typed_array:caml_ba_kind_of_typed_array,
     caml_ba_from_typed_array:caml_ba_from_typed_array,
     caml_ml_debug_info_status:caml_ml_debug_info_status,
     caml_backtrace_status:caml_backtrace_status,
     caml_get_exception_backtrace:caml_get_exception_backtrace,
     caml_get_exception_raw_backtrace:caml_get_exception_raw_backtrace,
     caml_record_backtrace:caml_record_backtrace,
     caml_convert_raw_backtrace:caml_convert_raw_backtrace,
     caml_raw_backtrace_length:caml_raw_backtrace_length,
     caml_raw_backtrace_next_slot:caml_raw_backtrace_next_slot,
     caml_raw_backtrace_slot:caml_raw_backtrace_slot,
     caml_restore_raw_backtrace:caml_restore_raw_backtrace,
     caml_get_current_callstack:caml_get_current_callstack,
     caml_convert_raw_backtrace_slot:caml_convert_raw_backtrace_slot,
     caml_array_sub:caml_array_sub,
     caml_array_append:caml_array_append,
     caml_array_concat:caml_array_concat,
     caml_array_blit:caml_array_blit,
     caml_floatarray_blit:caml_floatarray_blit,
     caml_array_set:caml_array_set,
     caml_array_get:caml_array_get,
     caml_array_fill:caml_array_fill,
     caml_check_bound:caml_check_bound,
     caml_make_vect:caml_make_vect,
     caml_make_float_vect:caml_make_float_vect,
     caml_floatarray_create:caml_floatarray_create};
    caml_fs_init();
    caml_register_global
     (0,[248,caml_string_of_jsbytes("Out_of_memory"),-1],"Out_of_memory");
    caml_register_global
     (1,[248,caml_string_of_jsbytes("Sys_error"),-2],"Sys_error");
    caml_register_global
     (2,[248,caml_string_of_jsbytes("Failure"),-3],"Failure");
    caml_register_global
     (3,
      [248,caml_string_of_jsbytes("Invalid_argument"),-4],
      "Invalid_argument");
    caml_register_global
     (4,[248,caml_string_of_jsbytes("End_of_file"),-5],"End_of_file");
    caml_register_global
     (5,
      [248,caml_string_of_jsbytes("Division_by_zero"),-6],
      "Division_by_zero");
    caml_register_global
     (6,[248,caml_string_of_jsbytes("Not_found"),-7],"Not_found");
    caml_register_global
     (7,[248,caml_string_of_jsbytes("Match_failure"),-8],"Match_failure");
    caml_register_global
     (8,[248,caml_string_of_jsbytes("Stack_overflow"),-9],"Stack_overflow");
    caml_register_global
     (9,[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],"Sys_blocked_io");
    caml_register_global
     (10,[248,caml_string_of_jsbytes("Assert_failure"),-11],"Assert_failure");
    caml_register_global
     (11,
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
      "Undefined_recursive_module");
    return}
  (globalThis));


//# 1 "../../.js/stdlib/stdlib.cma.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_get=runtime.caml_array_get,
     caml_array_set=runtime.caml_array_set,
     caml_array_sub=runtime.caml_array_sub,
     caml_ba_change_layout=runtime.caml_ba_change_layout,
     caml_ba_create=runtime.caml_ba_create,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_dim_2=runtime.caml_ba_dim_2,
     caml_ba_kind=runtime.caml_ba_kind,
     caml_ba_num_dims=runtime.caml_ba_num_dims,
     caml_ba_reshape=runtime.caml_ba_reshape,
     caml_ba_set_1=runtime.caml_ba_set_1,
     caml_ba_set_2=runtime.caml_ba_set_2,
     caml_ba_set_3=runtime.caml_ba_set_3,
     caml_ba_set_generic=runtime.caml_ba_set_generic,
     caml_ba_slice=runtime.caml_ba_slice,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_blit_string=runtime.caml_blit_string,
     caml_bswap16=runtime.caml_bswap16,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_get16=runtime.caml_bytes_get16,
     caml_bytes_get32=runtime.caml_bytes_get32,
     caml_bytes_get64=runtime.caml_bytes_get64,
     caml_bytes_of_string=runtime.caml_bytes_of_string,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_set16=runtime.caml_bytes_set16,
     caml_bytes_set32=runtime.caml_bytes_set32,
     caml_bytes_set64=runtime.caml_bytes_set64,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_div=runtime.caml_div,
     caml_ephe_set_key=runtime.caml_ephe_set_key,
     caml_ephe_unset_key=runtime.caml_ephe_unset_key,
     caml_equal=runtime.caml_equal,
     caml_fill_bytes=runtime.caml_fill_bytes,
     caml_float_compare=runtime.caml_float_compare,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_floatarray_blit=runtime.caml_floatarray_blit,
     caml_floatarray_create=runtime.caml_floatarray_create,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_get_exception_raw_backtra=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_int64_compare=runtime.caml_int64_compare,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_mul=runtime.caml_int64_mul,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_of_string=runtime.caml_int64_of_string,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_shift_right_unsigne=runtime.caml_int64_shift_right_unsigned,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_bytes=runtime.caml_ml_output_bytes,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_pos_in=runtime.caml_ml_pos_in,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_set_channel_name=runtime.caml_ml_set_channel_name,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_nextafter_float=runtime.caml_nextafter_float,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_make_forward=runtime.caml_obj_make_forward,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_restore_raw_backtrace=runtime.caml_restore_raw_backtrace,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_signbit_float=runtime.caml_signbit_float,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_bytes=runtime.caml_string_of_bytes,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes("%,"),
     cst_really_input=caml_string_of_jsbytes("really_input"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_output_substring=caml_string_of_jsbytes("output_substring"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst=caml_string_of_jsbytes("."),
     cst_false$1=caml_string_of_jsbytes("false"),
     cst_true$1=caml_string_of_jsbytes("true"),
     cst_false$0=caml_string_of_jsbytes("false"),
     cst_true$0=caml_string_of_jsbytes("true"),
     cst_bool_of_string=caml_string_of_jsbytes("bool_of_string"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_char_of_int=caml_string_of_jsbytes("char_of_int"),
     cst_Stdlib_Exit=caml_string_of_jsbytes("Stdlib.Exit"),
     cst_Stdlib_Pervasives_Exit=
      caml_string_of_jsbytes("Stdlib.Pervasives.Exit"),
     cst_Stdlib_Sys_Break=caml_string_of_jsbytes("Stdlib.Sys.Break"),
     ocaml_version=caml_string_of_jsbytes("4.14.0"),
     ocaml_release=[0,4,14,0,0],
     cst_Obj_Ephemeron_blit_key=
      caml_string_of_jsbytes("Obj.Ephemeron.blit_key"),
     cst_Obj_Ephemeron_check_key=
      caml_string_of_jsbytes("Obj.Ephemeron.check_key"),
     cst_Obj_Ephemeron_unset_key=
      caml_string_of_jsbytes("Obj.Ephemeron.unset_key"),
     cst_Obj_Ephemeron_set_key=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
     cst_Obj_Ephemeron_get_key_copy=
      caml_string_of_jsbytes("Obj.Ephemeron.get_key_copy"),
     cst_Obj_Ephemeron_get_key=caml_string_of_jsbytes("Obj.Ephemeron.get_key"),
     cst_Obj_Ephemeron_create=caml_string_of_jsbytes("Obj.Ephemeron.create"),
     cst_Obj_extension_constructor$0=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Obj_extension_constructor=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_CamlinternalLazy_Undefined=
      caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     cst_Seq_drop=caml_string_of_jsbytes("Seq.drop"),
     cst_Seq_take=caml_string_of_jsbytes("Seq.take"),
     cst_Seq_init=caml_string_of_jsbytes("Seq.init"),
     cst_Stdlib_Seq_Forced_twice=
      caml_string_of_jsbytes("Stdlib.Seq.Forced_twice"),
     cst_option_is_None=caml_string_of_jsbytes("option is None"),
     cst_result_is_Ok=caml_string_of_jsbytes("result is Ok _"),
     cst_result_is_Error=caml_string_of_jsbytes("result is Error _"),
     cst_true$2=caml_string_of_jsbytes("true"),
     cst_false$2=caml_string_of_jsbytes("false"),
     cst$1=caml_string_of_jsbytes("\\\\"),
     cst$2=caml_string_of_jsbytes("\\'"),
     cst_b=caml_string_of_jsbytes("\\b"),
     cst_t=caml_string_of_jsbytes("\\t"),
     cst_n=caml_string_of_jsbytes("\\n"),
     cst_r=caml_string_of_jsbytes("\\r"),
     cst_Char_chr=caml_string_of_jsbytes("Char.chr"),
     cst_is_not_a_latin1_character=
      caml_string_of_jsbytes(" is not a latin1 character"),
     cst_04X=caml_string_of_jsbytes("%04X"),
     cst_U=caml_string_of_jsbytes("U+"),
     cst_is_not_an_Unicode_scalar_v=
      caml_string_of_jsbytes(" is not an Unicode scalar value"),
     cst_X=caml_string_of_jsbytes("%X"),
     err_no_pred=caml_string_of_jsbytes("U+0000 has no predecessor"),
     err_no_succ=caml_string_of_jsbytes("U+10FFFF has no successor"),
     cst_List_map2=caml_string_of_jsbytes("List.map2"),
     cst_List_iter2=caml_string_of_jsbytes("List.iter2"),
     cst_List_fold_left2=caml_string_of_jsbytes("List.fold_left2"),
     cst_List_fold_right2=caml_string_of_jsbytes("List.fold_right2"),
     cst_List_for_all2=caml_string_of_jsbytes("List.for_all2"),
     cst_List_exists2=caml_string_of_jsbytes("List.exists2"),
     cst_List_combine=caml_string_of_jsbytes("List.combine"),
     cst_List_rev_map2=caml_string_of_jsbytes("List.rev_map2"),
     cst_List_init=caml_string_of_jsbytes("List.init"),
     cst_List_nth$0=caml_string_of_jsbytes("List.nth"),
     cst_nth=caml_string_of_jsbytes("nth"),
     cst_List_nth=caml_string_of_jsbytes("List.nth"),
     cst_tl=caml_string_of_jsbytes("tl"),
     cst_hd=caml_string_of_jsbytes("hd"),
     cst_index_out_of_bounds$2=caml_string_of_jsbytes("index out of bounds"),
     cst_index_out_of_bounds$1=caml_string_of_jsbytes("index out of bounds"),
     cst_index_out_of_bounds$0=caml_string_of_jsbytes("index out of bounds"),
     cst_index_out_of_bounds=caml_string_of_jsbytes("index out of bounds"),
     cst_Bytes_of_seq_cannot_grow_b=
      caml_string_of_jsbytes("Bytes.of_seq: cannot grow bytes"),
     cst_String_rcontains_from_Byte=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst_Bytes_concat=caml_string_of_jsbytes("Bytes.concat"),
     cst_String_blit_Bytes_blit_str=
      caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_string_of_jsbytes("Bytes.blit"),
     cst_String_fill_Bytes_fill=
      caml_string_of_jsbytes("String.fill / Bytes.fill"),
     cst_Bytes_extend=caml_string_of_jsbytes("Bytes.extend"),
     cst_String_sub_Bytes_sub=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     cst_String_rcontains_from_Byte$0=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes$0=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt$0=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r$0=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte$0=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in$0=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_String_concat=caml_string_of_jsbytes("String.concat"),
     empty$1=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes("()"),
     cst_Marshal_from_bytes=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_string_of_jsbytes("Marshal.data_size"),
     cst_Marshal_to_buffer_substrin=
      caml_string_of_jsbytes("Marshal.to_buffer: substring out of bounds"),
     cst_Array_combine=caml_string_of_jsbytes("Array.combine"),
     cst_Array_exists2=caml_string_of_jsbytes("Array.exists2"),
     cst_Array_for_all2=caml_string_of_jsbytes("Array.for_all2"),
     cst_Array_map2_arrays_must_hav=
      caml_string_of_jsbytes("Array.map2: arrays must have the same length"),
     cst_Array_iter2_arrays_must_ha=
      caml_string_of_jsbytes("Array.iter2: arrays must have the same length"),
     cst_Array_blit=caml_string_of_jsbytes("Array.blit"),
     cst_Array_fill=caml_string_of_jsbytes("Array.fill"),
     cst_Array_sub=caml_string_of_jsbytes("Array.sub"),
     cst_Array_init=caml_string_of_jsbytes("Array.init"),
     cst_Stdlib_Array_Bottom=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
     cst_Float_Array_map2_arrays_mu=
      caml_string_of_jsbytes
       ("Float.Array.map2: arrays must have the same length"),
     cst_Float_Array_iter2_arrays_m=
      caml_string_of_jsbytes
       ("Float.Array.iter2: arrays must have the same length"),
     cst_Float_array_blit=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_array_blit$0=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_Array_fill=caml_string_of_jsbytes("Float.Array.fill"),
     cst_Float_Array_sub=caml_string_of_jsbytes("Float.Array.sub"),
     cst_Float_Array_concat=caml_string_of_jsbytes("Float.Array.concat"),
     cst_Float_Array_init=caml_string_of_jsbytes("Float.Array.init"),
     cst_Stdlib_Float_Array_Bottom=
      caml_string_of_jsbytes("Stdlib.Float.Array.Bottom"),
     cst_d=caml_string_of_jsbytes("%d"),
     cst_d$0=caml_string_of_jsbytes("%d"),
     zero$2=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     one$2=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     minus_one$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     min_int$2=runtime.caml_int64_create_lo_mi_hi(0,0,32768),
     max_int$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32767),
     cst_d$1=caml_string_of_jsbytes("%d"),
     cst_Lexing_lex_refill_cannot_g=
      caml_string_of_jsbytes("Lexing.lex_refill: cannot grow buffer"),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     cst_syntax_error=caml_string_of_jsbytes("syntax error"),
     cst_Stdlib_Parsing_YYexit=caml_string_of_jsbytes("Stdlib.Parsing.YYexit"),
     cst_Stdlib_Parsing_Parse_error=
      caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_string_of_jsbytes("Set.remove_min_elt"),
     cst_Set_bal=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$0=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$1=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$2=caml_string_of_jsbytes("Set.bal"),
     cst_Map_remove_min_elt=caml_string_of_jsbytes("Map.remove_min_elt"),
     cst_Map_bal=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$0=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$1=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$2=caml_string_of_jsbytes("Map.bal"),
     cst_Stdlib_Stack_Empty=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     cst_Stdlib_Queue_Empty=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     cst_count=caml_string_of_jsbytes("{count = "),
     cst_data=caml_string_of_jsbytes("; data = "),
     cst$6=caml_string_of_jsbytes("}"),
     cst_Sempty=caml_string_of_jsbytes("Sempty"),
     cst_Scons=caml_string_of_jsbytes("Scons ("),
     cst$7=caml_string_of_jsbytes(", "),
     cst$8=caml_string_of_jsbytes(")"),
     cst_Sapp=caml_string_of_jsbytes("Sapp ("),
     cst$9=caml_string_of_jsbytes(", "),
     cst$10=caml_string_of_jsbytes(")"),
     cst_Slazy=caml_string_of_jsbytes("Slazy"),
     cst_Sgen=caml_string_of_jsbytes("Sgen"),
     cst_Sbuffio=caml_string_of_jsbytes("Sbuffio"),
     cst_Stdlib_Stream_Failure=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
     cst_Stdlib_Stream_Error=caml_string_of_jsbytes("Stdlib.Stream.Error"),
     cst_Buffer_truncate=caml_string_of_jsbytes("Buffer.truncate"),
     cst_Buffer_add_channel=caml_string_of_jsbytes("Buffer.add_channel"),
     cst_Buffer_add_substring_add_s=
      caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buf=
      caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_string_of_jsbytes("Buffer.nth"),
     cst_Buffer_blit=caml_string_of_jsbytes("Buffer.blit"),
     cst_Buffer_sub=caml_string_of_jsbytes("Buffer.sub"),
     cst_c=caml_string_of_jsbytes("%c"),
     cst_s=caml_string_of_jsbytes("%s"),
     cst_i=caml_string_of_jsbytes("%i"),
     cst_li=caml_string_of_jsbytes("%li"),
     cst_ni=caml_string_of_jsbytes("%ni"),
     cst_Li=caml_string_of_jsbytes("%Li"),
     cst_f=caml_string_of_jsbytes("%f"),
     cst_B=caml_string_of_jsbytes("%B"),
     cst$21=caml_string_of_jsbytes("%{"),
     cst$22=caml_string_of_jsbytes("%}"),
     cst$23=caml_string_of_jsbytes("%("),
     cst$24=caml_string_of_jsbytes("%)"),
     cst_a=caml_string_of_jsbytes("%a"),
     cst_t$0=caml_string_of_jsbytes("%t"),
     cst$25=caml_string_of_jsbytes("%?"),
     cst_r$0=caml_string_of_jsbytes("%r"),
     cst_r$1=caml_string_of_jsbytes("%_r"),
     cst_u$0=caml_string_of_jsbytes("%u"),
     cst_Printf_bad_conversion=
      caml_string_of_jsbytes("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=
      caml_string_of_jsbytes("Printf: bad conversion %_"),
     cst$30=caml_string_of_jsbytes("@{"),
     cst$31=caml_string_of_jsbytes("@["),
     cst$32=caml_string_of_jsbytes("@{"),
     cst$33=caml_string_of_jsbytes("@["),
     cst$34=caml_string_of_jsbytes("@{"),
     cst$35=caml_string_of_jsbytes("@["),
     cst_0=caml_string_of_jsbytes("0"),
     cst_padding=caml_string_of_jsbytes("padding"),
     cst_precision=caml_string_of_jsbytes("precision"),
     cst$40=caml_string_of_jsbytes("'*'"),
     cst$38=caml_string_of_jsbytes("'-'"),
     cst_0$2=caml_string_of_jsbytes("'0'"),
     cst$39=caml_string_of_jsbytes("'*'"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_0$1=caml_string_of_jsbytes("0"),
     cst_precision$0=caml_string_of_jsbytes("precision"),
     cst_precision$1=caml_string_of_jsbytes("precision"),
     cst$41=caml_string_of_jsbytes("'+'"),
     cst$42=caml_string_of_jsbytes("'#'"),
     cst$43=caml_string_of_jsbytes("' '"),
     cst_padding$0=caml_string_of_jsbytes("`padding'"),
     cst_precision$2=caml_string_of_jsbytes("`precision'"),
     cst$44=caml_string_of_jsbytes("'+'"),
     cst$45=caml_string_of_jsbytes("'_'"),
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     cst_digit=caml_string_of_jsbytes("digit"),
     cst_character=caml_string_of_jsbytes("character ')'"),
     cst_character$0=caml_string_of_jsbytes("character '}'"),
     cst$49=caml_string_of_jsbytes("'#'"),
     cst$46=caml_string_of_jsbytes("'+'"),
     cst$47=caml_string_of_jsbytes("'+'"),
     cst$48=caml_string_of_jsbytes("' '"),
     cst$50=caml_string_of_jsbytes("'+'"),
     cst_non_zero_widths_are_unsupp=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=
      caml_string_of_jsbytes("unexpected end of format"),
     cst$36=caml_string_of_jsbytes(""),
     cst$37=caml_string_of_jsbytes(""),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_hov=caml_string_of_jsbytes("hov"),
     cst_hv=caml_string_of_jsbytes("hv"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst_neg_infinity=caml_string_of_jsbytes("neg_infinity"),
     cst_infinity=caml_string_of_jsbytes("infinity"),
     cst$29=caml_string_of_jsbytes("."),
     cst_nd$0=caml_string_of_jsbytes("%+nd"),
     cst_nd$1=caml_string_of_jsbytes("% nd"),
     cst_ni$1=caml_string_of_jsbytes("%+ni"),
     cst_ni$2=caml_string_of_jsbytes("% ni"),
     cst_nx=caml_string_of_jsbytes("%nx"),
     cst_nx$0=caml_string_of_jsbytes("%#nx"),
     cst_nX=caml_string_of_jsbytes("%nX"),
     cst_nX$0=caml_string_of_jsbytes("%#nX"),
     cst_no=caml_string_of_jsbytes("%no"),
     cst_no$0=caml_string_of_jsbytes("%#no"),
     cst_nd=caml_string_of_jsbytes("%nd"),
     cst_ni$0=caml_string_of_jsbytes("%ni"),
     cst_nu=caml_string_of_jsbytes("%nu"),
     cst_ld$0=caml_string_of_jsbytes("%+ld"),
     cst_ld$1=caml_string_of_jsbytes("% ld"),
     cst_li$1=caml_string_of_jsbytes("%+li"),
     cst_li$2=caml_string_of_jsbytes("% li"),
     cst_lx=caml_string_of_jsbytes("%lx"),
     cst_lx$0=caml_string_of_jsbytes("%#lx"),
     cst_lX=caml_string_of_jsbytes("%lX"),
     cst_lX$0=caml_string_of_jsbytes("%#lX"),
     cst_lo=caml_string_of_jsbytes("%lo"),
     cst_lo$0=caml_string_of_jsbytes("%#lo"),
     cst_ld=caml_string_of_jsbytes("%ld"),
     cst_li$0=caml_string_of_jsbytes("%li"),
     cst_lu=caml_string_of_jsbytes("%lu"),
     cst_Ld$0=caml_string_of_jsbytes("%+Ld"),
     cst_Ld$1=caml_string_of_jsbytes("% Ld"),
     cst_Li$1=caml_string_of_jsbytes("%+Li"),
     cst_Li$2=caml_string_of_jsbytes("% Li"),
     cst_Lx=caml_string_of_jsbytes("%Lx"),
     cst_Lx$0=caml_string_of_jsbytes("%#Lx"),
     cst_LX=caml_string_of_jsbytes("%LX"),
     cst_LX$0=caml_string_of_jsbytes("%#LX"),
     cst_Lo=caml_string_of_jsbytes("%Lo"),
     cst_Lo$0=caml_string_of_jsbytes("%#Lo"),
     cst_Ld=caml_string_of_jsbytes("%Ld"),
     cst_Li$0=caml_string_of_jsbytes("%Li"),
     cst_Lu=caml_string_of_jsbytes("%Lu"),
     cst_d$3=caml_string_of_jsbytes("%+d"),
     cst_d$4=caml_string_of_jsbytes("% d"),
     cst_i$1=caml_string_of_jsbytes("%+i"),
     cst_i$2=caml_string_of_jsbytes("% i"),
     cst_x=caml_string_of_jsbytes("%x"),
     cst_x$0=caml_string_of_jsbytes("%#x"),
     cst_X$0=caml_string_of_jsbytes("%X"),
     cst_X$1=caml_string_of_jsbytes("%#X"),
     cst_o=caml_string_of_jsbytes("%o"),
     cst_o$0=caml_string_of_jsbytes("%#o"),
     cst_d$2=caml_string_of_jsbytes("%d"),
     cst_i$0=caml_string_of_jsbytes("%i"),
     cst_u=caml_string_of_jsbytes("%u"),
     cst$26=caml_string_of_jsbytes("%!"),
     cst$27=caml_string_of_jsbytes("@{"),
     cst$28=caml_string_of_jsbytes("@["),
     cst_0c=caml_string_of_jsbytes("0c"),
     cst$20=caml_string_of_jsbytes("%%"),
     cst$12=caml_string_of_jsbytes("@]"),
     cst$13=caml_string_of_jsbytes("@}"),
     cst$14=caml_string_of_jsbytes("@?"),
     cst$15=caml_string_of_jsbytes("@\n"),
     cst$16=caml_string_of_jsbytes("@."),
     cst$17=caml_string_of_jsbytes("@@"),
     cst$18=caml_string_of_jsbytes("@%"),
     cst$19=caml_string_of_jsbytes("@"),
     cst$11=caml_string_of_jsbytes(".*"),
     cst_CamlinternalFormat_Type_mi=
      caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     cst$58=caml_string_of_jsbytes(""),
     cst$59=caml_string_of_jsbytes("\n"),
     cst_a_boolean=caml_string_of_jsbytes("a boolean"),
     cst_an_integer=caml_string_of_jsbytes("an integer"),
     cst_an_integer$0=caml_string_of_jsbytes("an integer"),
     cst_a_float=caml_string_of_jsbytes("a float"),
     cst_a_float$0=caml_string_of_jsbytes("a float"),
     cst$55=caml_string_of_jsbytes(""),
     cst$56=caml_string_of_jsbytes(" "),
     cst$57=caml_string_of_jsbytes(""),
     cst_one_of=caml_string_of_jsbytes("one of: "),
     cst_Arg_Expand_is_is_only_allo=
      caml_string_of_jsbytes
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     cst_no_argument=caml_string_of_jsbytes("no argument"),
     cst$54=caml_string_of_jsbytes("(?)"),
     cst_help$3=caml_string_of_jsbytes("--help"),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst_help$2=caml_string_of_jsbytes("-help"),
     cst_Display_this_list_of_optio=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help=caml_string_of_jsbytes("-help"),
     cst_help$1=caml_string_of_jsbytes("--help"),
     cst_Display_this_list_of_optio$0=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help$0=caml_string_of_jsbytes("--help"),
     cst$51=caml_string_of_jsbytes("}"),
     cst$52=caml_string_of_jsbytes("|"),
     cst$53=caml_string_of_jsbytes("{"),
     cst_none=caml_string_of_jsbytes("<none>"),
     cst_Stdlib_Arg_Bad=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
     cst_Stdlib_Arg_Help=caml_string_of_jsbytes("Stdlib.Arg.Help"),
     cst_Stdlib_Arg_Stop=caml_string_of_jsbytes("Stdlib.Arg.Stop"),
     cst$61=caml_string_of_jsbytes(""),
     cst_Fatal_error_out_of_memory_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     cst$65=caml_string_of_jsbytes(""),
     cst_Program_not_linked_with_g_=
      caml_string_of_jsbytes
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_string_of_jsbytes("Raised at"),
     cst_Re_raised_at=caml_string_of_jsbytes("Re-raised at"),
     cst_Raised_by_primitive_operat=
      caml_string_of_jsbytes("Raised by primitive operation at"),
     cst_Called_from=caml_string_of_jsbytes("Called from"),
     cst_inlined=caml_string_of_jsbytes(" (inlined)"),
     cst$64=caml_string_of_jsbytes(""),
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     cst_Out_of_memory=caml_string_of_jsbytes("Out of memory"),
     cst_Stack_overflow=caml_string_of_jsbytes("Stack overflow"),
     cst_Pattern_matching_failed=
      caml_string_of_jsbytes("Pattern matching failed"),
     cst_Assertion_failed=caml_string_of_jsbytes("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_string_of_jsbytes("Undefined recursive module"),
     cst$62=caml_string_of_jsbytes(""),
     cst$63=caml_string_of_jsbytes(""),
     cst$60=caml_string_of_jsbytes("_"),
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     cst_Fun_Finally_raised=caml_string_of_jsbytes("Fun.Finally_raised: "),
     cst_Stdlib_Fun_Finally_raised=
      caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     cst_Digest_from_hex$0=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_from_hex=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_to_hex=caml_string_of_jsbytes("Digest.to_hex"),
     cst_Digest_substring=caml_string_of_jsbytes("Digest.substring"),
     cst_Random_int64=caml_string_of_jsbytes("Random.int64"),
     cst_Random_int32=caml_string_of_jsbytes("Random.int32"),
     cst_Random_full_int=caml_string_of_jsbytes("Random.full_int"),
     cst_Random_int=caml_string_of_jsbytes("Random.int"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst_Hashtbl_unsupported_hash_t=
      caml_string_of_jsbytes("Hashtbl: unsupported hash table format"),
     cst_OCAMLRUNPARAM=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_string_of_jsbytes("CAMLRUNPARAM"),
     cst$66=caml_string_of_jsbytes(""),
     cst_Weak_Make_hash_bucket_cann=
      caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_string_of_jsbytes("Weak.fill"),
     cst_Weak_blit=caml_string_of_jsbytes("Weak.blit"),
     cst_Weak_check=caml_string_of_jsbytes("Weak.check"),
     cst_Weak_get_copy=caml_string_of_jsbytes("Weak.get_copy"),
     cst_Weak_get=caml_string_of_jsbytes("Weak.get"),
     cst_Weak_set=caml_string_of_jsbytes("Weak.set"),
     cst_Weak_create=caml_string_of_jsbytes("Weak.create"),
     cst$84=caml_string_of_jsbytes(""),
     cst$85=caml_string_of_jsbytes(""),
     cst$83=caml_string_of_jsbytes("."),
     cst$80=caml_string_of_jsbytes(">"),
     cst$81=caml_string_of_jsbytes("<\/"),
     cst$82=caml_string_of_jsbytes(""),
     cst$77=caml_string_of_jsbytes(">"),
     cst$78=caml_string_of_jsbytes("<"),
     cst$79=caml_string_of_jsbytes(""),
     cst$76=caml_string_of_jsbytes("\n"),
     cst_Format_pp_set_geometry=
      caml_string_of_jsbytes("Format.pp_set_geometry: "),
     cst$72=caml_string_of_jsbytes(""),
     cst$73=caml_string_of_jsbytes(""),
     cst$74=caml_string_of_jsbytes(""),
     cst$75=caml_string_of_jsbytes(""),
     cst$68=caml_string_of_jsbytes(""),
     cst$69=caml_string_of_jsbytes(""),
     cst$70=caml_string_of_jsbytes(""),
     cst$71=caml_string_of_jsbytes(""),
     cst$67=caml_string_of_jsbytes(""),
     cst_Stdlib_Format_String_tag=
      caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     cst_end_of_input_not_found=
      caml_string_of_jsbytes("end of input not found"),
     cst_scanf_bad_conversion_a=
      caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=
      caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     cst_scanf_missing_reader=caml_string_of_jsbytes("scanf: missing reader"),
     cst_scanf_bad_conversion_custo=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=
      caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst$91=caml_string_of_jsbytes('"'),
     cst$92=caml_string_of_jsbytes('"'),
     cst$89=caml_string_of_jsbytes('"'),
     cst$90=caml_string_of_jsbytes('"'),
     cst$88=caml_string_of_jsbytes('"'),
     cst_in_format=caml_string_of_jsbytes(' in format "'),
     cst_an=caml_string_of_jsbytes("an"),
     cst_x$2=caml_string_of_jsbytes("x"),
     cst_nfinity=caml_string_of_jsbytes("nfinity"),
     cst_digits=caml_string_of_jsbytes("digits"),
     cst_decimal_digits=caml_string_of_jsbytes("decimal digits"),
     cst_0b=caml_string_of_jsbytes("0b"),
     cst_0o=caml_string_of_jsbytes("0o"),
     cst_0u=caml_string_of_jsbytes("0u"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_false$3=caml_string_of_jsbytes("false"),
     cst_true$3=caml_string_of_jsbytes("true"),
     cst_not_a_valid_float_in_hexad=
      caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     cst_no_dot_or_exponent_part_fo=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     cst$87=caml_string_of_jsbytes("-"),
     cst_unnamed_function=caml_string_of_jsbytes("unnamed function"),
     cst_unnamed_character_string=
      caml_string_of_jsbytes("unnamed character string"),
     cst_unnamed_Stdlib_input_chann=
      caml_string_of_jsbytes("unnamed Stdlib input channel"),
     cst$86=caml_string_of_jsbytes("-"),
     cst_Stdlib_Scanf_Scan_failure=
      caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     cst_binary=caml_string_of_jsbytes("binary"),
     cst_octal=caml_string_of_jsbytes("octal"),
     cst_hexadecimal=caml_string_of_jsbytes("hexadecimal"),
     cst_a_Char=caml_string_of_jsbytes("a Char"),
     cst_a_String=caml_string_of_jsbytes("a String"),
     cst$93=caml_string_of_jsbytes(""),
     cst_CamlinternalMod_update_mod=
      caml_string_of_jsbytes("CamlinternalMod.update_mod: not a module"),
     cst_CamlinternalMod_init_mod_n=
      caml_string_of_jsbytes("CamlinternalMod.init_mod: not a module"),
     cst$94=caml_string_of_jsbytes(""),
     cst$95=caml_string_of_jsbytes(""),
     cst$96=caml_string_of_jsbytes(""),
     cst$97=caml_string_of_jsbytes(""),
     cst$99=caml_string_of_jsbytes(""),
     cst$98=caml_string_of_jsbytes(""),
     cst_Illegal_character=caml_string_of_jsbytes("Illegal character "),
     cst_Filename_chop_extension=
      caml_string_of_jsbytes("Filename.chop_extension"),
     cst$127=caml_string_of_jsbytes(""),
     cst_Filename_chop_suffix=caml_string_of_jsbytes("Filename.chop_suffix"),
     cst$126=caml_string_of_jsbytes(""),
     cst_2_1$0=caml_string_of_jsbytes(" 2>&1"),
     cst_2$0=caml_string_of_jsbytes(" 2>"),
     cst$125=caml_string_of_jsbytes(""),
     cst$117=caml_string_of_jsbytes(" >"),
     cst$124=caml_string_of_jsbytes(""),
     cst$118=caml_string_of_jsbytes(" <"),
     cst$123=caml_string_of_jsbytes(""),
     cst$119=caml_string_of_jsbytes(" "),
     cst$120=caml_string_of_jsbytes(" "),
     cst$121=caml_string_of_jsbytes('"'),
     cst$122=caml_string_of_jsbytes(""),
     cst_Filename_quote_command_bad=
      caml_string_of_jsbytes("Filename.quote_command: bad file name "),
     cst$115=caml_string_of_jsbytes('"'),
     cst$116=caml_string_of_jsbytes('"'),
     cst$113=caml_string_of_jsbytes("./"),
     cst$112=caml_string_of_jsbytes(".\\"),
     cst$111=caml_string_of_jsbytes("../"),
     cst$110=caml_string_of_jsbytes("..\\"),
     cst_2_1=caml_string_of_jsbytes(" 2>&1"),
     cst_2=caml_string_of_jsbytes(" 2>"),
     cst$109=caml_string_of_jsbytes(""),
     cst$104=caml_string_of_jsbytes(" >"),
     cst$108=caml_string_of_jsbytes(""),
     cst$105=caml_string_of_jsbytes(" <"),
     cst$107=caml_string_of_jsbytes(""),
     cst$106=caml_string_of_jsbytes(" "),
     cst$103=caml_string_of_jsbytes("./"),
     cst$102=caml_string_of_jsbytes("../"),
     cst$101=caml_string_of_jsbytes(""),
     cst$100=caml_string_of_jsbytes(""),
     null$0=caml_string_of_jsbytes("/dev/null"),
     current_dir_name=caml_string_of_jsbytes("."),
     parent_dir_name=caml_string_of_jsbytes(".."),
     dir_sep=caml_string_of_jsbytes("/"),
     cst_TMPDIR=caml_string_of_jsbytes("TMPDIR"),
     cst_tmp=caml_string_of_jsbytes("/tmp"),
     quotequote=caml_string_of_jsbytes("'\\''"),
     null$1=caml_string_of_jsbytes("NUL"),
     current_dir_name$0=caml_string_of_jsbytes("."),
     parent_dir_name$0=caml_string_of_jsbytes(".."),
     dir_sep$0=caml_string_of_jsbytes("\\"),
     cst_TEMP=caml_string_of_jsbytes("TEMP"),
     cst$114=caml_string_of_jsbytes("."),
     null$2=caml_string_of_jsbytes("/dev/null"),
     current_dir_name$1=caml_string_of_jsbytes("."),
     parent_dir_name$1=caml_string_of_jsbytes(".."),
     dir_sep$1=caml_string_of_jsbytes("/"),
     cst_Cygwin=caml_string_of_jsbytes("Cygwin"),
     cst_Win32=caml_string_of_jsbytes("Win32"),
     zero$4=[254,0.,0.],
     one$4=[254,1.,0.],
     i=[254,0.,1.],
     cst_Bigarray_array3_of_genarra=
      caml_string_of_jsbytes("Bigarray.array3_of_genarray"),
     cst_Bigarray_array2_of_genarra=
      caml_string_of_jsbytes("Bigarray.array2_of_genarray"),
     cst_Bigarray_array1_of_genarra=
      caml_string_of_jsbytes("Bigarray.array1_of_genarray"),
     cst_Bigarray_array0_of_genarra=
      caml_string_of_jsbytes("Bigarray.array0_of_genarray"),
     cst_Bigarray_Array3_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array3_of_array_n$0=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array2_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array2.of_array: non-rectangular data"),
     cst_In_channel_input_all_chann=
      caml_string_of_jsbytes
       ("In_channel.input_all: channel content is larger than maximum string length"),
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Match_failure=global_data.Match_failure,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Sys_error=global_data.Sys_error,
     End_of_file=global_data.End_of_file,
     Division_by_zero=global_data.Division_by_zero,
     Sys_blocked_io=global_data.Sys_blocked_io,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     _l_=[0,0,[0,6,0]],
     _k_=[0,0,[0,7,0]],
     _j_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _i_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _g_=[0,1],
     _h_=[0,0],
     _a_=runtime.caml_int64_create_lo_mi_hi(0,0,32752),
     _b_=runtime.caml_int64_create_lo_mi_hi(0,0,65520),
     _c_=runtime.caml_int64_create_lo_mi_hi(1,0,32752),
     _d_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32751),
     _e_=runtime.caml_int64_create_lo_mi_hi(0,0,16),
     _f_=runtime.caml_int64_create_lo_mi_hi(0,0,15536),
     _n_=[0,caml_string_of_jsbytes("obj.ml"),95,4],
     _r_=[0,caml_string_of_jsbytes("seq.ml"),596,4],
     _x_=[0,caml_string_of_jsbytes("uchar.ml"),88,18],
     _w_=[0,caml_string_of_jsbytes("uchar.ml"),91,7],
     _v_=[0,caml_string_of_jsbytes("uchar.ml"),80,18],
     _u_=[0,caml_string_of_jsbytes("uchar.ml"),85,7],
     _A_=[0,0,0],
     _G_=[0,caml_string_of_jsbytes("bytes.ml"),808,20],
     _F_=[0,caml_string_of_jsbytes("bytes.ml"),819,9],
     _E_=[0,caml_string_of_jsbytes("bytes.ml"),754,20],
     _D_=[0,caml_string_of_jsbytes("bytes.ml"),765,9],
     _C_=[0,caml_string_of_jsbytes("bytes.ml"),642,20],
     _B_=[0,caml_string_of_jsbytes("bytes.ml"),667,9],
     _H_=[0,caml_string_of_jsbytes("array.ml"),322,4],
     _J_=[0,caml_string_of_jsbytes("float.ml"),395,6],
     _I_=[0,caml_string_of_jsbytes("float.ml"),222,14],
     _U_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _T_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _S_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _R_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _V_=[0,0,0,0],
     _W_=[0,0,0],
     _X_=[0,caml_string_of_jsbytes("set.ml"),570,18],
     _Y_=[0,0,0,0],
     _Z_=[0,caml_string_of_jsbytes("map.ml"),400,10],
     ___=[0,0,0],
     _$_=[0,caml_string_of_jsbytes("stream.ml"),53,12],
     _aa_=[0,0],
     _ab_=[0,caml_string_of_jsbytes("stream.ml"),82,12],
     _af_=[0,caml_string_of_jsbytes("buffer.ml"),231,9],
     _ae_=[0,caml_string_of_jsbytes("buffer.ml"),212,2],
     _ad_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _ac_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _au_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _av_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _aw_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _ay_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _az_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _aA_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _aB_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _aC_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1830,8],
     _a6_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _a5_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aI_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _aJ_=[0,1,0],
     _aK_=[0,0],
     _aL_=[1,0],
     _aM_=[1,1],
     _aO_=[1,1],
     _aN_=[1,1],
     _aS_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _aP_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _aQ_=[0,0],
     _aR_=[0,0],
     _aT_=[0,[12,64,0]],
     _aU_=[0,caml_string_of_jsbytes("@ "),1,0],
     _aV_=[0,caml_string_of_jsbytes("@,"),0,0],
     _aW_=[2,60],
     _aX_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _aY_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _aZ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _a0_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _a1_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _a2_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _a3_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _a4_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _aH_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _aG_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _aF_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _aE_=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _aD_=[0,0,4],
     _ax_=[0,103],
     _ag_=[0,0,0],
     _bq_=[0,[2,0,[0,0]],caml_string_of_jsbytes("%s%c")],
     _bk_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bl_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bi_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bj_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bg_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bh_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ba_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unknown option '"),
         [2,0,[11,caml_string_of_jsbytes("'.\n"),0]]]],
       caml_string_of_jsbytes("%s: unknown option '%s'.\n")],
     _bd_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": wrong argument '"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("'; option '"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("' expects "),
             [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]]]]]],
       caml_string_of_jsbytes
        ("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _be_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": option '"),
         [2,0,[11,caml_string_of_jsbytes("' needs an argument.\n"),0]]]],
       caml_string_of_jsbytes("%s: option '%s' needs an argument.\n")],
     _bf_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]],
       caml_string_of_jsbytes("%s: %s.\n")],
     _bb_=[0,caml_string_of_jsbytes("-help")],
     _bc_=[0,caml_string_of_jsbytes("--help")],
     _a$_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a__=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _a9_=[0,caml_string_of_jsbytes("-help")],
     _a7_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s %s\n")],
     _a8_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_string_of_jsbytes("  %s %s%s\n")],
     _bv_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bH_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bI_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _bG_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _bE_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bC_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bD_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bA_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _bB_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _bz_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _by_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bw_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bx_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bu_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bt_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bF_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _bP_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_collections:      "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("minor_collections:      %d\n")],
     _bQ_=
      [0,
       [11,
        caml_string_of_jsbytes("major_collections:      "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("major_collections:      %d\n")],
     _bR_=
      [0,
       [11,
        caml_string_of_jsbytes("compactions:            "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("compactions:            %d\n")],
     _bS_=
      [0,
       [11,
        caml_string_of_jsbytes("forced_major_collections: "),
        [4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("forced_major_collections: %d\n")],
     _bT_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bU_=[0,[8,[0,0,0],0,[0,0],0],caml_string_of_jsbytes("%.0f")],
     _bV_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("minor_words:    %*.0f\n")],
     _bW_=
      [0,
       [11,
        caml_string_of_jsbytes("promoted_words: "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("promoted_words: %*.0f\n")],
     _bX_=
      [0,
       [11,
        caml_string_of_jsbytes("major_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("major_words:    %*.0f\n")],
     _bY_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bZ_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _b0_=
      [0,
       [11,caml_string_of_jsbytes("top_heap_words: "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("top_heap_words: %*d\n")],
     _b1_=
      [0,
       [11,caml_string_of_jsbytes("heap_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("heap_words:     %*d\n")],
     _b2_=
      [0,
       [11,caml_string_of_jsbytes("live_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("live_words:     %*d\n")],
     _b3_=
      [0,
       [11,caml_string_of_jsbytes("free_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("free_words:     %*d\n")],
     _b4_=
      [0,
       [11,caml_string_of_jsbytes("largest_free:   "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("largest_free:   %*d\n")],
     _b5_=
      [0,
       [11,caml_string_of_jsbytes("fragments:      "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("fragments:      %*d\n")],
     _b6_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _b7_=
      [0,
       [11,caml_string_of_jsbytes("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("live_blocks: %d\n")],
     _b8_=
      [0,
       [11,caml_string_of_jsbytes("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("free_blocks: %d\n")],
     _b9_=
      [0,
       [11,caml_string_of_jsbytes("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("heap_chunks: %d\n")],
     _cf_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _cg_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _ch_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _ck_=[0,0],
     _cq_=[3,0,3],
     _cp_=[1,caml_string_of_jsbytes("max_indent < 2")],
     _cn_=[1,caml_string_of_jsbytes("margin <= max_indent")],
     _co_=[0,0],
     _cm_=[0,caml_string_of_jsbytes("")],
     _cl_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _cG_=[0,91],
     _cF_=[0,123],
     _cH_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _cI_=[0,[3,0,[10,0]],caml_string_of_jsbytes("%S%!")],
     _cE_=[0,37,caml_string_of_jsbytes("")],
     _cD_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _cC_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _cB_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _cA_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _cz_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _cy_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _cx_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _cw_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _cv_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _cu_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _ct_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _cs_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _cP_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),439,17],
     _cO_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),421,13],
     _cN_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),418,13],
     _cM_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),415,13],
     _cL_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),412,13],
     _cK_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),409,13],
     _cJ_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),281,50],
     _cQ_=[0,caml_string_of_jsbytes("camlinternalMod.ml"),72,5],
     _cR_=[0,caml_string_of_jsbytes("camlinternalMod.ml"),81,2],
     _cU_=[0,0],
     _cT_=[0,0],
     _cS_=[0,0],
     _cZ_=[0,7,0],
     _cY_=[0,1,[0,3,[0,5,0]]],
     _cX_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_string_of_jsbytes("%s%06x%s")],
     _cW_=[0,caml_string_of_jsbytes('"'),0],
     _c0_=[254,0.,0.],
     _c1_=[0,0];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,concat_fmtty,erase_rel,concat_fmt];
    caml_register_global
     (761,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function make(v){return [0,v]}
    function get(r){return r[1]}
    function set(r,v){r[1] = v;return 0}
    function exchange(r,v){var cur=r[1];r[1] = v;return cur}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function fetch_and_add(r,n){var cur=r[1];r[1] = cur + n | 0;return cur}
    function incr(r){fetch_and_add(r,1);return 0}
    function decr(r){fetch_and_add(r,-1);return 0}
    var
     include=
      [0,make,get,set,exchange,compare_and_set,fetch_and_add,incr,decr];
    caml_register_global(762,include,"CamlinternalAtomic");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,cst_Stdlib_Exit,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_a_),
     neg_infinity=caml_int64_float_of_bits(_b_),
     nan=caml_int64_float_of_bits(_c_),
     max_float=caml_int64_float_of_bits(_d_),
     min_float=caml_int64_float_of_bits(_e_),
     epsilon=caml_int64_float_of_bits(_f_),
     max_int=2147483647,
     min_int=-2147483648;
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function bool_of_string_opt(param)
     {return caml_string_notequal(param,cst_false$1)
              ?caml_string_notequal(param,cst_true$1)?0:_g_
              :_h_}
    function string_of_int(n){return caml_string_of_jsbytes("" + n)}
    function int_of_string_opt(s)
     {try
       {var _EE_=[0,caml_int_of_string(s)];return _EE_}
      catch(_EF_)
       {_EF_ = caml_wrap_exception(_EF_);
        if(_EF_[1] === Failure)return 0;
        throw _EF_}}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return cat(s,cst);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function to_string(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function of_string_opt(s)
     {try
       {var _EC_=[0,caml_float_of_string(s)];return _EC_}
      catch(_ED_)
       {_ED_ = caml_wrap_exception(_ED_);
        if(_ED_[1] === Failure)return 0;
        throw _ED_}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_text(name){return open_gen(_i_,438,name)}
    function open_bin(name){return open_gen(_j_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_EB_)
             {_EB_ = caml_wrap_exception(_EB_);
              if(_EB_[1] !== Sys_error)throw _EB_;
              var _EA_=_EB_}
            var param$0=l;
            continue}
          return 0}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output_bytes(oc,s,0,caml_ml_bytes_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(s) - len | 0) < ofs))
       return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_Ez_){}
      try
       {var _Ex_=caml_ml_close_channel(oc);return _Ex_}
      catch(_Ey_){return 0}}
    function open_gen$0(mode,perm,name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_text$0(name){return open_gen$0(_k_,0,name)}
    function open_bin$0(name){return open_gen$0(_l_,0,name)}
    function input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 < len$0)
         {var r=caml_ml_input(ic,s,ofs$0,len$0);
          if(0 === r)throw End_of_file;
          var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1;
          continue}
        return 0}}
    function really_input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_bytes(len);
      really_input(ic,s,0,len);
      return caml_string_of_bytes(s)}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1],len=caml_ml_bytes_length(hd);
            caml_blit_bytes(hd,0,buf,pos$0 - len | 0,len);
            var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl;
            continue}
          return buf}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(! accu)throw End_of_file;
          var _Ew_=build_result(caml_create_bytes(len),len,accu)}
        else
         {if(! (0 < n))
           {var beg=caml_create_bytes(- n | 0);
            caml_ml_input(chan,beg,0,- n | 0);
            var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
            continue}
          var res=caml_create_bytes(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           var
            len$0=(len + n | 0) - 1 | 0,
            _Ew_=build_result(caml_create_bytes(len$0),len$0,[0,res,accu]);
          else
           var _Ew_=res}
        return caml_string_of_bytes(_Ew_)}}
    function close_noerr$0(ic)
     {try
       {var _Eu_=caml_ml_close_channel(ic);return _Eu_}
      catch(_Ev_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_string_of_jsbytes("" + i))}
    function print_float(f){return output_string(stdout,to_string(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_string_of_jsbytes("" + i))}
    function prerr_float(f){return output_string(stderr,to_string(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_int_opt(param){return int_of_string_opt(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function read_float_opt(param){return of_string_opt(read_line(0))}
    function string_of_format(param){var str=param[2];return str}
    function symbol(param,_Es_)
     {var
       str2=_Es_[2],
       fmt2=_Es_[1],
       str1=param[2],
       fmt1=param[1],
       _Et_=cat(str1,cat(cst$0,str2));
      return [0,concat_fmt(fmt1,fmt2),_Et_]}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {for(;;)
       {var
         f_yet_to_run=[0,1],
         old_exit=exit_function[1],
         new_exit$0=
          function(f_yet_to_run,old_exit)
           {function new_exit(param)
             {if(compare_and_set(f_yet_to_run,1,0))caml_call1(f,0);
              return caml_call1(old_exit,0)}
            return new_exit},
         new_exit=new_exit$0(f_yet_to_run,old_exit),
         success=compare_and_set(exit_function,old_exit,new_exit),
         _Er_=1 - success;
        if(_Er_)continue;
        return _Er_}}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    var
     _m_=
      [0,
       runtime.caml_ml_seek_out_64,
       runtime.caml_ml_pos_out_64,
       caml_ml_channel_size_64,
       runtime.caml_ml_seek_in_64,
       runtime.caml_ml_pos_in_64,
       caml_ml_channel_size_64],
     set_binary_mode=caml_ml_set_binary_mode,
     close$0=caml_ml_close_channel,
     in_channel_length=caml_ml_channel_size,
     pos_in=caml_ml_pos_in,
     seek_in=runtime.caml_ml_seek_in,
     input_value=caml_input_value,
     input_binary_int=runtime.caml_ml_input_int,
     input_byte=caml_ml_input_char,
     input_char=caml_ml_input_char,
     set_binary_mode$0=caml_ml_set_binary_mode,
     out_channel_length=caml_ml_channel_size,
     pos_out=runtime.caml_ml_pos_out,
     seek_out=runtime.caml_ml_seek_out,
     output_binary_int=runtime.caml_ml_output_int,
     output_byte=caml_ml_output_char,
     output_char=caml_ml_output_char,
     flush=caml_ml_flush,
     Stdlib=
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       cat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_text,
       open_bin,
       open_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close,
       close_noerr,
       set_binary_mode$0,
       open_text$0,
       open_bin$0,
       open_gen$0,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close$0,
       close_noerr$0,
       set_binary_mode,
       _m_,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
    caml_register_global(775,Stdlib,"Stdlib");
    var
     Exit$0=[248,cst_Stdlib_Pervasives_Exit,caml_fresh_oo_id(0)],
     Stdlib_Pervasives=
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       cat,
       char_of_int,
       string_of_bool,
       bool_of_string,
       bool_of_string_opt,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_int_opt,
       read_float,
       read_float_opt,
       open_text,
       open_bin,
       open_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close,
       close_noerr,
       set_binary_mode$0,
       open_text$0,
       open_bin$0,
       open_gen$0,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close$0,
       close_noerr$0,
       set_binary_mode,
       string_of_format,
       symbol,
       exit,
       at_exit,
       valid_float_lexem,
       do_at_exit];
    caml_register_global(776,Stdlib_Pervasives,"Stdlib__Pervasives");
    function left(v){return [0,v]}
    function right(v){return [1,v]}
    function is_left(param){return 0 === param[0]?1:0}
    function is_right(param){return 0 === param[0]?0:1}
    function find_left(param)
     {if(0 === param[0]){var v=param[1];return [0,v]}return 0}
    function find_right(param)
     {if(0 === param[0])return 0;var v=param[1];return [0,v]}
    function map_left(f,e)
     {if(0 === e[0]){var v=e[1];return [0,caml_call1(f,v)]}return e}
    function map_right(f,e)
     {if(0 === e[0])return e;var v=e[1];return [1,caml_call1(f,v)]}
    function map(left,right,param)
     {if(0 === param[0]){var v=param[1];return [0,caml_call1(left,v)]}
      var v$0=param[1];
      return [1,caml_call1(right,v$0)]}
    function fold(left,right,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(left,v)}
      var v$0=param[1];
      return caml_call1(right,v$0)}
    function equal(left,right,e1,e2)
     {if(0 === e1[0])
       {var _Ep_=e1[1];
        if(0 === e2[0]){var v2=e2[1];return caml_call2(left,_Ep_,v2)}}
      else
       {var _Eq_=e1[1];
        if(0 !== e2[0]){var v2$0=e2[1];return caml_call2(right,_Eq_,v2$0)}}
      return 0}
    function compare(left,right,e1,e2)
     {if(0 === e1[0])
       {var _En_=e1[1];
        if(0 === e2[0]){var v2=e2[1];return caml_call2(left,_En_,v2)}
        return -1}
      var _Eo_=e1[1];
      if(0 === e2[0])return 1;
      var v2$0=e2[1];
      return caml_call2(right,_Eo_,v2$0)}
    var
     Stdlib_Either=
      [0,
       left,
       right,
       is_left,
       is_right,
       find_left,
       find_right,
       map_left,
       map_right,
       map,
       fold,
       fold,
       fold,
       equal,
       compare];
    caml_register_global(777,Stdlib_Either,"Stdlib__Either");
    var
     executable_name=runtime.caml_sys_executable_name(0),
     match=runtime.caml_sys_get_config(0),
     os_type=match[1],
     match$0=[0,caml_string_of_jsbytes("js_of_ocaml")],
     unix=runtime.caml_sys_const_ostype_unix(0),
     win32=runtime.caml_sys_const_ostype_win32(0),
     cygwin=runtime.caml_sys_const_ostype_cygwin(0),
     max_array_length=runtime.caml_sys_const_max_wosize(0),
     max_floatarray_length=max_array_length / 2 | 0,
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     big_endian=0,
     match$1=32,
     int_size=32;
    function getenv_opt(s)
     {try
       {var _El_=[0,caml_sys_getenv(s)];return _El_}
      catch(_Em_)
       {_Em_ = caml_wrap_exception(_Em_);
        if(_Em_ === Not_found)return 0;
        throw _Em_}}
    var interactive=[0,0];
    function set_signal(sig_num,sig_beh){return 0}
    var
     Break=[248,cst_Stdlib_Sys_Break,caml_fresh_oo_id(0)],
     sigabrt=-1,
     sigalrm=-2,
     sigfpe=-3,
     sighup=-4,
     sigill=-5,
     sigint=-6,
     sigkill=-7,
     sigpipe=-8,
     sigquit=-9,
     sigsegv=-10,
     sigterm=-11,
     sigusr1=-12,
     sigusr2=-13,
     sigchld=-14,
     sigcont=-15,
     sigstop=-16,
     sigtstp=-17,
     sigttin=-18,
     sigttou=-19,
     sigvtalrm=-20,
     sigprof=-21,
     sigbus=-22,
     sigpoll=-23,
     sigsys=-24,
     sigtrap=-25,
     sigurg=-26,
     sigxcpu=-27,
     sigxfsz=-28;
    function catch_break(on){return on?0:0}
    var development_version=0;
    function Make(_Ek_,_Ej_){return [0,1]}
    var
     Immediate64=[0,Make],
     Stdlib_Sys=
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       match$0,
       unix,
       win32,
       cygwin,
       match$1,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       development_version,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
    caml_register_global(778,Stdlib_Sys,"Stdlib__Sys");
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    function double_field(x,i){return caml_array_get(x,i)}
    function set_double_field(x,i,v){return caml_array_set(x,i,v)}
    var
     first_non_constant_constructor=0,
     last_non_constant_constructor_=245,
     lazy_tag=246,
     closure_tag=247,
     object_tag=248,
     infix_tag=249,
     forward_tag=250,
     no_scan_tag=251,
     abstract_tag=251,
     string_tag=252,
     double_tag=253,
     double_array_tag=254,
     custom_tag=255,
     int_tag=1000,
     out_of_heap_tag=1001,
     unaligned_tag=1002;
    function info(obj)
     {if(caml_obj_tag(obj) === 247)
       {var
         info=runtime.caml_obj_raw_field(obj,1),
         arity=info >> 24,
         start_env=info << 8 >>> 9 | 0;
        return [0,arity,start_env]}
      throw [0,Assert_failure,_n_]}
    function of_val(x)
     {var switch$0=0;
      if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1)
       {var slot=x[1];switch$0 = 1}
      if(! switch$0)var slot=x;
      var switch$1=0;
      if(is_block(slot) && caml_obj_tag(slot) === 248)
       {var name=slot[1];switch$1 = 1}
      if(! switch$1)var name=invalid_arg(cst_Obj_extension_constructor$0);
      return caml_obj_tag(name) === 252
              ?slot
              :invalid_arg(cst_Obj_extension_constructor)}
    function name(slot){return slot[1]}
    function id(slot){return slot[2]}
    var
     Extension_constructor=[0,of_val,name,id],
     extension_constructor=Extension_constructor[1],
     extension_name=Extension_constructor[2],
     extension_id=Extension_constructor[3],
     max_ephe_length=max_array_length - 2 | 0;
    function create(l)
     {var _Eh_=0 <= l?1:0,_Ei_=_Eh_?l <= max_ephe_length?1:0:_Eh_;
      if(1 - _Ei_)invalid_arg(cst_Obj_Ephemeron_create);
      return runtime.caml_ephe_create(l)}
    function length(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset(e,o,msg)
     {var _Ee_=0 <= o?1:0,_Ef_=_Ee_?o < length(e)?1:0:_Ee_,_Eg_=1 - _Ef_;
      return _Eg_?invalid_arg(msg):_Eg_}
    function get_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key);
      return runtime.caml_ephe_get_key(e,o)}
    function get_key_copy(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key_copy);
      return runtime.caml_ephe_get_key_copy(e,o)}
    function set_key(e,o,x)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_set_key);
      return caml_ephe_set_key(e,o,x)}
    function unset_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_unset_key);
      return caml_ephe_unset_key(e,o)}
    function check_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_check_key);
      return runtime.caml_ephe_check_key(e,o)}
    function blit_key(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length(e2) - l | 0) < o2))
       {var
         _Ec_=0 !== l?1:0,
         _Ed_=_Ec_?runtime.caml_ephe_blit_key(e1,o1,e2,o2,l):_Ec_;
        return _Ed_}
      return invalid_arg(cst_Obj_Ephemeron_blit_key)}
    var
     _o_=runtime.caml_ephe_blit_data,
     _p_=runtime.caml_ephe_check_data,
     _q_=
      [0,
       create,
       length,
       get_key,
       get_key_copy,
       set_key,
       unset_key,
       check_key,
       blit_key,
       runtime.caml_ephe_get_data,
       runtime.caml_ephe_get_data_copy,
       runtime.caml_ephe_set_data,
       function(_Eb_){return runtime.caml_ephe_unset_data(_Eb_)},
       _p_,
       _o_,
       max_ephe_length],
     Stdlib_Obj=
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor,
       last_non_constant_constructor_,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       [0,info],
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       _q_];
    caml_register_global(779,Stdlib_Obj,"Stdlib__Obj");
    var Undefined=[248,cst_CamlinternalLazy_Undefined,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function force_val_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      var result=caml_call1(closure,0);
      caml_obj_make_forward(blk,result);
      return result}
    function force(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_lazy_block(lzv)}
    function force_val(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_val_lazy_block(lzv)}
    var
     CamlinternalLazy=
      [0,Undefined,force_lazy_block,force_val_lazy_block,force,force_val];
    caml_register_global(780,CamlinternalLazy,"CamlinternalLazy");
    function to_lazy(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250 && t !== 246 && t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function is_val(l){return caml_obj_tag(l) !== 246?1:0}
    function map$0(f,x)
     {return [246,
              function(_D__)
               {var
                 _D$_=caml_obj_tag(x),
                 _Ea_=250 === _D$_?x[1]:246 === _D$_?force_lazy_block(x):x;
                return caml_call1(f,_Ea_)}]}
    function map_val(f,x)
     {if(is_val(x))
       {var
         _D5_=caml_obj_tag(x),
         _D6_=250 === _D5_?x[1]:246 === _D5_?force_lazy_block(x):x;
        return from_val(caml_call1(f,_D6_))}
      return [246,
              function(_D7_)
               {var
                 _D8_=caml_obj_tag(x),
                 _D9_=250 === _D8_?x[1]:246 === _D8_?force_lazy_block(x):x;
                return caml_call1(f,_D9_)}]}
    var
     Stdlib_Lazy=
      [0,
       Undefined,
       map$0,
       is_val,
       from_val,
       map_val,
       to_lazy,
       force_val,
       to_lazy,
       from_val,
       is_val];
    caml_register_global(781,Stdlib_Lazy,"Stdlib__Lazy");
    function empty(param){return 0}
    function return$0(x,param){return [0,x,empty]}
    function cons(x,next,param){return [0,x,next]}
    function append$0(seq1,seq2,param)
     {var match=caml_call1(seq1,0);
      if(match)
       {var next=match[2],x=match[1];
        return [0,x,function(_D4_){return append$0(next,seq2,_D4_)}]}
      return caml_call1(seq2,0)}
    function map$1(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _D2_=function(_D3_){return map$1(f,next,_D3_)};
        return [0,caml_call1(f,x),_D2_]}
      return 0}
    function filter_map(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1],match$0=caml_call1(f,x);
          if(match$0)
           {var y=match$0[1];
            return [0,y,function(_D1_){return filter_map(f,next,_D1_)}]}
          var seq$0=next;
          continue}
        return 0}}
    function filter(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          if(caml_call1(f,x))
           return [0,x,function(_D0_){return filter(f,next,_D0_)}];
          var seq$0=next;
          continue}
        return 0}}
    function concat(seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1],_DY_=0;
        return append$0(x,function(_DZ_){return concat(next,_DZ_)},_DY_)}
      return 0}
    function flat_map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _DV_=0,
         _DW_=function(_DX_){return flat_map(f,next,_DX_)};
        return append$0(caml_call1(f,x),_DW_,_DV_)}
      return 0}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=next;
          continue}
        return 0}}
    function unfold(f,u,param)
     {var match=caml_call1(f,u);
      if(match)
       {var match$0=match[1],u$0=match$0[2],x=match$0[1];
        return [0,x,function(_DU_){return unfold(f,u$0,_DU_)}]}
      return 0}
    function is_empty(xs){var match=caml_call1(xs,0);return match?0:1}
    function uncons(xs)
     {var match=caml_call1(xs,0);
      if(match){var xs$0=match[2],x=match[1];return [0,[0,x,xs$0]]}
      return 0}
    function length$0(xs$1)
     {var accu=0,xs=xs$1;
      for(;;)
       {var match=caml_call1(xs,0);
        if(match)
         {var xs$0=match[2],accu$0=accu + 1 | 0,accu=accu$0,xs=xs$0;continue}
        return accu}}
    function iteri(f,xs$1)
     {var i=0,xs=xs$1;
      for(;;)
       {var match=caml_call1(xs,0);
        if(match)
         {var xs$0=match[2],x=match[1];
          caml_call2(f,i,x);
          var i$0=i + 1 | 0,i=i$0,xs=xs$0;
          continue}
        return 0}}
    function fold_lefti(f,accu$1,xs$1)
     {var accu=accu$1,i=0,xs=xs$1;
      for(;;)
       {var match=caml_call1(xs,0);
        if(match)
         {var
           xs$0=match[2],
           x=match[1],
           accu$0=caml_call3(f,accu,i,x),
           i$0=i + 1 | 0,
           accu=accu$0,
           i=i$0,
           xs=xs$0;
          continue}
        return accu}}
    function for_all(p,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],_DT_=caml_call1(p,x);
          if(_DT_){var xs$0=xs$1;continue}
          return _DT_}
        return 1}}
    function exists(p,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],_DS_=caml_call1(p,x);
          if(_DS_)return _DS_;
          var xs$0=xs$1;
          continue}
        return 0}}
    function find(p,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1];
          if(caml_call1(p,x))return [0,x];
          var xs$0=xs$1;
          continue}
        return 0}}
    function find_map(f,xs)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],result=caml_call1(f,x);
          if(result)return result;
          var xs$0=xs$1;
          continue}
        return 0}}
    function iter2(f,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
          if(match$0)
           {var ys$1=match$0[2],y=match$0[1];
            caml_call2(f,x,y);
            var xs$0=xs$1,ys$0=ys$1;
            continue}
          return 0}
        return 0}}
    function fold_left2(f,accu,xs,ys)
     {var accu$0=accu,xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
          if(match$0)
           {var
             ys$1=match$0[2],
             y=match$0[1],
             accu$1=caml_call3(f,accu$0,x,y),
             accu$0=accu$1,
             xs$0=xs$1,
             ys$0=ys$1;
            continue}
          return accu$0}
        return accu$0}}
    function for_all2(f,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
          if(match$0)
           {var ys$1=match$0[2],y=match$0[1],_DR_=caml_call2(f,x,y);
            if(_DR_){var xs$0=xs$1,ys$0=ys$1;continue}
            return _DR_}
          return 1}
        return 1}}
    function exists2(f,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],match$0=caml_call1(ys$0,0);
          if(match$0)
           {var ys$1=match$0[2],y=match$0[1],_DQ_=caml_call2(f,x,y);
            if(_DQ_)return _DQ_;
            var xs$0=xs$1,ys$0=ys$1;
            continue}
          return 0}
        return 0}}
    function equal$0(eq,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0),match$0=caml_call1(ys$0,0);
        if(match)
         {if(match$0)
           {var
             ys$1=match$0[2],
             y=match$0[1],
             xs$1=match[2],
             x=match[1],
             _DP_=caml_call2(eq,x,y);
            if(_DP_){var xs$0=xs$1,ys$0=ys$1;continue}
            return _DP_}}
        else
         if(! match$0)return 1;
        return 0}}
    function compare$0(cmp,xs,ys)
     {var xs$0=xs,ys$0=ys;
      for(;;)
       {var match=caml_call1(xs$0,0),match$0=caml_call1(ys$0,0);
        if(match)
         {var _DN_=match[2],_DO_=match[1];
          if(match$0)
           {var ys$1=match$0[2],y=match$0[1],c=caml_call2(cmp,_DO_,y);
            if(0 === c){var xs$0=_DN_,ys$0=ys$1;continue}
            return c}
          return 1}
        return match$0?-1:0}}
    function init_aux(f,i,j,param)
     {if(i < j)
       {var
         _DK_=i + 1 | 0,
         _DL_=function(_DM_){return init_aux(f,_DK_,j,_DM_)};
        return [0,caml_call1(f,i),_DL_]}
      return 0}
    function init(n,f)
     {if(0 <= n)
       {var _DI_=0;return function(_DJ_){return init_aux(f,_DI_,n,_DJ_)}}
      return invalid_arg(cst_Seq_init)}
    function repeat(x,param)
     {return [0,x,function(_DH_){return repeat(x,_DH_)}]}
    function forever(f,param)
     {function _DF_(_DG_){return forever(f,_DG_)}
      return [0,caml_call1(f,0),_DF_]}
    function cycle_nonempty(xs,param)
     {var _DD_=0;
      return append$0(xs,function(_DE_){return cycle_nonempty(xs,_DE_)},_DD_)}
    function cycle(xs,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var
         xs$0=match[2],
         x=match[1],
         _DA_=function(_DC_){return cycle_nonempty(xs,_DC_)};
        return [0,x,function(_DB_){return append$0(xs$0,_DA_,_DB_)}]}
      return 0}
    function iterate1(f,x,param)
     {var y=caml_call1(f,x);
      return [0,y,function(_Dz_){return iterate1(f,y,_Dz_)}]}
    function iterate(f,x)
     {function _Dw_(_Dy_){return iterate1(f,x,_Dy_)}
      return function(_Dx_){return [0,x,_Dw_]}}
    function mapi_aux(f,i,xs,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var
         xs$0=match[2],
         x=match[1],
         _Dt_=i + 1 | 0,
         _Du_=function(_Dv_){return mapi_aux(f,_Dt_,xs$0,_Dv_)};
        return [0,caml_call2(f,i,x),_Du_]}
      return 0}
    function mapi(f,xs)
     {var _Dr_=0;return function(_Ds_){return mapi_aux(f,_Dr_,xs,_Ds_)}}
    function tail_scan(f,s,xs,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var xs$0=match[2],x=match[1],s$0=caml_call2(f,s,x);
        return [0,s$0,function(_Dq_){return tail_scan(f,s$0,xs$0,_Dq_)}]}
      return 0}
    function scan(f,s,xs)
     {function _Dn_(_Dp_){return tail_scan(f,s,xs,_Dp_)}
      return function(_Do_){return [0,s,_Dn_]}}
    function take_aux(n,xs)
     {return 0 === n
              ?empty
              :function(param)
                {var match=caml_call1(xs,0);
                 if(match)
                  {var xs$0=match[2],x=match[1];
                   return [0,x,take_aux(n - 1 | 0,xs$0)]}
                 return 0}}
    function take(n,xs)
     {if(n < 0)invalid_arg(cst_Seq_take);return take_aux(n,xs)}
    function drop(n,xs)
     {return 0 <= n
              ?0 === n
                ?xs
                :function(param)
                  {var n$0=n,xs$0=xs;
                   for(;;)
                    {var match=caml_call1(xs$0,0);
                     if(match)
                      {var xs$1=match[2],n$1=n$0 - 1 | 0;
                       if(0 === n$1)return caml_call1(xs$1,0);
                       var n$0=n$1,xs$0=xs$1;
                       continue}
                     return 0}}
              :invalid_arg(cst_Seq_drop)}
    function take_while(p,xs,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var xs$0=match[2],x=match[1];
        return caml_call1(p,x)
                ?[0,x,function(_Dm_){return take_while(p,xs$0,_Dm_)}]
                :0}
      return 0}
    function drop_while(p,xs,param)
     {var xs$0=xs;
      for(;;)
       {var node=caml_call1(xs$0,0);
        if(node)
         {var xs$1=node[2],x=node[1];
          if(caml_call1(p,x)){var xs$0=xs$1;continue}
          return node}
        return 0}}
    function group(eq,xs,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var
         xs$0=match[2],
         x=match[1],
         _Dd_=caml_call1(eq,x),
         _De_=function(_Dl_){return drop_while(_Dd_,xs$0,_Dl_)},
         _Df_=function(_Dk_){return group(eq,_De_,_Dk_)},
         _Dg_=caml_call1(eq,x),
         _Dh_=function(_Dj_){return take_while(_Dg_,xs$0,_Dj_)};
        return [0,function(_Di_){return [0,x,_Dh_]},_Df_]}
      return 0}
    var Forced_twice=[248,cst_Stdlib_Seq_Forced_twice,caml_fresh_oo_id(0)];
    function failure(param){throw Forced_twice}
    function memoize(xs)
     {function s$0(param)
       {var match=caml_call1(xs,0);
        if(match){var xs$0=match[2],x=match[1];return [0,x,memoize(xs$0)]}
        return 0}
      var s=to_lazy(s$0);
      return function(_Dc_)
       {var _Db_=caml_obj_tag(s);
        return 250 === _Db_?s[1]:246 === _Db_?force_lazy_block(s):s}}
    function once(xs)
     {function f(param)
       {var match=caml_call1(xs,0);
        if(match){var xs$0=match[2],x=match[1];return [0,x,once(xs$0)]}
        return 0}
      var action=[0,f];
      return function(param)
       {var f=exchange(action,failure);return caml_call1(f,0)}}
    function zip(xs,ys,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var xs$0=match[2],x=match[1],match$0=caml_call1(ys,0);
        if(match$0)
         {var ys$0=match$0[2],y=match$0[1];
          return [0,[0,x,y],function(_Da_){return zip(xs$0,ys$0,_Da_)}]}
        return 0}
      return 0}
    function map2(f,xs,ys,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var xs$0=match[2],x=match[1],match$0=caml_call1(ys,0);
        if(match$0)
         {var
           ys$0=match$0[2],
           y=match$0[1],
           _C__=function(_C$_){return map2(f,xs$0,ys$0,_C$_)};
          return [0,caml_call2(f,x,y),_C__]}
        return 0}
      return 0}
    function interleave(xs,ys,param)
     {var match=caml_call1(xs,0);
      if(match)
       {var xs$0=match[2],x=match[1];
        return [0,x,function(_C9_){return interleave(ys,xs$0,_C9_)}]}
      return caml_call1(ys,0)}
    function sorted_merge1(cmp,x,xs,y,ys)
     {return 0 < caml_call2(cmp,x,y)
              ?[0,
                y,
                function(_C7_)
                 {var match=caml_call1(ys,0);
                  if(match)
                   {var ys$0=match[2],y=match[1];
                    return sorted_merge1(cmp,x,xs,y,ys$0)}
                  return [0,x,xs]}]
              :[0,
                x,
                function(_C8_)
                 {var match=caml_call1(xs,0);
                  if(match)
                   {var xs$0=match[2],x=match[1];
                    return sorted_merge1(cmp,x,xs$0,y,ys)}
                  return [0,y,ys]}]}
    function sorted_merge(cmp,xs,ys,param)
     {var match=caml_call1(xs,0),match$0=caml_call1(ys,0);
      if(match)
       {if(match$0)
         {var ys$0=match$0[2],y=match$0[1],xs$0=match[2],x=match[1];
          return sorted_merge1(cmp,x,xs$0,y,ys$0)}
        var c=match}
      else
       {if(! match$0)return 0;var c=match$0}
      return c}
    function map_fst(xys,param)
     {var match=caml_call1(xys,0);
      if(match)
       {var xys$0=match[2],match$0=match[1],x=match$0[1];
        return [0,x,function(_C6_){return map_fst(xys$0,_C6_)}]}
      return 0}
    function map_snd(xys,param)
     {var match=caml_call1(xys,0);
      if(match)
       {var xys$0=match[2],match$0=match[1],y=match$0[2];
        return [0,y,function(_C5_){return map_snd(xys$0,_C5_)}]}
      return 0}
    function unzip(xys)
     {function _C2_(_C4_){return map_snd(xys,_C4_)}
      return [0,function(_C3_){return map_fst(xys,_C3_)},_C2_]}
    function filter_map_find_left_map(f,xs,param)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],match$0=caml_call1(f,x);
          if(0 === match$0[0])
           {var y=match$0[1];
            return [0,
                    y,
                    function(_C1_){return filter_map_find_left_map(f,xs$1,_C1_)}]}
          var xs$0=xs$1;
          continue}
        return 0}}
    function filter_map_find_right_map(f,xs,param)
     {var xs$0=xs;
      for(;;)
       {var match=caml_call1(xs$0,0);
        if(match)
         {var xs$1=match[2],x=match[1],match$0=caml_call1(f,x);
          if(0 === match$0[0]){var xs$0=xs$1;continue}
          var z=match$0[1];
          return [0,
                  z,
                  function(_C0_)
                   {return filter_map_find_right_map(f,xs$1,_C0_)}]}
        return 0}}
    function partition_map(f,xs)
     {function _CX_(_CZ_){return filter_map_find_right_map(f,xs,_CZ_)}
      return [0,
              function(_CY_){return filter_map_find_left_map(f,xs,_CY_)},
              _CX_]}
    function partition(p,xs)
     {function _CT_(x){return 1 - caml_call1(p,x)}
      function _CU_(_CW_){return filter(_CT_,xs,_CW_)}
      return [0,function(_CV_){return filter(p,xs,_CV_)},_CU_]}
    function peel(xss)
     {return unzip(function(_CS_){return filter_map(uncons,xss,_CS_)})}
    function transpose(xss,param)
     {var match=peel(xss),tails=match[2],heads=match[1];
      if(is_empty(heads))
       {if(is_empty(tails))return 0;throw [0,Assert_failure,_r_]}
      return [0,heads,function(_CR_){return transpose(tails,_CR_)}]}
    function _s_(remainders,xss,param)
     {var match=caml_call1(xss,0);
      if(match)
       {var xss$0=match[2],xs=match[1],match$0=caml_call1(xs,0);
        if(match$0)
         {var
           xs$0=match$0[2],
           x=match$0[1],
           match$1=peel(remainders),
           tails=match$1[2],
           heads=match$1[1],
           _CL_=function(_CQ_){return [0,xs$0,tails]},
           _CM_=function(_CP_){return _s_(_CL_,xss$0,_CP_)};
          return [0,function(_CO_){return [0,x,heads]},_CM_]}
        var match$2=peel(remainders),tails$0=match$2[2],heads$0=match$2[1];
        return [0,heads$0,function(_CN_){return _s_(tails$0,xss$0,_CN_)}]}
      return transpose(remainders,0)}
    function map_product(f,xs,ys)
     {function _CF_(x)
       {function _CJ_(y){return caml_call2(f,x,y)}
        return function(_CK_){return map$1(_CJ_,ys,_CK_)}}
      function xss(_CI_){return map$1(_CF_,xs,_CI_)}
      function _CE_(_CH_){return _s_(empty,xss,_CH_)}
      return function(_CG_){return concat(_CE_,_CG_)}}
    function product(xs,ys)
     {return map_product(function(x,y){return [0,x,y]},xs,ys)}
    function of_dispenser(it)
     {function c(param)
       {var match=caml_call1(it,0);
        if(match){var x=match[1];return [0,x,c]}
        return 0}
      return c}
    function to_dispenser(xs)
     {var s=[0,xs];
      return function(param)
       {var match=caml_call1(s[1],0);
        if(match){var xs=match[2],x=match[1];s[1] = xs;return [0,x]}
        return 0}}
    function ints(i,param)
     {var _CC_=i + 1 | 0;return [0,i,function(_CD_){return ints(_CC_,_CD_)}]}
    var
     Stdlib_Seq=
      [0,
       is_empty,
       uncons,
       length$0,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_map,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal$0,
       compare$0,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map$1,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append$0,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
    caml_register_global(782,Stdlib_Seq,"Stdlib__Seq");
    var none=0;
    function some(v){return [0,v]}
    function value(o,default$0){if(o){var v=o[1];return v}return default$0}
    function get$0(param)
     {if(param){var v=param[1];return v}
      return invalid_arg(cst_option_is_None)}
    function bind(o,f){if(o){var v=o[1];return caml_call1(f,v)}return 0}
    function join(param){if(param){var o=param[1];return o}return 0}
    function map$2(f,o){if(o){var v=o[1];return [0,caml_call1(f,v)]}return 0}
    function fold$0(none,some,param)
     {if(param){var v=param[1];return caml_call1(some,v)}return none}
    function iter$0(f,param)
     {if(param){var v=param[1];return caml_call1(f,v)}return 0}
    function is_none(param){return param?0:1}
    function is_some(param){return param?1:0}
    function equal$1(eq,o0,o1)
     {if(o0)
       {if(o1){var v1=o1[1],v0=o0[1];return caml_call2(eq,v0,v1)}}
      else
       if(! o1)return 1;
      return 0}
    function compare$1(cmp,o0,o1)
     {if(o0)
       {var _CB_=o0[1];
        if(o1){var v1=o1[1];return caml_call2(cmp,_CB_,v1)}
        return 1}
      return o1?-1:0}
    function to_result(none,param)
     {if(param){var v=param[1];return [0,v]}return [1,none]}
    function to_list(param){if(param){var v=param[1];return [0,v,0]}return 0}
    function to_seq(param)
     {if(param){var v=param[1];return function(_CA_){return return$0(v,_CA_)}}
      return empty}
    var
     Stdlib_Option=
      [0,
       none,
       some,
       value,
       get$0,
       bind,
       join,
       map$2,
       fold$0,
       iter$0,
       is_none,
       is_some,
       equal$1,
       compare$1,
       to_result,
       to_list,
       to_seq];
    caml_register_global(783,Stdlib_Option,"Stdlib__Option");
    function ok(v){return [0,v]}
    function error(e){return [1,e]}
    function value$0(r,default$0)
     {if(0 === r[0]){var v=r[1];return v}return default$0}
    function get_ok(param)
     {if(0 === param[0]){var v=param[1];return v}
      return invalid_arg(cst_result_is_Error)}
    function get_error(param)
     {if(0 === param[0])return invalid_arg(cst_result_is_Ok);
      var e=param[1];
      return e}
    function bind$0(r,f)
     {if(0 === r[0]){var v=r[1];return caml_call1(f,v)}return r}
    function join$0(e){if(0 === e[0]){var r=e[1];return r}return e}
    function map$3(f,e)
     {if(0 === e[0]){var v=e[1];return [0,caml_call1(f,v)]}return e}
    function map_error(f,v)
     {if(0 === v[0])return v;var e=v[1];return [1,caml_call1(f,e)]}
    function fold$1(ok,error,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(ok,v)}
      var e=param[1];
      return caml_call1(error,e)}
    function iter$1(f,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(f,v)}return 0}
    function iter_error(f,param)
     {if(0 === param[0])return 0;var e=param[1];return caml_call1(f,e)}
    function is_ok(param){return 0 === param[0]?1:0}
    function is_error(param){return 0 === param[0]?0:1}
    function equal$2(ok,error,r0,r1)
     {if(0 === r0[0])
       {var _Cy_=r0[1];
        if(0 === r1[0]){var v1=r1[1];return caml_call2(ok,_Cy_,v1)}}
      else
       {var _Cz_=r0[1];
        if(0 !== r1[0]){var e1=r1[1];return caml_call2(error,_Cz_,e1)}}
      return 0}
    function compare$2(ok,error,r0,r1)
     {if(0 === r0[0])
       {var _Cw_=r0[1];
        if(0 === r1[0]){var v1=r1[1];return caml_call2(ok,_Cw_,v1)}
        return -1}
      var _Cx_=r0[1];
      if(0 === r1[0])return 1;
      var e1=r1[1];
      return caml_call2(error,_Cx_,e1)}
    function to_option(param)
     {if(0 === param[0]){var v=param[1];return [0,v]}return 0}
    function to_list$0(param)
     {if(0 === param[0]){var v=param[1];return [0,v,0]}return 0}
    function to_seq$0(param)
     {if(0 === param[0])
       {var v=param[1];return function(_Cv_){return return$0(v,_Cv_)}}
      return empty}
    var
     Stdlib_Result=
      [0,
       ok,
       error,
       value$0,
       get_ok,
       get_error,
       bind$0,
       join$0,
       map$3,
       map_error,
       fold$1,
       iter$1,
       iter_error,
       is_ok,
       is_error,
       equal$2,
       compare$2,
       to_option,
       to_list$0,
       to_seq$0];
    caml_register_global(784,Stdlib_Result,"Stdlib__Result");
    function equal$3(_Cu_,_Ct_){return _Cu_ === _Ct_?1:0}
    var compare$3=caml_int_compare;
    function to_float(param){return param?1.:0.}
    function to_string$0(param){return param?cst_true$2:cst_false$2}
    function _t_(_Cs_){return _Cs_}
    var
     Stdlib_Bool=
      [0,
       function(_Cr_){return 1 - _Cr_},
       equal$3,
       compare$3,
       _t_,
       to_float,
       to_string$0];
    caml_register_global(785,Stdlib_Bool,"Stdlib__Bool");
    function chr(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_Char_chr)}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return cst$1;if(! (127 <= c))switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return cst$2;switch$0 = 1}
       else
        if(! (14 <= c))
         switch(c)
          {case 8:return cst_b;
           case 9:return cst_t;
           case 10:return cst_n;
           case 13:return cst_r
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase(c)
     {var _Cq_=c - 192 | 0,switch$0=0;
      if(30 < _Cq_ >>> 0)
       {if(! (25 < _Cq_ + 127 >>> 0))switch$0 = 1}
      else
       if(23 !== _Cq_)switch$0 = 1;
      return switch$0?c + 32 | 0:c}
    function uppercase(c)
     {var _Cp_=c - 224 | 0,switch$0=0;
      if(30 < _Cp_ >>> 0)
       {if(! (25 < _Cp_ + 127 >>> 0))switch$0 = 1}
      else
       if(23 !== _Cp_)switch$0 = 1;
      return switch$0?c - 32 | 0:c}
    function lowercase_ascii(c){return 25 < c - 65 >>> 0?c:c + 32 | 0}
    function uppercase_ascii(c){return 25 < c - 97 >>> 0?c:c - 32 | 0}
    function compare$4(c1,c2){return c1 - c2 | 0}
    function equal$4(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     Stdlib_Char=
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare$4,
       equal$4];
    caml_register_global(786,Stdlib_Char,"Stdlib__Char");
    var
     min$0=0,
     max$0=1114111,
     lo_bound=55295,
     hi_bound=57344,
     bom=65279,
     rep=65533;
    function succ(u)
     {return u === 55295
              ?hi_bound
              :u === 1114111?invalid_arg(err_no_succ):u + 1 | 0}
    function pred(u)
     {return u === 57344?lo_bound:u === 0?invalid_arg(err_no_pred):u - 1 | 0}
    function is_valid(i)
     {var _Cl_=0 <= i?1:0,_Cm_=_Cl_?i <= 55295?1:0:_Cl_;
      if(_Cm_)
       var _Cn_=_Cm_;
      else
       var _Co_=57344 <= i?1:0,_Cn_=_Co_?i <= 1114111?1:0:_Co_;
      return _Cn_}
    function of_int(i)
     {return is_valid(i)
              ?i
              :invalid_arg
                (cat(caml_format_int(cst_X,i),cst_is_not_an_Unicode_scalar_v))}
    function is_char(u){return u < 256?1:0}
    function of_char(c){return c}
    function to_char(u)
     {return 255 < u
              ?invalid_arg
                (cat
                  (cst_U,
                   cat
                    (caml_format_int(cst_04X,u),cst_is_not_a_latin1_character)))
              :u}
    function unsafe_to_char(_Ck_){return _Ck_}
    function equal$5(_Cj_,_Ci_){return _Cj_ === _Ci_?1:0}
    var compare$5=caml_int_compare;
    function hash(_Ch_){return _Ch_}
    function utf_decode_is_valid(d){return 1 === (d >>> 27 | 0)?1:0}
    function utf_decode_length(d){return (d >>> 24 | 0) & 7}
    function utf_decode_uchar(d){return d & 16777215}
    function utf_decode(n,u){return (8 | n) << 24 | u}
    function dec_invalid(n){return n << 24 | 65533}
    function utf_8_byte_length(u)
     {if(0 <= u)
       {if(127 < u)
         {if(2047 < u)
           {if(65535 < u)
             {if(1114111 < u)throw [0,Assert_failure,_u_];return 4}
            return 3}
          return 2}
        return 1}
      throw [0,Assert_failure,_v_]}
    function utf_16_byte_length(u)
     {if(0 <= u)
       {if(65535 < u){if(1114111 < u)throw [0,Assert_failure,_w_];return 4}
        return 2}
      throw [0,Assert_failure,_x_]}
    function _y_(_Cg_){return _Cg_}
    var
     Stdlib_Uchar=
      [0,
       min$0,
       max$0,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_Cf_){return _Cf_},
       _y_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal$5,
       compare$5,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       dec_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
    caml_register_global(787,Stdlib_Uchar,"Stdlib__Uchar");
    function length$1(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons$0(a,l){return [0,a,l]}
    function hd(param)
     {if(param){var a=param[1];return a}return failwith(cst_hd)}
    function tl(param)
     {if(param){var l=param[2];return l}return failwith(cst_tl)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(cst_nth)}}
      return invalid_arg(cst_List_nth)}
    function nth_opt(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return [0,a];
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return 0}}
      return invalid_arg(cst_List_nth$0)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function init_aux$0(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux$0(i + 1 | 0,n,f)]}
    function init$0(len,f)
     {if(0 <= len)
       {if(50 < len)
         {var acc=0,i=0;
          for(;;)
           {if(len <= i)return rev(acc);
            var i$0=i + 1 | 0,acc$0=[0,caml_call1(f,i),acc],acc=acc$0,i=i$0;
            continue}}
        return init_aux$0(0,len,f)}
      return invalid_arg(cst_List_init)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$4(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$4(f,l)]}
      return 0}
    function _z_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_z_(i + 1 | 0,f,l)]}
      return 0}
    function mapi$0(f,l){return _z_(0,f,l)}
    function rev_map(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           a=param$0[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param$0=l;
          continue}
        return accu}}
    function iter$2(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function iteri$0(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1];
          caml_call2(f,i,a);
          var i$0=i + 1 | 0,i=i$0,param=l;
          continue}
        return 0}}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function map2$0(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2$0(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function rev_map2(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function iter2$0(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function fold_left2$0(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function fold_right2(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,fold_right2(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function for_all$0(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_Ce_=caml_call1(p,a);
          if(_Ce_){var param$0=l;continue}
          return _Ce_}
        return 1}}
    function exists$0(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_Cd_=caml_call1(p,a);
          if(_Cd_)return _Cd_;
          var param$0=l;
          continue}
        return 0}}
    function for_all2$0(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _Cc_=caml_call2(p,a1,a2);
            if(_Cc_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _Cc_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function exists2$0(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _Cb_=caml_call2(p,a1,a2);
            if(_Cb_)return _Cb_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_Ca_=0 === caml_compare(a,x)?1:0;
          if(_Ca_)return _Ca_;
          var param$0=l;
          continue}
        return 0}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_B$_=a === x?1:0;
          if(_B$_)return _B$_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assq_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function mem_assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           match=param$0[1],
           a=match[1],
           _B__=0 === caml_compare(a,x)?1:0;
          if(_B__)return _B__;
          var param$0=l;
          continue}
        return 0}}
    function mem_assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],a=match[1],_B9_=a === x?1:0;
          if(_B9_)return _B9_;
          var param$0=l;
          continue}
        return 0}}
    function remove_assoc(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return 0 === caml_compare(a,x)?l:[0,pair,remove_assoc(x,l)]}
      return 0}
    function remove_assq(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,remove_assq(x,l)]}
      return 0}
    function find$0(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_opt(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return [0,x];
          var param$0=l;
          continue}
        return 0}}
    function find_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1],result=caml_call1(f,x);
          if(result)return result;
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function filteri(p,param)
     {var i=0,acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           acc$0=caml_call2(p,i,x)?[0,x,acc]:acc,
           i$0=i + 1 | 0,
           i=i$0,
           acc=acc$0,
           param$0=l;
          continue}
        return rev(acc)}}
    function filter_map$0(f)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1],match=caml_call1(f,x);
            if(match)
             {var v=match[1],accu$1=[0,v,accu$0],accu$0=accu$1,param=l;
              continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function concat_map(f,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           xs=caml_call1(f,x),
           acc$0=rev_append(xs,acc),
           acc=acc$0,
           param$0=l;
          continue}
        return rev(acc)}}
    function fold_left_map(f,accu,param)
     {var accu$0=accu,l_accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           match=caml_call2(f,accu$0,x),
           x$0=match[2],
           accu$1=match[1],
           l_accu$0=[0,x$0,l_accu],
           accu$0=accu$1,
           l_accu=l_accu$0,
           param$0=l;
          continue}
        return [0,accu$0,rev(l_accu)]}}
    function partition$0(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))
           {var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
          var no$0=[0,x,no],no=no$0,param$0=l;
          continue}
        var _B8_=rev(no);
        return [0,rev(yes),_B8_]}}
    function partition_map$0(p,param)
     {var left=0,right=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1],match=caml_call1(p,x);
          if(0 === match[0])
           {var v=match[1],left$0=[0,v,left],left=left$0,param$0=l;continue}
          var v$0=match[1],right$0=[0,v$0,right],right=right$0,param$0=l;
          continue}
        var _B7_=rev(right);
        return [0,rev(left),_B7_]}}
    function split(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=split(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _A_}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function merge(cmp,l1,l2)
     {if(l1)
       {if(l2)
         {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
          return 0 < caml_call2(cmp,h1,h2)
                  ?[0,h2,merge(cmp,l1,t2)]
                  :[0,h1,merge(cmp,t1,l2)]}
        return l1}
      return l2}
    function fast_sort(cmp,l)
     {function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _B3_=l[2];
            if(_B3_)
             {var
               tl=_B3_[2],
               x2=_B3_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _B5_=l[2];
           if(_B5_)
            {var _B6_=_B5_[2];
             if(_B6_)
              {var
                tl$1=_B6_[2],
                x3=_B6_[1],
                x2$0=_B5_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x2$0,x3)
                    ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                      :[0,x3,[0,x1$0,[0,x2$0,0]]]
                  :0 < caml_call2(cmp,x1$0,x3)
                    ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                      :[0,x3,[0,x2$0,[0,x1$0,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            var _B4_=rev_append(l1,accu)}
          else
           var _B4_=rev_append(l2,accu);
          return [0,_B4_,tl$0]}}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BZ_=l[2];
            if(_BZ_)
             {var
               tl=_BZ_[2],
               x2=_BZ_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _B1_=l[2];
           if(_B1_)
            {var _B2_=_B1_[2];
             if(_B2_)
              {var
                tl$1=_B2_[2],
                x3=_B2_[1],
                x2$0=_B1_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x1$0,x3)
                    ?0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                      :[0,x2$0,[0,x3,[0,x1$0,0]]]
                    :[0,x2$0,[0,x1$0,[0,x3,0]]]
                  :0 < caml_call2(cmp,x2$0,x3)
                    ?0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                      :[0,x1$0,[0,x3,[0,x2$0,0]]]
                    :[0,x1$0,[0,x2$0,[0,x3,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            var _B0_=rev_append(l1,accu)}
          else
           var _B0_=rev_append(l2,accu);
          return [0,_B0_,tl$0]}}
      var len=length$1(l);
      return 2 <= len?sort(len,l)[1]:l}
    function sort_uniq(cmp,l)
     {function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BQ_=l[2];
            if(_BQ_)
             {var
               tl=_BQ_[2],
               x2=_BQ_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _BS_=l[2];
           if(_BS_)
            {var _BT_=_BS_[2];
             if(_BT_)
              {var
                tl$1=_BT_[2],
                x3=_BT_[1],
                x2$0=_BS_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _BU_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]],
                 s$0=_BU_;
               else
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)
                   var _BV_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 < c$3)
                    var _BV_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                   else
                    var
                     c$4=caml_call2(cmp,x1$0,x3),
                     _BW_=
                      0 === c$4
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 < c$4
                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x3,[0,x1$0,[0,x2$0,0]]],
                     _BV_=_BW_;
                  var s$0=_BV_}
                else
                 {var c$5=caml_call2(cmp,x1$0,x3);
                  if(0 === c$5)
                   var _BX_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 < c$5)
                    var _BX_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                   else
                    var
                     c$6=caml_call2(cmp,x2$0,x3),
                     _BY_=
                      0 === c$6
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 < c$6
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]],
                     _BX_=_BY_;
                  var s$0=_BX_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            var _BR_=rev_append(l1,accu)}
          else
           var _BR_=rev_append(l2,accu);
          return [0,_BR_,tl$0]}}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _BH_=l[2];
            if(_BH_)
             {var
               tl=_BH_[2],
               x2=_BH_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _BJ_=l[2];
           if(_BJ_)
            {var _BK_=_BJ_[2];
             if(_BK_)
              {var
                tl$1=_BK_[2],
                x3=_BK_[1],
                x2$0=_BJ_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _BL_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]],
                 s$0=_BL_;
               else
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)
                   var _BM_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 <= c$3)
                    var
                     c$4=caml_call2(cmp,x2$0,x3),
                     _BN_=
                      0 === c$4
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 <= c$4
                         ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                         :[0,x2$0,[0,x3,[0,x1$0,0]]],
                     _BM_=_BN_;
                   else
                    var _BM_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                  var s$0=_BM_}
                else
                 {var c$5=caml_call2(cmp,x2$0,x3);
                  if(0 === c$5)
                   var _BO_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 <= c$5)
                    var
                     c$6=caml_call2(cmp,x1$0,x3),
                     _BP_=
                      0 === c$6
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 <= c$6
                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                         :[0,x1$0,[0,x3,[0,x2$0,0]]],
                     _BO_=_BP_;
                   else
                    var _BO_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                  var s$0=_BO_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            var _BI_=rev_append(l1,accu)}
          else
           var _BI_=rev_append(l2,accu);
          return [0,_BI_,tl$0]}}
      var len=length$1(l);
      return 2 <= len?sort(len,l)[1]:l}
    function compare_lengths(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0){var l2$1=l2$0[2],l1$1=l1$0[2],l1$0=l1$1,l2$0=l2$1;continue}
          return 1}
        return l2$0?-1:0}}
    function compare_length_with(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2];
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          return 1}
        return 0 === n$0?0:0 < n$0?-1:1}}
    function equal$6(eq,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _BG_=caml_call2(eq,a1,a2);
            if(_BG_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _BG_}}
        else
         if(! l2$0)return 1;
        return 0}}
    function compare$6(cmp,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var _BE_=l1$0[2],_BF_=l1$0[1];
          if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],c=caml_call2(cmp,_BF_,a2);
            if(0 === c){var l1$0=_BE_,l2$0=l2$1;continue}
            return c}
          return 1}
        return l2$0?-1:0}}
    function to_seq$1(l)
     {function aux(l,param)
       {if(l)
         {var tail=l[2],x=l[1];
          return [0,x,function(_BD_){return aux(tail,_BD_)}]}
        return 0}
      return function(_BC_){return aux(l,_BC_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _BB_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_BB_,seq))}
        var match=caml_call1(seq,0);
        if(match)
         {var next=match[2],x=match[1];
          return [0,x,direct(depth - 1 | 0,next)]}
        return 0}
      return direct(500,seq)}
    var
     include$0=
      [0,
       length$1,
       compare_lengths,
       compare_length_with,
       cons$0,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init$0,
       append,
       rev_append,
       flatten,
       flatten,
       equal$6,
       compare$6,
       iter$2,
       iteri$0,
       map$4,
       mapi$0,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left_map,
       fold_left$0,
       fold_right,
       iter2$0,
       map2$0,
       rev_map2,
       fold_left2$0,
       fold_right2,
       for_all$0,
       exists$0,
       for_all2$0,
       exists2$0,
       mem,
       memq,
       find$0,
       find_opt,
       find_map$0,
       find_all,
       find_all,
       filteri,
       partition$0,
       partition_map$0,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(788,include$0,"Stdlib__List");
    var zero=0,one=1,minus_one=-1;
    function abs$0(x){return 0 <= x?x:- x | 0}
    var max_int$0=2147483647,min_int$0=-2147483648;
    function lognot(x){return x ^ -1}
    function equal$7(_BA_,_Bz_){return _BA_ === _Bz_?1:0}
    var compare$7=caml_int_compare;
    function min$1(x,y){return x <= y?x:y}
    function max$1(x,y){return y <= x?x:y}
    function to_string$1(x){return caml_string_of_jsbytes("" + x)}
    var
     Stdlib_Int=
      [0,
       zero,
       one,
       minus_one,
       abs$0,
       max_int$0,
       min_int$0,
       lognot,
       equal$7,
       compare$7,
       min$1,
       max$1,
       to_string$1];
    caml_register_global(789,Stdlib_Int,"Stdlib__Int");
    function make$0(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function init$1(n,f)
     {var s=caml_create_bytes(n),_Bx_=n - 1 | 0,_Bw_=0;
      if(! (_Bx_ < 0))
       {var i=_Bw_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _By_=i + 1 | 0;
          if(_Bx_ !== i){var i=_By_;continue}
          break}}
      return s}
    var empty$0=caml_create_bytes(0);
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function of_bytes(b){return caml_string_of_bytes(copy(b))}
    function to_bytes(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function symbol$0(a,b)
     {var c=a + b | 0,_Bv_=b < 0?1:0,match=c < 0?1:0,switch$0=0;
      if(a < 0)
       {if(_Bv_ && ! match)switch$0 = 1}
      else
       if(! _Bv_ && match)switch$0 = 1;
      return switch$0?invalid_arg(cst_Bytes_extend):c}
    function extend(s,left,right)
     {var
       len=symbol$0(symbol$0(caml_ml_bytes_length(s),left),right),
       r=caml_create_bytes(len);
      if(0 <= left)
       var dstoff=left,srcoff=0;
      else
       var dstoff=0,srcoff=- left | 0;
      var cpylen=min$1(caml_ml_bytes_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_bytes(s,srcoff,r,dstoff,cpylen);
      return r}
    function fill(s,ofs,len,c)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_fill_bytes(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_str)}
    function iter$3(f,a)
     {var _Bt_=caml_ml_bytes_length(a) - 1 | 0,_Bs_=0;
      if(! (_Bt_ < 0))
       {var i=_Bs_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _Bu_=i + 1 | 0;
          if(_Bt_ !== i){var i=_Bu_;continue}
          break}}
      return 0}
    function iteri$1(f,a)
     {var _Bq_=caml_ml_bytes_length(a) - 1 | 0,_Bp_=0;
      if(! (_Bq_ < 0))
       {var i=_Bp_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _Br_=i + 1 | 0;
          if(_Bq_ !== i){var i=_Br_;continue}
          break}}
      return 0}
    function concat$0(sep,l)
     {if(l)
       {var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _Bm_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_bytes_length(_Bm_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_Bytes_concat),
               acc=acc$0,
               param=tl;
              continue}
            var _Bo_=caml_ml_bytes_length(_Bm_) + acc | 0}
          else
           var _Bo_=acc;
          var dst=caml_create_bytes(_Bo_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _Bn_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_bytes(_Bn_,0,dst,pos,caml_ml_bytes_length(_Bn_));
                caml_blit_bytes
                 (sep,0,dst,pos + caml_ml_bytes_length(_Bn_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_bytes_length(_Bn_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_bytes(_Bn_,0,dst,pos,caml_ml_bytes_length(_Bn_));
              return dst}
            return dst}}}
      return empty$0}
    function cat$0(s1,s2)
     {var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return r}
    function is_space(param)
     {var _Bl_=param - 9 | 0,switch$0=0;
      if(4 < _Bl_ >>> 0)
       {if(23 === _Bl_)switch$0 = 1}
      else
       if(2 !== _Bl_)switch$0 = 1;
      return switch$0?1:0}
    function trim(s)
     {var len=caml_ml_bytes_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len && is_space(caml_bytes_unsafe_get(s,i[1])))
         {i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s,j[1])))
           {j[1] += -1;continue}
          return i[1] <= j[1]?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0):empty$0}}}
    function escaped$0(s)
     {var n=[0,0],_Be_=caml_ml_bytes_length(s) - 1 | 0,_Bd_=0;
      if(! (_Be_ < 0))
       {var i$0=_Bd_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _Bi_=match - 34 | 0,switch$1=0;
            if(58 < _Bi_ >>> 0)
             {if(93 <= _Bi_)switch$1 = 1}
            else
             if(56 < _Bi_ - 1 >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _Bj_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _Bj_=4;break;case 1:var _Bj_=2;break}
          n[1] = n[1] + _Bj_ | 0;
          var _Bk_=i$0 + 1 | 0;
          if(_Be_ !== i$0){var i$0=_Bk_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _Bg_=caml_ml_bytes_length(s) - 1 | 0,_Bf_=0;
      if(! (_Bg_ < 0))
       {var i=_Bf_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _Bh_=i + 1 | 0;
          if(_Bg_ !== i){var i=_Bh_;continue}
          break}}
      return s$0}
    function map$5(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_Bb_=l - 1 | 0,_Ba_=0;
      if(! (_Bb_ < 0))
       {var i=_Ba_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _Bc_=i + 1 | 0;
          if(_Bb_ !== i){var i=_Bc_;continue}
          break}}
      return r}
    function mapi$1(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_A__=l - 1 | 0,_A9_=0;
      if(! (_A__ < 0))
       {var i=_A9_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _A$_=i + 1 | 0;
          if(_A__ !== i){var i=_A$_;continue}
          break}}
      return r}
    function fold_left$1(f,x,a)
     {var r=[0,x],_A7_=caml_ml_bytes_length(a) - 1 | 0,_A6_=0;
      if(! (_A7_ < 0))
       {var i=_A6_;
        for(;;)
         {r[1] = caml_call2(f,r[1],caml_bytes_unsafe_get(a,i));
          var _A8_=i + 1 | 0;
          if(_A7_ !== i){var i=_A8_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_A4_=caml_ml_bytes_length(a) - 1 | 0;
      if(! (_A4_ < 0))
       {var i=_A4_;
        for(;;)
         {r[1] = caml_call2(f,caml_bytes_unsafe_get(a,i),r[1]);
          var _A5_=i - 1 | 0;
          if(0 !== i){var i=_A5_;continue}
          break}}
      return r[1]}
    function exists$1(p,s)
     {var n=caml_ml_bytes_length(s),i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,caml_bytes_unsafe_get(s,i)))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$1(p,s)
     {var n=caml_ml_bytes_length(s),i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,caml_bytes_unsafe_get(s,i)))
         {var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function uppercase_ascii$0(s){return map$5(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$5(lowercase_ascii,s)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function capitalize_ascii(s){return apply1(uppercase_ascii,s)}
    function uncapitalize_ascii(s){return apply1(lowercase_ascii,s)}
    function starts_with(prefix,s)
     {var
       len_s=caml_ml_bytes_length(s),
       len_pre=caml_ml_bytes_length(prefix),
       _A3_=len_pre <= len_s?1:0;
      if(_A3_)
       {var i=0;
        for(;;)
         {if(i === len_pre)return 1;
          if(caml_bytes_unsafe_get(s,i) !== caml_bytes_unsafe_get(prefix,i))
           return 0;
          var i$0=i + 1 | 0,i=i$0;
          continue}}
      return _A3_}
    function ends_with(suffix,s)
     {var
       len_s=caml_ml_bytes_length(s),
       len_suf=caml_ml_bytes_length(suffix),
       diff=len_s - len_suf | 0,
       _A2_=0 <= diff?1:0;
      if(_A2_)
       {var i=0;
        for(;;)
         {if(i === len_suf)return 1;
          if
           (caml_bytes_unsafe_get(s,diff + i | 0)
            !==
            caml_bytes_unsafe_get(suffix,i))
           return 0;
          var i$0=i + 1 | 0,i=i$0;
          continue}}
      return _A2_}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index(s,c){return index_rec(s,caml_ml_bytes_length(s),0,c)}
    function index_rec_opt(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt(s,c)
     {return index_rec_opt(s,caml_ml_bytes_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in)}
    function index_from_opt(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte)}
    function rindex_rec(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex(s,c)
     {return rindex_rec(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))return rindex_rec(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r)}
    function rindex_rec_opt(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt(s,c)
     {return rindex_rec_opt(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from_opt(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))
       return rindex_rec_opt(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt)}
    function contains_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _A0_=1;return _A0_}
       catch(_A1_)
        {_A1_ = caml_wrap_exception(_A1_);
         if(_A1_ === Not_found)return 0;
         throw _A1_}
      return invalid_arg(cst_String_contains_from_Bytes)}
    function contains(s,c){return contains_from(s,0,c)}
    function rcontains_from(s,i,c)
     {if(0 <= i && ! (caml_ml_bytes_length(s) <= i))
       try
        {rindex_rec(s,i,c);var _AY_=1;return _AY_}
       catch(_AZ_)
        {_AZ_ = caml_wrap_exception(_AZ_);
         if(_AZ_ === Not_found)return 0;
         throw _AZ_}
      return invalid_arg(cst_String_rcontains_from_Byte)}
    function compare$8(x,y){return runtime.caml_bytes_compare(x,y)}
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_bytes_length(s)],
       _AU_=caml_ml_bytes_length(s) - 1 | 0;
      if(! (_AU_ < 0))
       {var i=_AU_;
        for(;;)
         {if(caml_bytes_unsafe_get(s,i) === sep)
           {var _AW_=r[1];
            r[1] = [0,sub(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_AW_];
            j[1] = i}
          var _AX_=i - 1 | 0;
          if(0 !== i){var i=_AX_;continue}
          break}}
      var _AV_=r[1];
      return [0,sub(s,0,j[1]),_AV_]}
    function uppercase$0(s){return map$5(uppercase,s)}
    function lowercase$0(s){return map$5(lowercase,s)}
    function capitalize(s){return apply1(uppercase,s)}
    function uncapitalize(s){return apply1(lowercase,s)}
    function to_seq$2(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_AS_=i + 1 | 0;
        return [0,x,function(_AT_){return aux(_AS_,_AT_)}]}
      var _AQ_=0;
      return function(_AR_){return aux(_AQ_,_AR_)}}
    function to_seqi(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_AO_=i + 1 | 0;
        return [0,[0,i,x],function(_AP_){return aux(_AO_,_AP_)}]}
      var _AM_=0;
      return function(_AN_){return aux(_AM_,_AN_)}}
    function of_seq$0(i)
     {var n=[0,0],buf=[0,make$0(256,0)];
      iter
       (function(c)
         {if(n[1] === caml_ml_bytes_length(buf[1]))
           {var
             new_len=
              min$1(2 * caml_ml_bytes_length(buf[1]) | 0,max_string_length);
            if(caml_ml_bytes_length(buf[1]) === new_len)
             failwith(cst_Bytes_of_seq_cannot_grow_b);
            var new_buf=make$0(new_len,0);
            blit(buf[1],0,new_buf,0,n[1]);
            buf[1] = new_buf}
          caml_bytes_set(buf[1],n[1],c);
          n[1]++;
          return 0},
        i);
      return sub(buf[1],0,n[1])}
    function get$1(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int8(b,i){return caml_bytes_get(b,i) << 24 >> 24}
    function get_uint16_le(b,i){return caml_bytes_get16(b,i)}
    function get_uint16_be(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int16_ne(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_le(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_be(b,i){return get_uint16_be(b,i) << 16 >> 16}
    function get_int32_le(b,i){return caml_bytes_get32(b,i)}
    function get_int32_be(b,i){return caml_int32_bswap(caml_bytes_get32(b,i))}
    function get_int64_le(b,i){return caml_bytes_get64(b,i)}
    function get_int64_be(b,i){return caml_int64_bswap(caml_bytes_get64(b,i))}
    function set$0(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int16_le(b,i,x){return caml_bytes_set16(b,i,x)}
    function set_int16_be(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int32_le(b,i,x){return caml_bytes_set32(b,i,x)}
    function set_int32_be(b,i,x)
     {return caml_bytes_set32(b,i,caml_int32_bswap(x))}
    function set_int64_le(b,i,x){return caml_bytes_set64(b,i,x)}
    function set_int64_be(b,i,x)
     {return caml_bytes_set64(b,i,caml_int64_bswap(x))}
    var set_uint8=caml_bytes_set,set_uint16_ne=caml_bytes_set16;
    function dec_ret(n,u){return utf_decode(n,u)}
    function not_in_x80_to_xBF(b){return 2 !== (b >>> 6 | 0)?1:0}
    function not_in_xA0_to_xBF(b){return 5 !== (b >>> 5 | 0)?1:0}
    function not_in_x80_to_x9F(b){return 4 !== (b >>> 5 | 0)?1:0}
    function not_in_x90_to_xBF(b)
     {var _AK_=b < 144?1:0,_AL_=_AK_ || (191 < b?1:0);return _AL_}
    function not_in_x80_to_x8F(b){return 8 !== (b >>> 4 | 0)?1:0}
    function utf_8_uchar_3(b0,b1,b2)
     {return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63}
    function utf_8_uchar_4(b0,b1,b2,b3)
     {return (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63}
    function get_utf_8_uchar(b,i)
     {var b0=caml_bytes_get(b,i),max=caml_ml_bytes_length(b) - 1 | 0;
      if(224 <= b0)
       {var switch$0=0;
        if(237 <= b0)
         {if(! (245 <= b0))
           switch(b0 - 237 | 0)
            {case 0:
              var i$0=i + 1 | 0;
              if(max < i$0)return dec_invalid(1);
              var b1=caml_bytes_unsafe_get(b,i$0);
              if(not_in_x80_to_x9F(b1))return dec_invalid(1);
              var i$1=i$0 + 1 | 0;
              if(max < i$1)return dec_invalid(2);
              var b2=caml_bytes_unsafe_get(b,i$1);
              return not_in_x80_to_xBF(b2)
                      ?dec_invalid(2)
                      :dec_ret(3,utf_8_uchar_3(b0,b1,b2));
             case 3:
              var i$4=i + 1 | 0;
              if(max < i$4)return dec_invalid(1);
              var b1$1=caml_bytes_unsafe_get(b,i$4);
              if(not_in_x90_to_xBF(b1$1))return dec_invalid(1);
              var i$5=i$4 + 1 | 0;
              if(max < i$5)return dec_invalid(2);
              var b2$1=caml_bytes_unsafe_get(b,i$5);
              if(not_in_x80_to_xBF(b2$1))return dec_invalid(2);
              var i$6=i$5 + 1 | 0;
              if(max < i$6)return dec_invalid(3);
              var b3=caml_bytes_unsafe_get(b,i$6);
              return not_in_x80_to_xBF(b3)
                      ?dec_invalid(3)
                      :dec_ret(4,utf_8_uchar_4(b0,b1$1,b2$1,b3));
             case 7:
              var i$10=i + 1 | 0;
              if(max < i$10)return dec_invalid(1);
              var b1$3=caml_bytes_unsafe_get(b,i$10);
              if(not_in_x80_to_x8F(b1$3))return dec_invalid(1);
              var i$11=i$10 + 1 | 0;
              if(max < i$11)return dec_invalid(2);
              var b2$3=caml_bytes_unsafe_get(b,i$11);
              if(not_in_x80_to_xBF(b2$3))return dec_invalid(2);
              var i$12=i$11 + 1 | 0;
              if(max < i$12)return dec_invalid(3);
              var b3$1=caml_bytes_unsafe_get(b,i$12);
              return not_in_x80_to_xBF(b3$1)
                      ?dec_invalid(3)
                      :dec_ret(4,utf_8_uchar_4(b0,b1$3,b2$3,b3$1));
             case 1:
             case 2:switch$0 = 1;break;
             default:
              var i$7=i + 1 | 0;
              if(max < i$7)return dec_invalid(1);
              var b1$2=caml_bytes_unsafe_get(b,i$7);
              if(not_in_x80_to_xBF(b1$2))return dec_invalid(1);
              var i$8=i$7 + 1 | 0;
              if(max < i$8)return dec_invalid(2);
              var b2$2=caml_bytes_unsafe_get(b,i$8);
              if(not_in_x80_to_xBF(b2$2))return dec_invalid(2);
              var i$9=i$8 + 1 | 0;
              if(max < i$9)return dec_invalid(3);
              var b3$0=caml_bytes_unsafe_get(b,i$9);
              return not_in_x80_to_xBF(b3$0)
                      ?dec_invalid(3)
                      :dec_ret(4,utf_8_uchar_4(b0,b1$2,b2$2,b3$0))}}
        else
         {if(! (225 <= b0))
           {var i$13=i + 1 | 0;
            if(max < i$13)return dec_invalid(1);
            var b1$4=caml_bytes_unsafe_get(b,i$13);
            if(not_in_xA0_to_xBF(b1$4))return dec_invalid(1);
            var i$14=i$13 + 1 | 0;
            if(max < i$14)return dec_invalid(2);
            var b2$4=caml_bytes_unsafe_get(b,i$14);
            return not_in_x80_to_xBF(b2$4)
                    ?dec_invalid(2)
                    :dec_ret(3,utf_8_uchar_3(b0,b1$4,b2$4))}
          switch$0 = 1}
        if(switch$0)
         {var i$2=i + 1 | 0;
          if(max < i$2)return dec_invalid(1);
          var b1$0=caml_bytes_unsafe_get(b,i$2);
          if(not_in_x80_to_xBF(b1$0))return dec_invalid(1);
          var i$3=i$2 + 1 | 0;
          if(max < i$3)return dec_invalid(2);
          var b2$0=caml_bytes_unsafe_get(b,i$3);
          return not_in_x80_to_xBF(b2$0)
                  ?dec_invalid(2)
                  :dec_ret(3,utf_8_uchar_3(b0,b1$0,b2$0))}}
      else
       {if(! (128 <= b0))return dec_ret(1,b0);
        if(194 <= b0)
         {var i$15=i + 1 | 0;
          if(max < i$15)return dec_invalid(1);
          var b1$5=caml_bytes_unsafe_get(b,i$15);
          return not_in_x80_to_xBF(b1$5)
                  ?dec_invalid(1)
                  :dec_ret(2,(b0 & 31) << 6 | b1$5 & 63)}}
      return dec_invalid(1)}
    function set_utf_8_uchar(b,i,u)
     {function set(_AJ_,_AI_,_AH_)
       {caml_bytes_unsafe_set(_AJ_,_AI_,_AH_);return 0}
      var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= u)
       {if(127 < u)
         {if(2047 < u)
           {if(65535 < u)
             {if(1114111 < u)throw [0,Assert_failure,_B_];
              var last=i + 3 | 0;
              return max < last
                      ?0
                      :(caml_bytes_set(b,i,240 | u >>> 18 | 0),
                        set(b,i + 1 | 0,128 | (u >>> 12 | 0) & 63),
                        set(b,i + 2 | 0,128 | (u >>> 6 | 0) & 63),
                        set(b,last,128 | u & 63),
                        4)}
            var last$0=i + 2 | 0;
            return max < last$0
                    ?0
                    :(caml_bytes_set(b,i,224 | u >>> 12 | 0),
                      set(b,i + 1 | 0,128 | (u >>> 6 | 0) & 63),
                      set(b,last$0,128 | u & 63),
                      3)}
          var last$1=i + 1 | 0;
          return max < last$1
                  ?0
                  :(caml_bytes_set(b,i,192 | u >>> 6 | 0),
                    set(b,last$1,128 | u & 63),
                    2)}
        caml_bytes_set(b,i,u);
        return 1}
      throw [0,Assert_failure,_C_]}
    function is_valid_utf_8(b)
     {var max=caml_ml_bytes_length(b) - 1 | 0,i=0;
      for(;;)
       {if(max < i)return 1;
        var match=caml_bytes_unsafe_get(b,i);
        if(224 <= match)
         {var switch$0=0;
          if(237 <= match)
           {if(! (245 <= match))
             switch(match - 237 | 0)
              {case 0:
                var last=i + 2 | 0;
                if
                 (!
                  (max < last)
                  &&
                  !
                  not_in_x80_to_x9F(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last)))
                 {var i$0=last + 1 | 0,i=i$0;continue}
                return 0;
               case 3:
                var last$1=i + 3 | 0;
                if
                 (!
                  (max < last$1)
                  &&
                  !
                  not_in_x90_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 2 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$1)))
                 {var i$2=last$1 + 1 | 0,i=i$2;continue}
                return 0;
               case 7:
                var last$3=i + 3 | 0;
                if
                 (!
                  (max < last$3)
                  &&
                  !
                  not_in_x80_to_x8F(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 2 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$3)))
                 {var i$4=last$3 + 1 | 0,i=i$4;continue}
                return 0;
               case 1:
               case 2:switch$0 = 1;break;
               default:
                var last$2=i + 3 | 0;
                if
                 (!
                  (max < last$2)
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 2 | 0))
                  &&
                  !
                  not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$2)))
                 {var i$3=last$2 + 1 | 0,i=i$3;continue}
                return 0}}
          else
           {if(! (225 <= match))
             {var last$4=i + 2 | 0;
              if
               (!
                (max < last$4)
                &&
                !
                not_in_xA0_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
                &&
                !
                not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$4)))
               {var i$5=last$4 + 1 | 0,i=i$5;continue}
              return 0}
            switch$0 = 1}
          if(switch$0)
           {var last$0=i + 2 | 0;
            if
             (!
              (max < last$0)
              &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b,i + 1 | 0))
              &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$0)))
             {var i$1=last$0 + 1 | 0,i=i$1;continue}
            return 0}}
        else
         {if(! (128 <= match)){var i$7=i + 1 | 0,i=i$7;continue}
          if(194 <= match)
           {var last$5=i + 1 | 0;
            if
             (!
              (max < last$5)
              &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b,last$5)))
             {var i$6=last$5 + 1 | 0,i=i$6;continue}
            return 0}}
        return 0}}
    function get_utf_16be_uchar(b,i)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && ! (max < i))
       {if(i === max)return dec_invalid(1);
        var hi=get$1(b,i);
        if(55296 <= hi && ! (57343 < hi))
         {if(56319 < hi)return dec_invalid(2);
          var last=i + 3 | 0;
          if(max < last)return dec_invalid((max - i | 0) + 1 | 0);
          var u=get$1(b,i + 2 | 0);
          if(56320 <= u && ! (57343 < u))
           {var u$0=((hi & 1023) << 10 | u & 1023) + 65536 | 0;
            return dec_ret(4,u$0)}
          return dec_invalid(2)}
        return dec_ret(2,hi)}
      return invalid_arg(cst_index_out_of_bounds)}
    function set_utf_16be_uchar(b,i,u)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && ! (max < i))
       {if(0 <= u)
         {if(65535 < u)
           {if(1114111 < u)throw [0,Assert_failure,_D_];
            var last=i + 3 | 0;
            if(max < last)return 0;
            var
             u$0=u - 65536 | 0,
             hi=55296 | u$0 >>> 10 | 0,
             lo=56320 | u$0 & 1023;
            set$0(b,i,hi);
            set$0(b,i + 2 | 0,lo);
            return 4}
          var last$0=i + 1 | 0;
          return max < last$0?0:(set$0(b,i,u),2)}
        throw [0,Assert_failure,_E_]}
      return invalid_arg(cst_index_out_of_bounds$0)}
    function is_valid_utf_16be(b)
     {var max=caml_ml_bytes_length(b) - 1 | 0,i=0;
      for(;;)
       {if(max < i)return 1;
        if(i === max)return 0;
        var u=get$1(b,i);
        if(55296 <= u && ! (57343 < u))
         {if(56319 < u)return 0;
          var last=i + 3 | 0;
          if(max < last)return 0;
          var u$0=get$1(b,i + 2 | 0);
          if(56320 <= u$0 && ! (57343 < u$0))
           {var i$1=i + 4 | 0,i=i$1;continue}
          return 0}
        var i$0=i + 2 | 0,i=i$0;
        continue}}
    function get_utf_16le_uchar(b,i)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && ! (max < i))
       {if(i === max)return dec_invalid(1);
        var hi=caml_bytes_get16(b,i);
        if(55296 <= hi && ! (57343 < hi))
         {if(56319 < hi)return dec_invalid(2);
          var last=i + 3 | 0;
          if(max < last)return dec_invalid((max - i | 0) + 1 | 0);
          var u=caml_bytes_get16(b,i + 2 | 0);
          if(56320 <= u && ! (57343 < u))
           {var u$0=((hi & 1023) << 10 | u & 1023) + 65536 | 0;
            return dec_ret(4,u$0)}
          return dec_invalid(2)}
        return dec_ret(2,hi)}
      return invalid_arg(cst_index_out_of_bounds$1)}
    function set_utf_16le_uchar(b,i,u)
     {var max=caml_ml_bytes_length(b) - 1 | 0;
      if(0 <= i && ! (max < i))
       {if(0 <= u)
         {if(65535 < u)
           {if(1114111 < u)throw [0,Assert_failure,_F_];
            var last=i + 3 | 0;
            if(max < last)return 0;
            var
             u$0=u - 65536 | 0,
             hi=55296 | u$0 >>> 10 | 0,
             lo=56320 | u$0 & 1023;
            caml_bytes_set16(b,i,hi);
            caml_bytes_set16(b,i + 2 | 0,lo);
            return 4}
          var last$0=i + 1 | 0;
          return max < last$0?0:(caml_bytes_set16(b,i,u),2)}
        throw [0,Assert_failure,_G_]}
      return invalid_arg(cst_index_out_of_bounds$2)}
    function is_valid_utf_16le(b)
     {var max=caml_ml_bytes_length(b) - 1 | 0,i=0;
      for(;;)
       {if(max < i)return 1;
        if(i === max)return 0;
        var u=caml_bytes_get16(b,i);
        if(55296 <= u && ! (57343 < u))
         {if(56319 < u)return 0;
          var last=i + 3 | 0;
          if(max < last)return 0;
          var u$0=caml_bytes_get16(b,i + 2 | 0);
          if(56320 <= u$0 && ! (57343 < u$0))
           {var i$1=i + 4 | 0,i=i$1;continue}
          return 0}
        var i$0=i + 2 | 0,i=i$0;
        continue}}
    var
     set_int64_ne=caml_bytes_set64,
     set_int32_ne=caml_bytes_set32,
     set_int16_ne=caml_bytes_set16,
     set_int8=caml_bytes_set,
     get_int64_ne=caml_bytes_get64,
     get_int32_ne=caml_bytes_get32,
     get_uint16_ne=caml_bytes_get16,
     get_uint8=caml_bytes_get,
     unsafe_of_string=caml_bytes_of_string,
     unsafe_to_string=caml_string_of_bytes,
     equal$8=runtime.caml_bytes_equal,
     include$1=
      [0,
       make$0,
       init$1,
       empty$0,
       copy,
       to_bytes,
       of_bytes,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat$0,
       cat$0,
       iter$3,
       iteri$1,
       map$5,
       mapi$1,
       fold_left$1,
       fold_right$0,
       for_all$1,
       exists$1,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$8,
       equal$8,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le];
    caml_register_global(790,include$1,"Stdlib__Bytes");
    function make$1(n,c){return caml_string_of_bytes(make$0(n,c))}
    function init$2(n,f){return caml_string_of_bytes(init$1(n,f))}
    function copy$0(s)
     {return caml_string_of_bytes(copy(caml_bytes_of_string(s)))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat$1(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _AE_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_string_length(_AE_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_String_concat),
               acc=acc$0,
               param=tl;
              continue}
            var _AG_=caml_ml_string_length(_AE_) + acc | 0}
          else
           var _AG_=acc;
          var dst=caml_create_bytes(_AG_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _AF_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_string(_AF_,0,dst,pos,caml_ml_string_length(_AF_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_AF_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_AF_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_string(_AF_,0,dst,pos,caml_ml_string_length(_AF_))}
            return caml_string_of_bytes(dst)}}}
      return cst$3}
    function iter$4(f,s)
     {var _AC_=caml_ml_string_length(s) - 1 | 0,_AB_=0;
      if(! (_AC_ < 0))
       {var i=_AB_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _AD_=i + 1 | 0;
          if(_AC_ !== i){var i=_AD_;continue}
          break}}
      return 0}
    function iteri$2(f,s)
     {var _Az_=caml_ml_string_length(s) - 1 | 0,_Ay_=0;
      if(! (_Az_ < 0))
       {var i=_Ay_;
        for(;;)
         {caml_call2(f,i,caml_string_unsafe_get(s,i));
          var _AA_=i + 1 | 0;
          if(_Az_ !== i){var i=_AA_;continue}
          break}}
      return 0}
    function map$6(f,s)
     {return caml_string_of_bytes(map$5(f,caml_bytes_of_string(s)))}
    function mapi$2(f,s)
     {return caml_string_of_bytes(mapi$1(f,caml_bytes_of_string(s)))}
    function fold_right$1(f,x,a)
     {return fold_right$0(f,caml_bytes_of_string(x),a)}
    function fold_left$2(f,a,x)
     {return fold_left$1(f,a,caml_bytes_of_string(x))}
    function exists$2(f,s){return exists$1(f,caml_bytes_of_string(s))}
    function for_all$2(f,s){return for_all$1(f,caml_bytes_of_string(s))}
    function is_space$0(param)
     {var _Ax_=param - 9 | 0,switch$0=0;
      if(4 < _Ax_ >>> 0)
       {if(23 === _Ax_)switch$0 = 1}
      else
       if(2 !== _Ax_)switch$0 = 1;
      return switch$0?1:0}
    function trim$0(s)
     {if(caml_string_equal(s,cst$4))return s;
      if
       (!
        is_space$0(caml_string_unsafe_get(s,0))
        &&
        !
        is_space$0(caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
       return s;
      return caml_string_of_bytes(trim(caml_bytes_of_string(s)))}
    function escaped$1(s)
     {var n=caml_ml_string_length(s),i=0;
      for(;;)
       {if(n <= i)return s;
        var match=caml_string_unsafe_get(s,i),_Aw_=match - 32 | 0,switch$0=0;
        if(59 < _Aw_ >>> 0)
         {if(33 < _Aw_ - 61 >>> 0)switch$0 = 1}
        else
         if(2 === _Aw_)switch$0 = 1;
        if(switch$0)
         return caml_string_of_bytes(escaped$0(caml_bytes_of_string(s)));
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function index_rec$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index$0(s,c){return index_rec$0(s,caml_ml_string_length(s),0,c)}
    function index_rec_opt$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt$0(s,c)
     {return index_rec_opt$0(s,caml_ml_string_length(s),0,c)}
    function index_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in$0)}
    function index_from_opt$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte$0)}
    function rindex_rec$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex$0(s,c)
     {return rindex_rec$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r$0)}
    function rindex_rec_opt$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt$0(s,c)
     {return rindex_rec_opt$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from_opt$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec_opt$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt$0)}
    function contains_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec$0(s,l,i,c);var _Au_=1;return _Au_}
       catch(_Av_)
        {_Av_ = caml_wrap_exception(_Av_);
         if(_Av_ === Not_found)return 0;
         throw _Av_}
      return invalid_arg(cst_String_contains_from_Bytes$0)}
    function contains$0(s,c){return contains_from$0(s,0,c)}
    function rcontains_from$0(s,i,c)
     {if(0 <= i && ! (caml_ml_string_length(s) <= i))
       try
        {rindex_rec$0(s,i,c);var _As_=1;return _As_}
       catch(_At_)
        {_At_ = caml_wrap_exception(_At_);
         if(_At_ === Not_found)return 0;
         throw _At_}
      return invalid_arg(cst_String_rcontains_from_Byte$0)}
    function uppercase_ascii$1(s)
     {return caml_string_of_bytes(uppercase_ascii$0(caml_bytes_of_string(s)))}
    function lowercase_ascii$1(s)
     {return caml_string_of_bytes(lowercase_ascii$0(caml_bytes_of_string(s)))}
    function capitalize_ascii$0(s)
     {return caml_string_of_bytes(capitalize_ascii(caml_bytes_of_string(s)))}
    function uncapitalize_ascii$0(s)
     {return caml_string_of_bytes(uncapitalize_ascii(caml_bytes_of_string(s)))}
    function starts_with$0(prefix,s)
     {var
       len_s=caml_ml_string_length(s),
       len_pre=caml_ml_string_length(prefix),
       _Ar_=len_pre <= len_s?1:0;
      if(_Ar_)
       {var i=0;
        for(;;)
         {if(i === len_pre)return 1;
          if(caml_string_unsafe_get(s,i) !== caml_string_unsafe_get(prefix,i))
           return 0;
          var i$0=i + 1 | 0,i=i$0;
          continue}}
      return _Ar_}
    function ends_with$0(suffix,s)
     {var
       len_s=caml_ml_string_length(s),
       len_suf=caml_ml_string_length(suffix),
       diff=len_s - len_suf | 0,
       _Aq_=0 <= diff?1:0;
      if(_Aq_)
       {var i=0;
        for(;;)
         {if(i === len_suf)return 1;
          if
           (caml_string_unsafe_get(s,diff + i | 0)
            !==
            caml_string_unsafe_get(suffix,i))
           return 0;
          var i$0=i + 1 | 0,i=i$0;
          continue}}
      return _Aq_}
    function split_on_char$0(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _Am_=caml_ml_string_length(s) - 1 | 0;
      if(! (_Am_ < 0))
       {var i=_Am_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _Ao_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_Ao_];
            j[1] = i}
          var _Ap_=i - 1 | 0;
          if(0 !== i){var i=_Ap_;continue}
          break}}
      var _An_=r[1];
      return [0,sub$0(s,0,j[1]),_An_]}
    function uppercase$1(s)
     {return caml_string_of_bytes(uppercase$0(caml_bytes_of_string(s)))}
    function lowercase$1(s)
     {return caml_string_of_bytes(lowercase$0(caml_bytes_of_string(s)))}
    function capitalize$0(s)
     {return caml_string_of_bytes(capitalize(caml_bytes_of_string(s)))}
    function uncapitalize$0(s)
     {return caml_string_of_bytes(uncapitalize(caml_bytes_of_string(s)))}
    function compare$9(x,y){return caml_string_compare(x,y)}
    function to_seq$3(s){return to_seq$2(caml_bytes_of_string(s))}
    function to_seqi$0(s){return to_seqi(caml_bytes_of_string(s))}
    function of_seq$1(g){return caml_string_of_bytes(of_seq$0(g))}
    function get_utf_8_uchar$0(s,i)
     {return get_utf_8_uchar(caml_bytes_of_string(s),i)}
    function is_valid_utf_8$0(s)
     {return is_valid_utf_8(caml_bytes_of_string(s))}
    function get_utf_16be_uchar$0(s,i)
     {return get_utf_16be_uchar(caml_bytes_of_string(s),i)}
    function is_valid_utf_16be$0(s)
     {return is_valid_utf_16be(caml_bytes_of_string(s))}
    function get_utf_16le_uchar$0(s,i)
     {return get_utf_16le_uchar(caml_bytes_of_string(s),i)}
    function is_valid_utf_16le$0(s)
     {return is_valid_utf_16le(caml_bytes_of_string(s))}
    function get_int8$0(s,i){return get_int8(caml_bytes_of_string(s),i)}
    function get_uint16_le$0(s,i)
     {return caml_bytes_get16(caml_bytes_of_string(s),i)}
    function get_uint16_be$0(s,i)
     {return get_uint16_be(caml_bytes_of_string(s),i)}
    function get_int16_ne$0(s,i)
     {return get_int16_ne(caml_bytes_of_string(s),i)}
    function get_int16_le$0(s,i)
     {return get_int16_le(caml_bytes_of_string(s),i)}
    function get_int16_be$0(s,i)
     {return get_int16_be(caml_bytes_of_string(s),i)}
    function get_int32_le$0(s,i)
     {return caml_bytes_get32(caml_bytes_of_string(s),i)}
    function get_int32_be$0(s,i)
     {return get_int32_be(caml_bytes_of_string(s),i)}
    function get_int64_le$0(s,i)
     {return caml_bytes_get64(caml_bytes_of_string(s),i)}
    function get_int64_be$0(s,i)
     {return get_int64_be(caml_bytes_of_string(s),i)}
    var
     get_int64_ne$0=runtime.caml_string_get64,
     get_int32_ne$0=runtime.caml_string_get32,
     get_uint16_ne$0=runtime.caml_string_get16,
     get_uint8$0=caml_string_get,
     equal$9=caml_string_equal,
     include$2=
      [0,
       make$1,
       init$2,
       empty$1,
       of_bytes,
       to_bytes,
       concat$1,
       cat,
       equal$9,
       compare$9,
       starts_with$0,
       ends_with$0,
       contains_from$0,
       rcontains_from$0,
       contains$0,
       sub$0,
       split_on_char$0,
       map$6,
       mapi$2,
       fold_left$2,
       fold_right$1,
       for_all$2,
       exists$2,
       trim$0,
       escaped$1,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       iter$4,
       iteri$2,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       to_seq$3,
       to_seqi$0,
       of_seq$1,
       get_utf_8_uchar$0,
       is_valid_utf_8$0,
       get_utf_16be_uchar$0,
       is_valid_utf_16be$0,
       get_utf_16le_uchar$0,
       is_valid_utf_16le$0,
       blit$0,
       copy$0,
       fill,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       get_uint8$0,
       get_int8$0,
       get_uint16_ne$0,
       get_uint16_be$0,
       get_uint16_le$0,
       get_int16_ne$0,
       get_int16_be$0,
       get_int16_le$0,
       get_int32_ne$0,
       get_int32_be$0,
       get_int32_le$0,
       get_int64_ne$0,
       get_int64_be$0,
       get_int64_le$0];
    caml_register_global(791,include$2,"Stdlib__String");
    function equal$10(param,_Al_){return 1}
    function compare$10(param,_Ak_){return 0}
    function to_string$2(param){return cst$5}
    var Stdlib_Unit=[0,equal$10,compare$10,to_string$2];
    caml_register_global(792,Stdlib_Unit,"Stdlib__Unit");
    function to_buffer(buff,ofs,len,v,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buff) - len | 0) < ofs))
       return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substrin)}
    var header_size=20;
    function data_size(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function total_size(buff,ofs){return 20 + data_size(buff,ofs) | 0}
    function from_bytes(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       {var len=caml_marshal_data_size(buff,ofs);
        return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
                ?invalid_arg(cst_Marshal_from_bytes$0)
                :runtime.caml_input_value_from_bytes(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    function from_string(buff,ofs)
     {return from_bytes(caml_bytes_of_string(buff),ofs)}
    var
     Stdlib_Marshal=
      [0,
       caml_output_value,
       to_buffer,
       caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
    caml_register_global(793,Stdlib_Marshal,"Stdlib__Marshal");
    var make_float=runtime.caml_make_float_vect,Floatarray=[0];
    function init$3(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_Ai_=l - 1 | 0,_Ah_=1;
        if(! (_Ai_ < 1))
         {var i=_Ah_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _Aj_=i + 1 | 0;
            if(_Ai_ !== i){var i=_Aj_;continue}
            break}}
        return res}
      return invalid_arg(cst_Array_init)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_Af_=sx - 1 | 0,_Ae_=0;
      if(! (_Af_ < 0))
       {var x=_Ae_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _Ag_=x + 1 | 0;
          if(_Af_ !== x){var x=_Ag_;continue}
          break}}
      return res}
    function copy$1(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$1(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy$1(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function fill$0(a,ofs,len,v)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return runtime.caml_array_fill(a,ofs,len,v);
      return invalid_arg(cst_Array_fill)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((a1.length - 1 - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((a2.length - 1 - len | 0) < ofs2))
       return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function iter$5(f,a)
     {var _Ac_=a.length - 1 - 1 | 0,_Ab_=0;
      if(! (_Ac_ < 0))
       {var i=_Ab_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _Ad_=i + 1 | 0;
          if(_Ac_ !== i){var i=_Ad_;continue}
          break}}
      return 0}
    function iter2$1(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Array_iter2_arrays_must_ha);
      var _z$_=a.length - 1 - 1 | 0,_z__=0;
      if(! (_z$_ < 0))
       {var i=_z__;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _Aa_=i + 1 | 0;
          if(_z$_ !== i){var i=_Aa_;continue}
          break}}
      return 0}
    function map$7(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_z8_=l - 1 | 0,_z7_=1;
      if(! (_z8_ < 1))
       {var i=_z7_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _z9_=i + 1 | 0;
          if(_z8_ !== i){var i=_z9_;continue}
          break}}
      return r}
    function map2$1(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Array_map2_arrays_must_hav);
      if(0 === la)return [0];
      var r=caml_make_vect(la,caml_call2(f,a[1],b[1])),_z5_=la - 1 | 0,_z4_=1;
      if(! (_z5_ < 1))
       {var i=_z4_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _z6_=i + 1 | 0;
          if(_z5_ !== i){var i=_z6_;continue}
          break}}
      return r}
    function iteri$3(f,a)
     {var _z2_=a.length - 1 - 1 | 0,_z1_=0;
      if(! (_z2_ < 0))
       {var i=_z1_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _z3_=i + 1 | 0;
          if(_z2_ !== i){var i=_z3_;continue}
          break}}
      return 0}
    function mapi$3(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_zZ_=l - 1 | 0,_zY_=1;
      if(! (_zZ_ < 1))
       {var i=_zY_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _z0_=i + 1 | 0;
          if(_zZ_ !== i){var i=_z0_;continue}
          break}}
      return r}
    function to_list$1(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function of_list(l)
     {if(l)
       {var
         tl=l[2],
         hd=l[1],
         a=caml_make_vect(list_length(0,l),hd),
         i=1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i + 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    function fold_left$3(f,x,a)
     {var r=[0,x],_zW_=a.length - 1 - 1 | 0,_zV_=0;
      if(! (_zW_ < 0))
       {var i=_zV_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _zX_=i + 1 | 0;
          if(_zW_ !== i){var i=_zX_;continue}
          break}}
      return r[1]}
    function fold_left_map$0(f,acc,input_array)
     {var len=input_array.length - 1;
      if(0 === len)return [0,acc,[0]];
      var
       match=caml_call2(f,acc,input_array[1]),
       elt=match[2],
       acc$0=match[1],
       output_array=caml_make_vect(len,elt),
       acc$1=[0,acc$0],
       _zT_=len - 1 | 0,
       _zS_=1;
      if(! (_zT_ < 1))
       {var i=_zS_;
        for(;;)
         {var
           match$0=caml_call2(f,acc$1[1],input_array[1 + i]),
           elt$0=match$0[2],
           acc$2=match$0[1];
          acc$1[1] = acc$2;
          output_array[1 + i] = elt$0;
          var _zU_=i + 1 | 0;
          if(_zT_ !== i){var i=_zU_;continue}
          break}}
      return [0,acc$1[1],output_array]}
    function fold_right$2(f,a,x)
     {var r=[0,x],_zQ_=a.length - 1 - 1 | 0;
      if(! (_zQ_ < 0))
       {var i=_zQ_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _zR_=i - 1 | 0;
          if(0 !== i){var i=_zR_;continue}
          break}}
      return r[1]}
    function exists$3(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$3(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function for_all2$1(p,l1,l2)
     {var n1=l1.length - 1,n2=l2.length - 1;
      if(n1 !== n2)return invalid_arg(cst_Array_for_all2);
      var i=0;
      for(;;)
       {if(i === n1)return 1;
        if(caml_call2(p,l1[1 + i],l2[1 + i]))
         {var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function exists2$1(p,l1,l2)
     {var n1=l1.length - 1,n2=l2.length - 1;
      if(n1 !== n2)return invalid_arg(cst_Array_exists2);
      var i=0;
      for(;;)
       {if(i === n1)return 0;
        if(caml_call2(p,l1[1 + i],l2[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function mem$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function memq$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x === a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function find_opt$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        var x=a[1 + i];
        if(caml_call1(p,x))return [0,x];
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function find_map$1(f,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        var r=caml_call1(f,a[1 + i]);
        if(r)return r;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function split$0(x)
     {if(caml_equal(x,[0]))return [0,[0],[0]];
      var
       match=x[1],
       b0=match[2],
       a0=match[1],
       n=x.length - 1,
       a=caml_make_vect(n,a0),
       b=caml_make_vect(n,b0),
       _zO_=n - 1 | 0,
       _zN_=1;
      if(! (_zO_ < 1))
       {var i=_zN_;
        for(;;)
         {var match$0=x[1 + i],bi=match$0[2],ai=match$0[1];
          a[1 + i] = ai;
          b[1 + i] = bi;
          var _zP_=i + 1 | 0;
          if(_zO_ !== i){var i=_zP_;continue}
          break}}
      return [0,a,b]}
    function combine$0(a,b)
     {var na=a.length - 1,nb=b.length - 1;
      if(na !== nb)invalid_arg(cst_Array_combine);
      if(0 === na)return [0];
      var x=caml_make_vect(na,[0,a[1],b[1]]),_zL_=na - 1 | 0,_zK_=1;
      if(! (_zL_ < 1))
       {var i=_zK_;
        for(;;)
         {x[1 + i] = [0,a[1 + i],b[1 + i]];
          var _zM_=i + 1 | 0;
          if(_zL_ !== i){var i=_zM_;continue}
          break}}
      return x}
    var Bottom=[248,cst_Stdlib_Array_Bottom,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _zD_=i31 + 1 | 0,_zE_=caml_check_bound(a,_zD_)[1 + _zD_];
          if(caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_zE_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _zF_=i31 + 2 | 0,
           _zG_=caml_check_bound(a,_zF_)[1 + _zF_],
           _zH_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_zH_)[1 + _zH_],_zG_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _zI_=i31 + 1 | 0,_zJ_=caml_check_bound(a,_zI_)[1 + _zI_];
          if(! (0 <= caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_zJ_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[1 + j],e))
           {var _zC_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _zC_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _zB_=trickledown(l,i,e);return _zB_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_zA_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _zA_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _zz_=bubbledown(l,i);return _zz_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_zr_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_zr_ < 0))
       {var i$2=_zr_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[1 + i$2]);
          var _zy_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_zy_;continue}
          break}}
      var _zs_=l - 1 | 0;
      if(! (_zs_ < 2))
       {var i$0=_zs_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[1 + i$0],
           _zw_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[1 + i$0] = _zw_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_H_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[1 + father],e$0))
             caml_check_bound(a,i)[1 + i] = e$0;
            else
             {var _zq_=caml_check_bound(a,father)[1 + father];
              caml_check_bound(a,i)[1 + i] = _zq_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _zx_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_zx_;continue a}
            break}
          break}}
      var _zt_=1 < l?1:0;
      if(_zt_)
       {var e=caml_check_bound(a,1)[2],_zu_=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _zu_;
        caml_check_bound(a,0)[1] = e;
        var _zv_=0}
      else
       var _zv_=_zt_;
      return _zv_}
    function fast_sort$0(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[1 + src2ofs],
         s1$1=caml_check_bound(a,src1ofs)[1 + src1ofs],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[1 + d] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_check_bound(src2,i2$0)[1 + i2$0],
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$1(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_check_bound(dst,d)[1 + d] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_check_bound(a,i1$0)[1 + i1$0],
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$1(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _zi_=len - 1 | 0,_zh_=0;
        if(! (_zi_ < 0))
         {var i=_zh_;
          a:
          for(;;)
           {var
             _zj_=srcofs + i | 0,
             e=caml_check_bound(a,_zj_)[1 + _zj_],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _zk_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_zk_)[1 + _zk_],e))
                 {var
                   _zl_=j[1],
                   _zm_=caml_check_bound(dst,_zl_)[1 + _zl_],
                   _zn_=j[1] + 1 | 0;
                  caml_check_bound(dst,_zn_)[1 + _zn_] = _zm_;
                  j[1] += -1;
                  continue}}
              var _zo_=j[1] + 1 | 0;
              caml_check_bound(dst,_zo_)[1 + _zo_] = e;
              var _zp_=i + 1 | 0;
              if(_zi_ !== i){var i=_zp_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$4(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_zf_=i + 1 | 0;
          return [0,x,function(_zg_){return aux(_zf_,_zg_)}]}
        return 0}
      var _zd_=0;
      return function(_ze_){return aux(_zd_,_ze_)}}
    function to_seqi$1(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_zb_=i + 1 | 0;
          return [0,[0,i,x],function(_zc_){return aux(_zb_,_zc_)}]}
        return 0}
      var _y$_=0;
      return function(_za_){return aux(_y$_,_za_)}}
    function of_seq$2(i$2)
     {var _y__=0,l=fold_left(function(acc,x){return [0,x,acc]},_y__,i$2);
      if(l)
       {var
         tl=l[2],
         hd=l[1],
         len=list_length(0,l),
         a=caml_make_vect(len,hd),
         i$1=len - 2 | 0,
         i=i$1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i - 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    var
     concat$2=caml_array_concat,
     include$3=
      [0,
       make_float,
       init$3,
       create_matrix,
       create_matrix,
       append$1,
       concat$2,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$3,
       map$7,
       mapi$3,
       fold_left$3,
       fold_left_map$0,
       fold_right$2,
       iter2$1,
       map2$1,
       for_all$3,
       exists$3,
       for_all2$1,
       exists2$1,
       mem$0,
       memq$0,
       find_opt$0,
       find_map$1,
       split$0,
       combine$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(794,include$3,"Stdlib__Array");
    var zero$0=0.,one$0=1.,minus_one$0=-1.;
    function is_finite(x){return x - x == 0.?1:0}
    function is_infinite(x){return 1. / x == 0.?1:0}
    function is_nan(x){return x != x?1:0}
    var pi=3.14159265358979312;
    function is_integer(x)
     {var _y9_=x == runtime.caml_trunc_float(x)?1:0;
      return _y9_?is_finite(x):_y9_}
    function succ$0(x){return caml_nextafter_float(x,infinity)}
    function pred$0(x){return caml_nextafter_float(x,neg_infinity)}
    function equal$11(x,y){return 0 === caml_float_compare(x,y)?1:0}
    function min$2(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?x:y}
      return y != y?y:x}
    function max$2(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?y:x}
      return x != x?x:y}
    function min_max(x,y)
     {if(x == x && y == y)
       {if(! (x < y))
         {var switch$0=0;
          if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
          if(switch$0)return [0,y,x]}
        return [0,x,y]}
      return [0,nan,nan]}
    function min_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?x:y}
      return x != x?y:x}
    function max_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?y:x}
      return y != y?x:y}
    function min_max_num(x,y)
     {if(x != x)return [0,y,y];
      if(y != y)return [0,x,x];
      if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return [0,y,x]}
      return [0,x,y]}
    function hash$0(x){return caml_hash(10,100,0,x)}
    function unsafe_fill(a,ofs,len,v)
     {var _y7_=(ofs + len | 0) - 1 | 0;
      if(! (_y7_ < ofs))
       {var i=ofs;
        for(;;)
         {a[1 + i] = v;
          var _y8_=i + 1 | 0;
          if(_y7_ !== i){var i=_y8_;continue}
          break}}
      return 0}
    function check(a,ofs,len,msg)
     {var _y3_=ofs < 0?1:0;
      if(_y3_)
       var _y4_=_y3_;
      else
       {var _y5_=len < 0?1:0;
        if(_y5_)
         var _y4_=_y5_;
        else
         var
          _y6_=(ofs + len | 0) < 0?1:0,
          _y4_=_y6_ || (a.length - 1 < (ofs + len | 0)?1:0)}
      return _y4_?invalid_arg(msg):_y4_}
    function make$2(n,v)
     {var result=caml_floatarray_create(n);
      unsafe_fill(result,0,n,v);
      return result}
    function init$4(l,f)
     {if(0 <= l)
       {var res=caml_floatarray_create(l),_y1_=l - 1 | 0,_y0_=0;
        if(! (_y1_ < 0))
         {var i=_y0_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _y2_=i + 1 | 0;
            if(_y1_ !== i){var i=_y2_;continue}
            break}}
        return res}
      return invalid_arg(cst_Float_Array_init)}
    function append$2(a1,a2)
     {var
       l1=a1.length - 1,
       l2=a2.length - 1,
       result=caml_floatarray_create(l1 + l2 | 0);
      caml_floatarray_blit(a1,0,result,0,l1);
      caml_floatarray_blit(a2,0,result,l1,l2);
      return result}
    function concat$3(l)
     {var acc=0,param=l;
      for(;;)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           x=hd.length - 1 + acc | 0,
           acc$0=acc <= x?x:invalid_arg(cst_Float_Array_concat),
           acc=acc$0,
           param=tl;
          continue}
        var result=caml_floatarray_create(acc),l$0=l,i=0;
        for(;;)
         {if(l$0)
           {var tl$0=l$0[2],hd$0=l$0[1],hlen=hd$0.length - 1;
            caml_floatarray_blit(hd$0,0,result,i,hlen);
            var i$0=i + hlen | 0,l$0=tl$0,i=i$0;
            continue}
          if(i === acc)return result;
          throw [0,Assert_failure,_I_]}}}
    function sub$2(a,ofs,len)
     {check(a,ofs,len,cst_Float_Array_sub);
      var result=caml_floatarray_create(len);
      caml_floatarray_blit(a,ofs,result,0,len);
      return result}
    function copy$2(a)
     {var l=a.length - 1,result=caml_floatarray_create(l);
      caml_floatarray_blit(a,0,result,0,l);
      return result}
    function fill$1(a,ofs,len,v)
     {check(a,ofs,len,cst_Float_Array_fill);return unsafe_fill(a,ofs,len,v)}
    function blit$2(src,sofs,dst,dofs,len)
     {check(src,sofs,len,cst_Float_array_blit);
      check(dst,dofs,len,cst_Float_array_blit$0);
      return caml_floatarray_blit(src,sofs,dst,dofs,len)}
    function to_list$2(a)
     {return init$0(a.length - 1,function(_yZ_){return a[1 + _yZ_]})}
    function of_list$0(l)
     {var result=caml_floatarray_create(length$1(l)),i=0,l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],h=l$0[1];
          result[1 + i] = h;
          var i$0=i + 1 | 0,i=i$0,l$0=t;
          continue}
        return result}}
    function iter$6(f,a)
     {var _yX_=a.length - 1 - 1 | 0,_yW_=0;
      if(! (_yX_ < 0))
       {var i=_yW_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _yY_=i + 1 | 0;
          if(_yX_ !== i){var i=_yY_;continue}
          break}}
      return 0}
    function iter2$2(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Float_Array_iter2_arrays_m);
      var _yU_=a.length - 1 - 1 | 0,_yT_=0;
      if(! (_yU_ < 0))
       {var i=_yT_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _yV_=i + 1 | 0;
          if(_yU_ !== i){var i=_yV_;continue}
          break}}
      return 0}
    function map$8(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_yR_=l - 1 | 0,_yQ_=0;
      if(! (_yR_ < 0))
       {var i=_yQ_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _yS_=i + 1 | 0;
          if(_yR_ !== i){var i=_yS_;continue}
          break}}
      return r}
    function map2$2(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Float_Array_map2_arrays_mu);
      var r=caml_floatarray_create(la),_yO_=la - 1 | 0,_yN_=0;
      if(! (_yO_ < 0))
       {var i=_yN_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _yP_=i + 1 | 0;
          if(_yO_ !== i){var i=_yP_;continue}
          break}}
      return r}
    function iteri$4(f,a)
     {var _yL_=a.length - 1 - 1 | 0,_yK_=0;
      if(! (_yL_ < 0))
       {var i=_yK_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _yM_=i + 1 | 0;
          if(_yL_ !== i){var i=_yM_;continue}
          break}}
      return 0}
    function mapi$4(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_yI_=l - 1 | 0,_yH_=0;
      if(! (_yI_ < 0))
       {var i=_yH_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _yJ_=i + 1 | 0;
          if(_yI_ !== i){var i=_yJ_;continue}
          break}}
      return r}
    function fold_left$4(f,x,a)
     {var r=[0,x],_yF_=a.length - 1 - 1 | 0,_yE_=0;
      if(! (_yF_ < 0))
       {var i=_yE_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _yG_=i + 1 | 0;
          if(_yF_ !== i){var i=_yG_;continue}
          break}}
      return r[1]}
    function fold_right$3(f,a,x)
     {var r=[0,x],_yC_=a.length - 1 - 1 | 0;
      if(! (_yC_ < 0))
       {var i=_yC_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _yD_=i - 1 | 0;
          if(0 !== i){var i=_yD_;continue}
          break}}
      return r[1]}
    function exists$4(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$4(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$1(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_float_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function mem_ieee(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x == a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom$0=[248,cst_Stdlib_Float_Array_Bottom,caml_fresh_oo_id(0)];
    function sort$0(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {if
           (caml_call2
             (cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))
            <
            0)
           x[1] = i31 + 1 | 0;
          if
           (caml_call2
             (cmp,caml_array_get(a,x[1]),caml_array_get(a,i31 + 2 | 0))
            <
            0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if
         ((i31 + 1 | 0)
          <
          l
          &&
          !
          (0
           <=
           caml_call2(cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))))
         return i31 + 1 | 0;
        if(i31 < l)return i31;
        throw [0,Bottom$0,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_array_get(a,j),e))
           {caml_array_set(a,i$0,caml_array_get(a,j));var i$0=j;continue}
          return caml_array_set(a,i$0,e)}}
      function trickle(l,i,e)
       {try
         {var _yB_=trickledown(l,i,e);return _yB_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0)
           {var i$0=exn[2];return caml_array_set(a,i$0,e)}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0);
          caml_array_set(a,i$0,caml_array_get(a,i$1));
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _yA_=bubbledown(l,i);return _yA_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_yu_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_yu_ < 0))
       {var i$2=_yu_;
        for(;;)
         {trickle(l,i$2,caml_array_get(a,i$2));
          var _yz_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_yz_;continue}
          break}}
      var _yv_=l - 1 | 0;
      if(! (_yv_ < 2))
       {var i$0=_yv_;
        a:
        for(;;)
         {var e$0=caml_array_get(a,i$0);
          caml_array_set(a,i$0,caml_array_get(a,0));
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_J_];
            if(0 <= caml_call2(cmp,caml_array_get(a,father),e$0))
             caml_array_set(a,i,e$0);
            else
             {caml_array_set(a,i,caml_array_get(a,father));
              if(0 < father){var i=father;continue}
              caml_array_set(a,0,e$0)}
            var _yy_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_yy_;continue a}
            break}
          break}}
      var _yw_=1 < l?1:0;
      if(_yw_)
       {var e=caml_array_get(a,1);
        caml_array_set(a,1,caml_array_get(a,0));
        var _yx_=caml_array_set(a,0,e)}
      else
       var _yx_=_yw_;
      return _yx_}
    function stable_sort(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_array_get(src2,src2ofs),
         s1$1=caml_array_get(a,src1ofs),
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_array_set(dst,d,s2);
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_array_get(src2,i2$0),
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$2(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_array_set(dst,d,s1);
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_array_get(a,i1$0),
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$2(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _ys_=len - 1 | 0,_yr_=0;
        if(! (_ys_ < 0))
         {var i=_yr_;
          a:
          for(;;)
           {var
             e=caml_array_get(a,srcofs + i | 0),
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if
               (dstofs
                <=
                j[1]
                &&
                0
                <
                caml_call2(cmp,caml_array_get(dst,j[1]),e))
               {caml_array_set(dst,j[1] + 1 | 0,caml_array_get(dst,j[1]));
                j[1] += -1;
                continue}
              caml_array_set(dst,j[1] + 1 | 0,e);
              var _yt_=i + 1 | 0;
              if(_ys_ !== i){var i=_yt_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var l1=l / 2 | 0,l2=l - l1 | 0,t=caml_floatarray_create(l2);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$5(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_yp_=i + 1 | 0;
          return [0,x,function(_yq_){return aux(_yp_,_yq_)}]}
        return 0}
      var _yn_=0;
      return function(_yo_){return aux(_yn_,_yo_)}}
    function to_seqi$2(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_yl_=i + 1 | 0;
          return [0,[0,i,x],function(_ym_){return aux(_yl_,_ym_)}]}
        return 0}
      var _yj_=0;
      return function(_yk_){return aux(_yj_,_yk_)}}
    function of_seq$3(i$2)
     {var
       _yi_=0,
       param$0=fold_left(function(acc,x){return [0,x,acc]},_yi_,i$2),
       len=length$1(param$0),
       a=caml_floatarray_create(len),
       i$1=len - 1 | 0,
       i=i$1,
       param=param$0;
      for(;;)
       {if(param)
         {var tl=param[2],hd=param[1];
          a[1 + i] = hd;
          var i$0=i - 1 | 0,i=i$0,param=tl;
          continue}
        return a}}
    function map_to_array(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_yg_=l - 1 | 0,_yf_=1;
      if(! (_yg_ < 1))
       {var i=_yf_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _yh_=i + 1 | 0;
          if(_yg_ !== i){var i=_yh_;continue}
          break}}
      return r}
    function map_from_array(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_yd_=l - 1 | 0,_yc_=0;
      if(! (_yd_ < 0))
       {var i=_yc_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _ye_=i + 1 | 0;
          if(_yd_ !== i){var i=_ye_;continue}
          break}}
      return r}
    var
     _K_=caml_floatarray_create,
     _L_=caml_array_set,
     _M_=caml_array_get,
     _N_=
      [0,
       function(_yb_){return _yb_.length - 1},
       _M_,
       _L_,
       make$2,
       _K_,
       init$4,
       append$2,
       concat$3,
       sub$2,
       copy$2,
       fill$1,
       blit$2,
       to_list$2,
       of_list$0,
       iter$6,
       iteri$4,
       map$8,
       mapi$4,
       fold_left$4,
       fold_right$3,
       iter2$2,
       map2$2,
       for_all$4,
       exists$4,
       mem$1,
       mem_ieee,
       sort$0,
       stable_sort,
       stable_sort,
       to_seq$5,
       to_seqi$2,
       of_seq$3,
       map_to_array,
       map_from_array],
     _O_=caml_floatarray_create,
     _P_=caml_array_set,
     _Q_=caml_array_get,
     Stdlib_Float=
      [0,
       zero$0,
       one$0,
       minus_one$0,
       succ$0,
       pred$0,
       infinity,
       neg_infinity,
       nan,
       pi,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal$11,
       min$2,
       max$2,
       min_max,
       min_num,
       max_num,
       min_max_num,
       hash$0,
       [0,
        function(_ya_){return _ya_.length - 1},
        _Q_,
        _P_,
        make$2,
        _O_,
        init$4,
        append$2,
        concat$3,
        sub$2,
        copy$2,
        fill$1,
        blit$2,
        to_list$2,
        of_list$0,
        iter$6,
        iteri$4,
        map$8,
        mapi$4,
        fold_left$4,
        fold_right$3,
        iter2$2,
        map2$2,
        for_all$4,
        exists$4,
        mem$1,
        mem_ieee,
        sort$0,
        stable_sort,
        stable_sort,
        to_seq$5,
        to_seqi$2,
        of_seq$3,
        map_to_array,
        map_from_array],
       _N_];
    caml_register_global(795,Stdlib_Float,"Stdlib__Float");
    var zero$1=0,one$1=1,minus_one$1=-1;
    function succ$1(n){return n + 1 | 0}
    function pred$1(n){return n - 1 | 0}
    function abs$1(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$1=-2147483648,max_int$1=2147483647;
    function lognot$0(n){return n ^ -1}
    function unsigned_to_int(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$3(n){return caml_format_int(cst_d,n)}
    function of_string_opt$0(s)
     {try
       {var _x__=[0,caml_int_of_string(s)];return _x__}
      catch(_x$_)
       {_x$_ = caml_wrap_exception(_x$_);
        if(_x$_[1] === Failure)return 0;
        throw _x$_}}
    function compare$11(x,y){return caml_int_compare(x,y)}
    function equal$12(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function min$3(x,y){return caml_lessequal(x,y)?x:y}
    function max$3(x,y){return caml_greaterequal(x,y)?x:y}
    function unsigned_div(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare(n,d)?one$1:zero$1;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare(r,d)?q + 1 | 0:q}
    function unsigned_rem(n,d){return n - caml_mul(unsigned_div(n,d),d) | 0}
    var
     Stdlib_Int32=
      [0,
       zero$1,
       one$1,
       minus_one$1,
       unsigned_div,
       unsigned_rem,
       succ$1,
       pred$1,
       abs$1,
       max_int$1,
       min_int$1,
       lognot$0,
       unsigned_to_int,
       of_string_opt$0,
       to_string$3,
       compare$11,
       unsigned_compare,
       equal$12,
       min$3,
       max$3];
    caml_register_global(796,Stdlib_Int32,"Stdlib__Int32");
    function succ$2(n){return caml_int64_add(n,_R_)}
    function pred$2(n){return caml_int64_sub(n,_S_)}
    function abs$2(n)
     {return caml_greaterequal(n,_T_)?n:runtime.caml_int64_neg(n)}
    function lognot$1(n){return runtime.caml_int64_xor(n,_U_)}
    var max_int$3=caml_int64_of_int32(2147483647);
    function unsigned_to_int$0(n)
     {if
       (!
        (0 < caml_int64_compare(zero$2,n))
        &&
        !
        (0 < caml_int64_compare(n,max_int$3)))
       return [0,runtime.caml_int64_to_int32(n)];
      return 0}
    function to_string$4(n){return caml_int64_format(cst_d$0,n)}
    function of_string_opt$1(s)
     {try
       {var _x8_=[0,caml_int64_of_string(s)];return _x8_}
      catch(_x9_)
       {_x9_ = caml_wrap_exception(_x9_);
        if(_x9_[1] === Failure)return 0;
        throw _x9_}}
    function compare$12(x,y){return caml_int64_compare(x,y)}
    function equal$13(x,y){return 0 === caml_int64_compare(x,y)?1:0}
    function unsigned_compare$0(n,m)
     {return caml_int64_compare
              (caml_int64_sub(n,min_int$2),caml_int64_sub(m,min_int$2))}
    function min$4(x,y){return caml_lessequal(x,y)?x:y}
    function max$4(x,y){return caml_greaterequal(x,y)?x:y}
    function unsigned_div$0(n,d)
     {if(caml_lessthan(d,zero$2))
       return 0 <= unsigned_compare$0(n,d)?one$2:zero$2;
      var
       q=
        caml_int64_shift_left
         (runtime.caml_int64_div(caml_int64_shift_right_unsigne(n,1),d),1),
       r=caml_int64_sub(n,caml_int64_mul(q,d));
      return 0 <= unsigned_compare$0(r,d)?succ$2(q):q}
    function unsigned_rem$0(n,d)
     {return caml_int64_sub(n,caml_int64_mul(unsigned_div$0(n,d),d))}
    var
     Stdlib_Int64=
      [0,
       zero$2,
       one$2,
       minus_one$2,
       unsigned_div$0,
       unsigned_rem$0,
       succ$2,
       pred$2,
       abs$2,
       max_int$2,
       min_int$2,
       lognot$1,
       unsigned_to_int$0,
       of_string_opt$1,
       to_string$4,
       compare$12,
       unsigned_compare$0,
       equal$13,
       min$4,
       max$4];
    caml_register_global(797,Stdlib_Int64,"Stdlib__Int64");
    var zero$3=0,one$3=1,minus_one$3=-1;
    function succ$3(n){return n + 1 | 0}
    function pred$3(n){return n - 1 | 0}
    function abs$3(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$3=-2147483648,max_int$4=2147483647;
    function lognot$2(n){return n ^ -1}
    function unsigned_to_int$1(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$5(n){return caml_format_int(cst_d$1,n)}
    function of_string_opt$2(s)
     {try
       {var _x6_=[0,caml_int_of_string(s)];return _x6_}
      catch(_x7_)
       {_x7_ = caml_wrap_exception(_x7_);
        if(_x7_[1] === Failure)return 0;
        throw _x7_}}
    function compare$13(x,y){return caml_int_compare(x,y)}
    function equal$14(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare$1(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function min$5(x,y){return caml_lessequal(x,y)?x:y}
    function max$5(x,y){return caml_greaterequal(x,y)?x:y}
    function unsigned_div$1(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare$1(n,d)?one$3:zero$3;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare$1(r,d)?q + 1 | 0:q}
    function unsigned_rem$1(n,d)
     {return n - caml_mul(unsigned_div$1(n,d),d) | 0}
    var
     Stdlib_Nativeint=
      [0,
       zero$3,
       one$3,
       minus_one$3,
       unsigned_div$1,
       unsigned_rem$1,
       succ$3,
       pred$3,
       abs$3,
       match$1,
       max_int$4,
       min_int$3,
       lognot$2,
       unsigned_to_int$1,
       of_string_opt$2,
       to_string$5,
       compare$13,
       unsigned_compare$1,
       equal$14,
       min$5,
       max$5];
    caml_register_global(798,Stdlib_Nativeint,"Stdlib__Nativeint");
    function engine(tbl,state,buf)
     {var
       result=runtime.caml_lex_engine(tbl,state,buf),
       _x3_=0 <= result?1:0,
       _x4_=_x3_?buf[12] !== dummy_pos?1:0:_x3_;
      if(_x4_)
       {buf[11] = buf[12];
        var _x5_=buf[12];
        buf[12] = [0,_x5_[1],_x5_[2],_x5_[3],buf[4] + buf[6] | 0]}
      return result}
    function new_engine(tbl,state,buf)
     {var
       result=runtime.caml_new_lex_engine(tbl,state,buf),
       _x0_=0 <= result?1:0,
       _x1_=_x0_?buf[12] !== dummy_pos?1:0:_x0_;
      if(_x1_)
       {buf[11] = buf[12];
        var _x2_=buf[12];
        buf[12] = [0,_x2_[1],_x2_[2],_x2_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_function(opt,f)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _xM_=with_positions?zero_pos:dummy_pos,
       _xN_=with_positions?zero_pos:dummy_pos,
       aux_buffer=caml_create_bytes(512),
       _xO_=[0],
       _xP_=0,
       _xQ_=0,
       _xR_=0,
       _xS_=0,
       _xT_=0,
       _xU_=0,
       _xV_=0,
       _xW_=caml_create_bytes(1024);
      return [0,
              function(lexbuf)
               {var
                 read=
                  caml_call2(f,aux_buffer,caml_ml_bytes_length(aux_buffer)),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_bytes_length(lexbuf[2]))
                   blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min$1
                       (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_g);
                    var newbuf=caml_create_bytes(newlen);
                    blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_xY_=t.length - 1 - 1 | 0,_xX_=0;
                  if(! (_xY_ < 0))
                   {var i=_xX_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[1 + i];
                      if(0 <= v)caml_check_bound(t,i)[1 + i] = v - s | 0;
                      var _xZ_=i + 1 | 0;
                      if(_xY_ !== i){var i=_xZ_;continue}
                      break}}}
                blit(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _xW_,
              _xV_,
              _xU_,
              _xT_,
              _xS_,
              _xR_,
              _xQ_,
              _xP_,
              _xO_,
              _xN_,
              _xM_]}
    function from_channel(with_positions,ic)
     {return from_function
              (with_positions,function(buf,n){return input(ic,buf,0,n)})}
    function from_string$0(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _xB_=with_positions?zero_pos:dummy_pos,
       _xC_=with_positions?zero_pos:dummy_pos,
       _xD_=[0],
       _xE_=1,
       _xF_=0,
       _xG_=0,
       _xH_=0,
       _xI_=0,
       _xJ_=0,
       _xK_=caml_ml_string_length(s),
       _xL_=to_bytes(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _xL_,
              _xK_,
              _xJ_,
              _xI_,
              _xH_,
              _xG_,
              _xF_,
              _xE_,
              _xD_,
              _xC_,
              _xB_]}
    function set_position(lexbuf,position)
     {lexbuf[12] = [0,lexbuf[12][1],position[2],position[3],position[4]];
      lexbuf[4] = position[4];
      return 0}
    function set_filename(lexbuf,fname)
     {var _xA_=lexbuf[12];
      lexbuf[12] = [0,fname,_xA_[2],_xA_[3],_xA_[4]];
      return 0}
    function with_positions(lexbuf){return lexbuf[12] !== dummy_pos?1:0}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_opt(lexbuf,i1,i2)
     {if(0 <= i1){var len=i2 - i1 | 0;return [0,sub_string(lexbuf[2],i1,len)]}
      return 0}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    function sub_lexeme_char_opt(lexbuf,i)
     {return 0 <= i?[0,caml_bytes_get(lexbuf[2],i)]:0}
    function lexeme_char(lexbuf,i)
     {return caml_bytes_get(lexbuf[2],lexbuf[5] + i | 0)}
    function lexeme_start(lexbuf){return lexbuf[11][4]}
    function lexeme_end(lexbuf){return lexbuf[12][4]}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var
       lcp=lexbuf[12],
       _xy_=lcp !== dummy_pos?1:0,
       _xz_=_xy_?(lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]],0):_xy_;
      return _xz_}
    function flush_input(lb)
     {lb[6] = 0;
      lb[4] = 0;
      var lcp=lb[12];
      if(lcp !== dummy_pos)
       lb[12] = [0,lcp[1],zero_pos[2],zero_pos[3],zero_pos[4]];
      lb[3] = 0;
      return 0}
    var
     Stdlib_Lexing=
      [0,
       dummy_pos,
       from_channel,
       from_string$0,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
    caml_register_global(799,Stdlib_Lexing,"Stdlib__Lexing");
    var
     YYexit=[248,cst_Stdlib_Parsing_YYexit,caml_fresh_oo_id(0)],
     Parse_error=[248,cst_Stdlib_Parsing_Parse_error,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function grow_stacks(param)
     {var
       oldsize=env[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,dummy_pos),
       new_end=caml_make_vect(newsize,dummy_pos);
      blit$1(env[1],0,new_s,0,oldsize);
      env[1] = new_s;
      blit$1(env[2],0,new_v,0,oldsize);
      env[2] = new_v;
      blit$1(env[3],0,new_start,0,oldsize);
      env[3] = new_start;
      blit$1(env[4],0,new_end,0,oldsize);
      env[4] = new_end;
      env[5] = newsize;
      return 0}
    function clear_parser(param)
     {fill$0(env[2],0,env[5],0);env[8] = 0;return 0}
    var current_lookahead_fun=[0,function(param){return 0}];
    function yyparse(tables,start,lexer,lexbuf)
     {var
       init_asp=env[11],
       init_sp=env[14],
       init_stackbase=env[6],
       init_state=env[15],
       init_curr_char=env[7],
       init_lval=env[8],
       init_errflag=env[16];
      env[6] = env[14] + 1 | 0;
      env[7] = start;
      env[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,env,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             env[9] = lexbuf[11];
             env[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:grow_stacks(0);var cmd=2,arg=0;continue;
            case 3:grow_stacks(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _xs_=env[13],
                _xt_=
                 caml_call1(caml_check_bound(tables[1],_xs_)[1 + _xs_],env),
                _xu_=4,
                arg$1=_xt_,
                cmd$0=_xu_}
             catch(_xx_)
              {_xx_ = caml_wrap_exception(_xx_);
               if(_xx_ !== Parse_error)throw _xx_;
               var arg$1=0,cmd$0=5,_xv_=_xx_}
             var cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=env[7];
        env[11] = init_asp;
        env[14] = init_sp;
        env[6] = init_stackbase;
        env[15] = init_state;
        env[7] = init_curr_char;
        env[8] = init_lval;
        env[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        current_lookahead_fun[1]
        =
        function(tok)
         {if(is_block(tok))
           {var _xw_=caml_obj_tag(tok);
            return caml_check_bound(tables[3],_xw_)[1 + _xw_] === curr_char
                    ?1
                    :0}
          return caml_check_bound(tables[2],tok)[1 + tok] === curr_char?1:0};
        throw exn}}
    function peek_val(env,n)
     {var _xr_=env[11] - n | 0;return caml_check_bound(env[2],_xr_)[1 + _xr_]}
    function symbol_start_pos(param)
     {var i=env[12];
      for(;;)
       {if(0 < i)
         {var
           _xo_=(env[11] - i | 0) + 1 | 0,
           st=caml_check_bound(env[3],_xo_)[1 + _xo_],
           _xp_=(env[11] - i | 0) + 1 | 0,
           en=caml_check_bound(env[4],_xp_)[1 + _xp_];
          if(caml_notequal(st,en))return st;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        var _xq_=env[11];
        return caml_check_bound(env[4],_xq_)[1 + _xq_]}}
    function symbol_end_pos(param)
     {var _xn_=env[11];return caml_check_bound(env[4],_xn_)[1 + _xn_]}
    function rhs_start_pos(n)
     {var _xm_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[3],_xm_)[1 + _xm_]}
    function rhs_end_pos(n)
     {var _xl_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[4],_xl_)[1 + _xl_]}
    function symbol_start(param){return symbol_start_pos(0)[4]}
    function symbol_end(param){return symbol_end_pos(0)[4]}
    function rhs_start(n){return rhs_start_pos(n)[4]}
    function rhs_end(n){return rhs_end_pos(n)[4]}
    function is_current_lookahead(tok)
     {return caml_call1(current_lookahead_fun[1],tok)}
    function parse_error(param){return 0}
    var
     Stdlib_Parsing=
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       function(_xk_){return runtime.caml_set_parser_trace(_xk_)},
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    caml_register_global(800,Stdlib_Parsing,"Stdlib__Parsing");
    var
     Stdlib_Set=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[4];return h}return 0}
         function create(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _xj_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_xj_]}
         function bal(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[3],lv=l[2],ll=l[1],_xe_=height(lr);
               if(_xe_ <= height(ll))return create(ll,lv,create(lr,v,r));
               if(lr)
                {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_xf_=create(lrr,v,r);
                 return create(create(ll,lv,lrl),lrv,_xf_)}
               return invalid_arg(cst_Set_bal)}
             return invalid_arg(cst_Set_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[3],rv=r[2],rl=r[1],_xg_=height(rl);
               if(_xg_ <= height(rr))return create(create(l,v,rl),rv,rr);
               if(rl)
                {var rlr=rl[3],rlv=rl[2],rll=rl[1],_xh_=create(rlr,rv,rr);
                 return create(create(l,v,rll),rlv,_xh_)}
               return invalid_arg(cst_Set_bal$1)}
             return invalid_arg(cst_Set_bal$2)}
           var _xi_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_xi_]}
         function add(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return t;
             if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=add(x,l);
             return l === ll?t:bal(ll,v,r)}
           return [0,0,x,0,1]}
         function singleton(x){return [0,0,x,0,1]}
         function add_min_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(add_min_element(x,l),v,r)}
           return singleton(x)}
         function add_max_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(l,v,add_max_element(x,r))}
           return singleton(x)}
         function join(l,v,r)
          {if(l)
            {if(r)
              {var
                rh=r[4],
                rr=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[4],
                lr=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,join(lr,v,r))
                       :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
             return add_max_element(v,l)}
           return add_min_element(v,r)}
         function min_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _xd_=param$0[1];
               if(_xd_){var param$0=_xd_;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function min_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _xc_=param$0[1];
               if(_xc_){var param$0=_xc_;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function max_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function max_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function remove_min_elt(param)
          {if(param)
            {var _xb_=param[1];
             if(_xb_)
              {var r=param[3],v=param[2];return bal(remove_min_elt(_xb_),v,r)}
             var r$0=param[3];
             return r$0}
           return invalid_arg(cst_Set_remove_min_elt)}
         function concat(t1,t2)
          {if(t1)
            {if(t2)
              {var _xa_=remove_min_elt(t2);return join(t1,min_elt(t2),_xa_)}
             return t1}
           return t2}
         function split(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,1,r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,r)]}
           return _V_}
         var empty=0;
         function is_empty(param){return param?0:1}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _w$_=0 === c?1:0;
               if(_w$_)return _w$_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function remove(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {if(l)
                {if(r)
                  {var _w__=remove_min_elt(r);return bal(l,min_elt(r),_w__)}
                 return l}
               return r}
             if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=remove(x,l);
             return l === ll?t:bal(ll,v,r)}
           return 0}
         function union(s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[4],
                r2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[4],
                r1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {if(1 === h2)return add(v2,s1);
                 var
                  match=split(v1,s2),
                  r2$0=match[3],
                  l2$0=match[1],
                  _w8_=union(r1,r2$0);
                 return join(union(l1,l2$0),v1,_w8_)}
               if(1 === h1)return add(v1,s2);
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                l1$0=match$0[1],
                _w9_=union(r1$0,r2);
               return join(union(l1$0,l2),v2,_w9_)}
             return s1}
           return s2}
         function inter(s1,s2)
          {if(s1)
            {if(s2)
              {var r1=s1[3],v1=s1[2],l1=s1[1],_w4_=split(v1,s2),_w5_=_w4_[1];
               if(_w4_[2])
                {var r2=_w4_[3],_w6_=inter(r1,r2);
                 return join(inter(l1,_w5_),v1,_w6_)}
               var r2$0=_w4_[3],_w7_=inter(r1,r2$0);
               return concat(inter(l1,_w5_),_w7_)}
             return 0}
           return 0}
         function split_bis(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return 0;
             if(0 <= c)
              {var match=split_bis(x,r);
               if(match)
                {var rr=match[2],lr=match[1];return [0,join(l,v,lr),rr]}
               return 0}
             var match$0=split_bis(x,l);
             if(match$0)
              {var rl=match$0[2],ll=match$0[1];
               return [0,
                       ll,
                       function(param){return join(caml_call1(rl,0),v,r)}]}
             return 0}
           return [0,0,function(param){return 0}]}
         function disjoint(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0 && s2$0)
              {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
               if(s1$0 === s2$0)return 0;
               var match=split_bis(v1,s2$0);
               if(match)
                {var r2=match[2],l2=match[1],_w3_=disjoint(l1,l2);
                 if(_w3_)
                  {var s2$1=caml_call1(r2,0),s1$0=r1,s2$0=s2$1;continue}
                 return _w3_}
               return 0}
             return 1}}
         function diff(s1,s2)
          {if(s1)
            {if(s2)
              {var r1=s1[3],v1=s1[2],l1=s1[1],_wZ_=split(v1,s2),_w0_=_wZ_[1];
               if(_wZ_[2])
                {var r2=_wZ_[3],_w1_=diff(r1,r2);
                 return concat(diff(l1,_w0_),_w1_)}
               var r2$0=_wZ_[3],_w2_=diff(r1,r2$0);
               return join(diff(l1,_w0_),v1,_w2_)}
             return s1}
           return 0}
         function cons_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                s$1=s$0[1],
                e$1=[0,v,r,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(s1,s2)
          {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[3],
                  r2=e2[2],
                  v2=e2[1],
                  e1$0=e1[3],
                  r1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var
                    e2$1=cons_enum(r2,e2$0),
                    e1$1=cons_enum(r1,e1$0),
                    e1=e1$1,
                    e2=e2$1;
                   continue}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
         function subset(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0)
              {if(s2$0)
                {var
                  r2=s2$0[3],
                  v2=s2$0[2],
                  l2=s2$0[1],
                  r1=s1$0[3],
                  v1=s1$0[2],
                  l1=s1$0[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var _wW_=subset(l1,l2);
                   if(_wW_){var s1$0=r1,s2$0=r2;continue}
                   return _wW_}
                 if(0 <= c)
                  {var _wX_=subset([0,0,v1,r1,0],r2);
                   if(_wX_){var s1$0=l1;continue}
                   return _wX_}
                 var _wY_=subset([0,l1,v1,0,0],l2);
                 if(_wY_){var s1$0=r1;continue}
                 return _wY_}
               return 0}
             return 1}}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call1(f,v);
               var param$0=r;
               continue}
             return 0}}
         function fold(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                l=s$0[1],
                accu$1=caml_call2(f,v,fold(f,l,accu$0)),
                s$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _wT_=caml_call1(p,v);
               if(_wT_)
                {var _wU_=for_all(p,l);
                 if(_wU_){var param$0=r;continue}
                 var _wV_=_wU_}
               else
                var _wV_=_wT_;
               return _wV_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _wQ_=caml_call1(p,v);
               if(_wQ_)
                var _wR_=_wQ_;
               else
                {var _wS_=exists(p,l);
                 if(! _wS_){var param$0=r;continue}
                 var _wR_=_wS_}
               return _wR_}
             return 0}}
         function filter(p,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=filter(p,l),
              pv=caml_call1(p,v),
              r$0=filter(p,r);
             if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pv=caml_call1(p,v),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pv){var _wO_=concat(lf,rf);return [0,join(lt,v,rt),_wO_]}
             var _wP_=join(lf,v,rf);
             return [0,concat(lt,rt),_wP_]}
           return _W_}
         function cardinal(param)
          {if(param)
            {var r=param[3],l=param[1],_wN_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _wN_ | 0}
           return 0}
         function elements_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,v,elements_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function elements(s){return elements_aux(0,s)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return v;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return v0}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return v0}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,v];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function try_join(l,v,r)
          {var switch$0=0;
           if(0 !== l)
            {var _wM_=max_elt(l);
             if(0 <= caml_call2(Ord[1],_wM_,v))switch$0 = 1}
           if(! switch$0)
            {var switch$1=0;
             if(0 !== r)
              {var _wL_=min_elt(r);
               if(0 <= caml_call2(Ord[1],v,_wL_))switch$1 = 1}
             if(! switch$1)return join(l,v,r)}
           return union(l,add(v,r))}
         function map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=map(f,l),
              v$0=caml_call1(f,v),
              r$0=map(f,r);
             if(l === l$0 && v === v$0 && r === r$0)return t;
             return try_join(l$0,v$0,r$0)}
           return 0}
         function filter_map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              t1=filter_map(f,l),
              v$0=caml_call1(f,v),
              t2=filter_map(f,r);
             if(v$0)
              {var v$1=v$0[1];
               if(l === t1 && v === v$1 && r === t2)return t;
               return try_join(t1,v$1,t2)}
             if(t1)
              {if(t2)
                {var _wK_=remove_min_elt(t2);
                 return try_join(t1,min_elt(t2),_wK_)}
               return t1}
             return t2}
           return 0}
         function of_list(l)
          {if(l)
            {var _wz_=l[2],_wA_=l[1];
             if(_wz_)
              {var _wB_=_wz_[2],_wC_=_wz_[1];
               if(_wB_)
                {var _wD_=_wB_[2],_wE_=_wB_[1];
                 if(_wD_)
                  {var _wF_=_wD_[2],_wG_=_wD_[1];
                   if(_wF_)
                    {if(_wF_[2])
                      {var
                        l$0=sort_uniq(Ord[1],l),
                        sub=
                         function(n,l)
                          {if(! (3 < n >>> 0))
                            switch(n)
                             {case 0:return [0,0,l];
                              case 1:
                               if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                               break;
                              case 2:
                               if(l)
                                {var _wH_=l[2];
                                 if(_wH_)
                                  {var l$4=_wH_[2],x1=_wH_[1],x0$0=l[1];
                                   return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                               break;
                              default:
                               if(l)
                                {var _wI_=l[2];
                                 if(_wI_)
                                  {var _wJ_=_wI_[2];
                                   if(_wJ_)
                                    {var l$5=_wJ_[2],x2=_wJ_[1],x1$0=_wI_[1],x0$1=l[1];
                                     return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                           var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                           if(l$0)
                            {var
                              l$1=l$0[2],
                              mid=l$0[1],
                              match$0=sub((n - nl | 0) - 1 | 0,l$1),
                              l$2=match$0[2],
                              right=match$0[1];
                             return [0,create(left,mid,right),l$2]}
                           throw [0,Assert_failure,_X_]};
                       return sub(length$1(l$0),l$0)[1]}
                     var x4=_wF_[1];
                     return add(x4,add(_wG_,add(_wE_,add(_wC_,singleton(_wA_)))))}
                   return add(_wG_,add(_wE_,add(_wC_,singleton(_wA_))))}
                 return add(_wE_,add(_wC_,singleton(_wA_)))}
               return add(_wC_,singleton(_wA_))}
             return singleton(_wA_)}
           return empty}
         function add_seq(i,m)
          {return fold_left(function(s,x){return add(x,s)},m,i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[3],t=c[2],x=c[1],_wx_=cons_enum(t,rest);
             return [0,x,function(_wy_){return seq_of_enum(_wx_,_wy_)}]}
           return 0}
         function to_seq(c)
          {var _wv_=cons_enum(c,0);
           return function(_ww_){return seq_of_enum(_wv_,_ww_)}}
         function snoc_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                s$1=s$0[3],
                v=s$0[2],
                l=s$0[1],
                e$1=[0,v,l,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function rev_seq_of_enum(c,param)
          {if(c)
            {var rest=c[3],t=c[2],x=c[1],_wt_=snoc_enum(t,rest);
             return [0,x,function(_wu_){return rev_seq_of_enum(_wt_,_wu_)}]}
           return 0}
         function to_rev_seq(c)
          {var _wr_=snoc_enum(c,0);
           return function(_ws_){return rev_seq_of_enum(_wr_,_ws_)}}
         function to_seq_from(low,s)
          {var s$0=s,c=0;
           for(;;)
            {if(s$0)
              {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
                 var s$0=r;
                 continue}
               var _wp_=[0,v,r,c]}
             else
              var _wp_=c;
             return function(_wq_){return seq_of_enum(_wp_,_wq_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 singleton,
                 remove,
                 union,
                 inter,
                 disjoint,
                 diff,
                 compare,
                 equal,
                 subset,
                 iter,
                 map,
                 fold,
                 for_all,
                 exists,
                 filter,
                 filter_map,
                 partition,
                 cardinal,
                 elements,
                 min_elt,
                 min_elt_opt,
                 max_elt,
                 max_elt_opt,
                 min_elt,
                 min_elt_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 of_list,
                 to_seq_from,
                 to_seq,
                 to_rev_seq,
                 add_seq,
                 of_seq]}];
    caml_register_global(801,Stdlib_Set,"Stdlib__Set");
    var
     Stdlib_Map=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[5];return h}return 0}
         function create(l,x,d,r)
          {var hl=height(l),hr=height(r),_wo_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_wo_]}
         function singleton(x,d){return [0,0,x,d,0,1]}
         function bal(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_wj_=height(lr);
               if(_wj_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
               if(lr)
                {var
                  lrr=lr[4],
                  lrd=lr[3],
                  lrv=lr[2],
                  lrl=lr[1],
                  _wk_=create(lrr,x,d,r);
                 return create(create(ll,lv,ld,lrl),lrv,lrd,_wk_)}
               return invalid_arg(cst_Map_bal)}
             return invalid_arg(cst_Map_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_wl_=height(rl);
               if(_wl_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
               if(rl)
                {var
                  rlr=rl[4],
                  rld=rl[3],
                  rlv=rl[2],
                  rll=rl[1],
                  _wm_=create(rlr,rv,rd,rr);
                 return create(create(l,x,d,rll),rlv,rld,_wm_)}
               return invalid_arg(cst_Map_bal$1)}
             return invalid_arg(cst_Map_bal$2)}
           var _wn_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_wn_]}
         var empty=0;
         function is_empty(param){return param?0:1}
         function add(x,data,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return d === data?m:[0,l,x,data,r,h];
             if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=add(x,data,l);
             return l === ll?m:bal(ll,v,d,r)}
           return [0,0,x,data,0,1]}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return d;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0,d0]}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0,d0]}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,d];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _wi_=0 === c?1:0;
               if(_wi_)return _wi_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function min_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _wh_=param$0[1];
               if(_wh_){var param$0=_wh_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function min_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _wg_=param$0[1];
               if(_wg_){var param$0=_wg_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function max_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function max_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function remove_min_binding(param)
          {if(param)
            {var _wf_=param[1];
             if(_wf_)
              {var r=param[4],d=param[3],v=param[2];
               return bal(remove_min_binding(_wf_),v,d,r)}
             var r$0=param[4];
             return r$0}
           return invalid_arg(cst_Map_remove_min_elt)}
         function _vQ_(t1,t2)
          {if(t1)
            {if(t2)
              {var match=min_binding(t2),d=match[2],x=match[1];
               return bal(t1,x,d,remove_min_binding(t2))}
             return t1}
           return t2}
         function remove(x,m)
          {if(m)
            {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return _vQ_(l,r);
             if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=remove(x,l);
             return l === ll?m:bal(ll,v,d,r)}
           return 0}
         function update(x,f,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {var match=caml_call1(f,[0,d]);
               if(match)
                {var data=match[1];return d === data?m:[0,l,x,data,r,h]}
               return _vQ_(l,r)}
             if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=update(x,f,l);
             return l === ll?m:bal(ll,v,d,r)}
           var match$0=caml_call1(f,0);
           if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
           return 0}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call2(f,v,d);
               var param$0=r;
               continue}
             return 0}}
         function map(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=map(f,l),
              d$0=caml_call1(f,d),
              r$0=map(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function mapi(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=mapi(f,l),
              d$0=caml_call2(f,v,d),
              r$0=mapi(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function fold(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
                m$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _wc_=caml_call2(p,v,d);
               if(_wc_)
                {var _wd_=for_all(p,l);
                 if(_wd_){var param$0=r;continue}
                 var _we_=_wd_}
               else
                var _we_=_wc_;
               return _we_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _v$_=caml_call2(p,v,d);
               if(_v$_)
                var _wa_=_v$_;
               else
                {var _wb_=exists(p,l);
                 if(! _wb_){var param$0=r;continue}
                 var _wa_=_wb_}
               return _wa_}
             return 0}}
         function add_min_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(add_min_binding(k,x,l),v,d,r)}
           return singleton(k,x)}
         function add_max_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(l,v,d,add_max_binding(k,x,r))}
           return singleton(k,x)}
         function join(l,v,d,r)
          {if(l)
            {if(r)
              {var
                rh=r[5],
                rr=r[4],
                rd=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[5],
                lr=l[4],
                ld=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,ld,join(lr,v,d,r))
                       :(lh + 2 | 0) < rh
                         ?bal(join(l,v,d,rl),rv,rd,rr)
                         :create(l,v,d,r)}
             return add_max_binding(v,d,l)}
           return add_min_binding(v,d,r)}
         function concat(t1,t2)
          {if(t1)
            {if(t2)
              {var match=min_binding(t2),d=match[2],x=match[1];
               return join(t1,x,d,remove_min_binding(t2))}
             return t1}
           return t2}
         function concat_or_join(t1,v,d,t2)
          {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
         function split(x,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,[0,d],r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,d,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,d,r)]}
           return _Y_}
         function merge(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(height(s2) <= h1)
              {var
                match=split(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _v7_=merge(f,r1,r2),
                _v8_=caml_call3(f,v1,[0,d1],d2);
               return concat_or_join(merge(f,l1,l2),v1,_v8_,_v7_)}}
           else
            if(! s2)return 0;
           if(s2)
            {var
              r2$0=s2[4],
              d2$0=s2[3],
              v2=s2[2],
              l2$0=s2[1],
              match$0=split(v2,s1),
              r1$0=match$0[3],
              d1$0=match$0[2],
              l1$0=match$0[1],
              _v9_=merge(f,r1$0,r2$0),
              _v__=caml_call3(f,v2,d1$0,[0,d2$0]);
             return concat_or_join(merge(f,l1$0,l2$0),v2,_v__,_v9_)}
           throw [0,Assert_failure,_Z_]}
         function union(f,s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[5],
                r2=s2[4],
                d2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[5],
                r1=s1[4],
                d1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {var
                  match=split(v1,s2),
                  r2$0=match[3],
                  d2$0=match[2],
                  l2$0=match[1],
                  l=union(f,l1,l2$0),
                  r=union(f,r1,r2$0);
                 if(d2$0)
                  {var d2$1=d2$0[1];
                   return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
                 return join(l,v1,d1,r)}
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                d1$0=match$0[2],
                l1$0=match$0[1],
                l$0=union(f,l1$0,l2),
                r$0=union(f,r1$0,r2);
               if(d1$0)
                {var d1$1=d1$0[1];
                 return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
               return join(l$0,v2,d2,r$0)}
             var s=s1}
           else
            var s=s2;
           return s}
         function filter(p,m)
          {if(m)
            {var
              r=m[4],
              d=m[3],
              v=m[2],
              l=m[1],
              l$0=filter(p,l),
              pvd=caml_call2(p,v,d),
              r$0=filter(p,r);
             if(pvd)
              {if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function filter_map(f,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=filter_map(f,l),
              fvd=caml_call2(f,v,d),
              r$0=filter_map(f,r);
             if(fvd){var d$0=fvd[1];return join(l$0,v,d$0,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pvd=caml_call2(p,v,d),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pvd){var _v5_=concat(lf,rf);return [0,join(lt,v,d,rt),_v5_]}
             var _v6_=join(lf,v,d,rf);
             return [0,concat(lt,rt),_v6_]}
           return ___}
         function cons_enum(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                m$1=m$0[1],
                e$1=[0,v,d,r,e$0],
                m$0=m$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var c$0=caml_call2(cmp,d1,d2);
                   if(0 === c$0)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   return c$0}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  _v2_=0 === caml_call2(Ord[1],v1,v2)?1:0;
                 if(_v2_)
                  {var _v3_=caml_call2(cmp,d1,d2);
                   if(_v3_)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   var _v4_=_v3_}
                 else
                  var _v4_=_v2_;
                 return _v4_}
               return 0}
             return e2?0:1}}
         function cardinal(param)
          {if(param)
            {var r=param[4],l=param[1],_v1_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _v1_ | 0}
           return 0}
         function bindings_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function bindings(s){return bindings_aux(0,s)}
         function add_seq(i,m)
          {return fold_left
                   (function(m,param)
                     {var v=param[2],k=param[1];return add(k,v,m)},
                    m,
                    i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[4],t=c[3],v=c[2],k=c[1],_vZ_=cons_enum(t,rest);
             return [0,[0,k,v],function(_v0_){return seq_of_enum(_vZ_,_v0_)}]}
           return 0}
         function to_seq(m)
          {var _vX_=cons_enum(m,0);
           return function(_vY_){return seq_of_enum(_vX_,_vY_)}}
         function snoc_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                s$1=s$0[4],
                d=s$0[3],
                v=s$0[2],
                l=s$0[1],
                e$1=[0,v,d,l,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function rev_seq_of_enum(c,param)
          {if(c)
            {var rest=c[4],t=c[3],v=c[2],k=c[1],_vV_=snoc_enum(t,rest);
             return [0,
                     [0,k,v],
                     function(_vW_){return rev_seq_of_enum(_vV_,_vW_)}]}
           return 0}
         function to_rev_seq(c)
          {var _vT_=snoc_enum(c,0);
           return function(_vU_){return rev_seq_of_enum(_vT_,_vU_)}}
         function to_seq_from(low,m)
          {var m$0=m,c=0;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
                 var m$0=r;
                 continue}
               var _vR_=[0,v,d,r,c]}
             else
              var _vR_=c;
             return function(_vS_){return seq_of_enum(_vR_,_vS_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 update,
                 singleton,
                 remove,
                 merge,
                 union,
                 compare,
                 equal,
                 iter,
                 fold,
                 for_all,
                 exists,
                 filter,
                 filter_map,
                 partition,
                 cardinal,
                 bindings,
                 min_binding,
                 min_binding_opt,
                 max_binding,
                 max_binding_opt,
                 min_binding,
                 min_binding_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 map,
                 mapi,
                 to_seq,
                 to_rev_seq,
                 to_seq_from,
                 add_seq,
                 of_seq]}];
    caml_register_global(802,Stdlib_Map,"Stdlib__Map");
    var Empty=[248,cst_Stdlib_Stack_Empty,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function copy$3(s){return [0,s[1],s[2]]}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _vP_=s[1];
      if(_vP_)
       {var tl=_vP_[2],hd=_vP_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return hd}
      throw Empty}
    function pop_opt(s)
     {var _vO_=s[1];
      if(_vO_)
       {var tl=_vO_[2],hd=_vO_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top(s)
     {var _vN_=s[1];if(_vN_){var hd=_vN_[1];return hd}throw Empty}
    function top_opt(s)
     {var _vM_=s[1];if(_vM_){var hd=_vM_[1];return [0,hd]}return 0}
    function is_empty$0(s){return 0 === s[1]?1:0}
    function length$2(s){return s[2]}
    function iter$7(f,s){return iter$2(f,s[1])}
    function fold$2(f,acc,s){return fold_left$0(f,acc,s[1])}
    function to_seq$6(s){return to_seq$1(s[1])}
    function add_seq(q,i){return iter(function(x){return push(x,q)},i)}
    function of_seq$4(g){var s=create$0(0);add_seq(s,g);return s}
    var
     Stdlib_Stack=
      [0,
       Empty,
       create$0,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy$3,
       is_empty$0,
       length$2,
       iter$7,
       fold$2,
       to_seq$6,
       add_seq,
       of_seq$4];
    caml_register_global(803,Stdlib_Stack,"Stdlib__Stack");
    var Empty$0=[248,cst_Stdlib_Queue_Empty,caml_fresh_oo_id(0)];
    function create$1(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_vL_=q[3];
      return _vL_
              ?(q[1] = q[1] + 1 | 0,_vL_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek(q)
     {var _vK_=q[2];if(_vK_){var content=_vK_[1];return content}throw Empty$0}
    function peek_opt(q)
     {var _vJ_=q[2];if(_vJ_){var content=_vJ_[1];return [0,content]}return 0}
    function take$0(q)
     {var _vH_=q[2];
      if(_vH_)
       {var _vI_=_vH_[1];
        if(_vH_[2])
         {var next=_vH_[2];q[1] = q[1] - 1 | 0;q[2] = next;return _vI_}
        clear$0(q);
        return _vI_}
      throw Empty$0}
    function take_opt(q)
     {var _vF_=q[2];
      if(_vF_)
       {var _vG_=_vF_[1];
        if(_vF_[2])
         {var next=_vF_[2];q[1] = q[1] - 1 | 0;q[2] = next;return [0,_vG_]}
        clear$0(q);
        return [0,_vG_]}
      return 0}
    function copy$4(q)
     {var q_res=[0,q[1],0,0],prev=0,cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2],res=[0,content,0];
          if(prev)prev[2] = res;else q_res[2] = res;
          var prev=res,cell=next;
          continue}
        q_res[3] = prev;
        return q_res}}
    function is_empty$1(q){return 0 === q[1]?1:0}
    function length$3(q){return q[1]}
    function iter$8(f,q)
     {var cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2];
          caml_call1(f,content);
          var cell=next;
          continue}
        return 0}}
    function fold$3(f,accu$1,q)
     {var accu=accu$1,cell=q[2];
      for(;;)
       {if(cell)
         {var
           content=cell[1],
           next=cell[2],
           accu$0=caml_call2(f,accu,content),
           accu=accu$0,
           cell=next;
          continue}
        return accu}}
    function transfer(q1,q2)
     {var _vD_=0 < q1[1]?1:0;
      if(_vD_)
       {var _vE_=q2[3];
        return _vE_
                ?(q2[1]
                  =
                  q2[1]
                  +
                  q1[1]
                  |
                  0,
                  _vE_[2]
                  =
                  q1[2],
                  q2[3]
                  =
                  q1[3],
                  clear$0(q1))
                :(q2[1] = q1[1],q2[2] = q1[2],q2[3] = q1[3],clear$0(q1))}
      return _vD_}
    function to_seq$7(q)
     {function aux(c,param)
       {if(c)
         {var x=c[1],next=c[2];
          return [0,x,function(_vC_){return aux(next,_vC_)}]}
        return 0}
      var _vA_=q[2];
      return function(_vB_){return aux(_vA_,_vB_)}}
    function add_seq$0(q,i){return iter(function(x){return add(x,q)},i)}
    function of_seq$5(g){var q=create$1(0);add_seq$0(q,g);return q}
    var
     Stdlib_Queue=
      [0,
       Empty$0,
       create$1,
       add,
       add,
       take$0,
       take_opt,
       take$0,
       peek,
       peek_opt,
       peek,
       clear$0,
       copy$4,
       is_empty$1,
       length$3,
       iter$8,
       fold$3,
       transfer,
       to_seq$7,
       add_seq$0,
       of_seq$5];
    caml_register_global(804,Stdlib_Queue,"Stdlib__Queue");
    var
     Failure$0=[248,cst_Stdlib_Stream_Failure,caml_fresh_oo_id(0)],
     Error=[248,cst_Stdlib_Stream_Error,caml_fresh_oo_id(0)];
    function count(param)
     {if(param){var match=param[1],count=match[1];return count}return 0}
    function data(param)
     {if(param){var match=param[1],data=match[2];return data}return 0}
    function fill_buff(b)
     {b[3] = input(b[1],b[2],0,caml_ml_bytes_length(b[2]));b[4] = 0;return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_$_]}
           case 2:
            var
             f=d$0[1],
             _vw_=caml_obj_tag(f),
             d$1=250 === _vw_?f[1]:246 === _vw_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _vx_=d$0[1],_vy_=_vx_[1];
            if(_vy_)
             {var _vz_=_vy_[1];
              if(_vz_){var a$0=_vz_[1];_vx_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_vx_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _vx_[1] = _aa_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _vr_=s[2];
        if(typeof _vr_ === "number")
         return 0;
        else
         switch(_vr_[0])
          {case 0:var a=_vr_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_ab_]}
           case 2:
            var
             f=_vr_[1],
             _vs_=caml_obj_tag(f),
             _vt_=250 === _vs_?f[1]:246 === _vs_?force_lazy_block(f):f;
            s[2] = _vt_;
            continue;
           case 3:
            var _vu_=_vr_[1],_vv_=_vu_[1];
            if(_vv_){var a$1=_vv_[1];return a$1}
            var x=caml_call1(_vu_[2],s[1]);
            _vu_[1] = [0,x];
            return x;
           default:
            var b=_vr_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek$0(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk_data(s)
     {for(;;)
       {var _vp_=s[2];
        if(typeof _vp_ !== "number")
         switch(_vp_[0])
          {case 0:var d=_vp_[2];s[1] = s[1] + 1 | 0;s[2] = d;return 0;
           case 3:
            var _vq_=_vp_[1];
            if(_vq_[1]){s[1] = s[1] + 1 | 0;_vq_[1] = 0;return 0}
            break;
           case 4:
            var b=_vp_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :(s[1] = s[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
           }
        var match=peek_data(s);
        if(match)continue;
        return 0}}
    function junk(param)
     {if(param){var data=param[1];return junk_data(data)}return 0}
    function nget_data(n,s)
     {if(0 < n)
       {var match=peek_data(s);
        if(match)
         {var a=match[1];
          junk_data(s);
          var
           match$0=nget_data(n - 1 | 0,s),
           k=match$0[3],
           d=match$0[2],
           al=match$0[1];
          return [0,[0,a,al],[0,a,d],k + 1 | 0]}
        return [0,0,s[2],0]}
      return [0,0,s[2],0]}
    function npeek(n,param)
     {if(param)
       {var
         d$0=param[1],
         match=nget_data(n,d$0),
         len=match[3],
         d=match[2],
         al=match[1];
        d$0[1] = d$0[1] - len | 0;
        d$0[2] = d;
        return al}
      return 0}
    function next(s)
     {var match=peek$0(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function empty$2(s){var match=peek$0(s);if(match)throw Failure$0;return 0}
    function iter$9(f,strm)
     {for(;;)
       {var match=peek$0(strm);
        if(match){var a=match[1];junk(strm);caml_call1(f,a);continue}
        return 0}}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function of_list$1(l)
     {var _vo_=0;
      return [0,[0,0,fold_right(function(x,l){return [0,x,l]},l,_vo_)]]}
    function of_string(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function of_bytes$0(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_bytes_length(s)
                         ?(count[1]++,[0,caml_bytes_get(s,c)])
                         :0})}
    function of_channel(ic)
     {return [0,[0,0,[4,[0,ic,caml_create_bytes(4096),0,0]]]]}
    function iapp(i,s){var _vn_=data(s);return [0,[0,0,[1,data(i),_vn_]]]}
    function icons(i,s){return [0,[0,0,[0,i,data(s)]]]}
    function ising(i){return [0,[0,0,[0,i,0]]]}
    function lapp(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_vl_)
                  {var _vm_=data(s);return [1,data(caml_call1(f,0)),_vm_]}]]]]}
    function lcons(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_vj_)
                  {var _vk_=data(s);return [0,caml_call1(f,0),_vk_]}]]]]}
    function lsing(f)
     {return [0,[0,0,[2,[246,function(_vi_){return [0,caml_call1(f,0),0]}]]]]}
    var sempty=0;
    function slazy(f)
     {return [0,[0,0,[2,[246,function(_vh_){return data(caml_call1(f,0))}]]]]}
    function dump_data(f,param)
     {if(typeof param === "number")
       return print_string(cst_Sempty);
      else
       switch(param[0])
        {case 0:
          var d=param[2],a=param[1];
          print_string(cst_Scons);
          caml_call1(f,a);
          print_string(cst$7);
          dump_data(f,d);
          return print_string(cst$8);
         case 1:
          var d2=param[2],d1=param[1];
          print_string(cst_Sapp);
          dump_data(f,d1);
          print_string(cst$9);
          dump_data(f,d2);
          return print_string(cst$10);
         case 2:return print_string(cst_Slazy);
         case 3:return print_string(cst_Sgen);
         default:return print_string(cst_Sbuffio)}}
    function dump(f,s)
     {print_string(cst_count);
      print_int(count(s));
      print_string(cst_data);
      dump_data(f,data(s));
      print_string(cst$6);
      return print_newline(0)}
    var
     Stdlib_Stream=
      [0,
       Failure$0,
       Error,
       from,
       of_list$1,
       of_string,
       of_bytes$0,
       of_channel,
       iter$9,
       next,
       empty$2,
       peek$0,
       junk,
       count,
       npeek,
       iapp,
       icons,
       ising,
       lapp,
       lcons,
       lsing,
       sempty,
       slazy,
       dump];
    caml_register_global(805,Stdlib_Stream,"Stdlib__Stream");
    function create$2(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function to_bytes$0(b){return sub(b[1],0,b[2])}
    function sub$3(b,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((b[2] - len | 0) < ofs))
       return sub_string(b[1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function blit$3(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        !
        ((src[2] - len | 0) < srcoff)
        &&
        0
        <=
        dstoff
        &&
        !
        ((caml_ml_bytes_length(dst) - len | 0) < dstoff))
       return caml_blit_bytes(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function nth$0(b,ofs)
     {if(0 <= ofs && ! (b[2] <= ofs))return caml_bytes_unsafe_get(b[1],ofs);
      return invalid_arg(cst_Buffer_nth)}
    function length$4(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(cst_Buffer_add_cannot_grow_buf);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_ac_]}
        throw [0,Assert_failure,_ad_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    var uchar_utf_8_byte_length_max=4,uchar_utf_16_byte_length_max=4;
    function add_utf_8_uchar(b,u)
     {for(;;)
       {var pos=b[2];
        if(b[3] <= pos)resize(b,uchar_utf_8_byte_length_max);
        var n=set_utf_8_uchar(b[1],pos,u);
        if(0 === n){resize(b,uchar_utf_8_byte_length_max);continue}
        b[2] = pos + n | 0;
        return 0}}
    function add_utf_16be_uchar(b,u)
     {for(;;)
       {var pos=b[2];
        if(b[3] <= pos)resize(b,uchar_utf_16_byte_length_max);
        var n=set_utf_16be_uchar(b[1],pos,u);
        if(0 === n){resize(b,uchar_utf_16_byte_length_max);continue}
        b[2] = pos + n | 0;
        return 0}}
    function add_utf_16le_uchar(b,u)
     {for(;;)
       {var pos=b[2];
        if(b[3] <= pos)resize(b,uchar_utf_16_byte_length_max);
        var n=set_utf_16le_uchar(b[1],pos,u);
        if(0 === n){resize(b,uchar_utf_16_byte_length_max);continue}
        b[2] = pos + n | 0;
        return 0}}
    function add_substring(b,s,offset,len)
     {var _ve_=offset < 0?1:0;
      if(_ve_)
       var _vf_=_ve_;
      else
       var
        _vg_=len < 0?1:0,
        _vf_=_vg_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_vf_)invalid_arg(cst_Buffer_add_substring_add_s);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_subbytes(b,s,offset,len)
     {return add_substring(b,caml_string_of_bytes(s),offset,len)}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_bytes(b,s){return add_string(b,caml_string_of_bytes(s))}
    function add_buffer(b,bs){return add_subbytes(b,bs[1],0,bs[2])}
    function add_channel(b,ic,len)
     {var _vc_=len < 0?1:0,_vd_=_vc_ || (max_string_length < len?1:0);
      if(_vd_)invalid_arg(cst_Buffer_add_channel);
      if(b[3] < (b[2] + len | 0))resize(b,len);
      var already_read=0,ofs=b[2],to_read=len,_vb_=b[1];
      for(;;)
       {if(0 !== to_read)
         {var r=input(ic,_vb_,ofs,to_read);
          if(0 !== r)
           {var
             already_read$0=already_read + r | 0,
             ofs$0=ofs + r | 0,
             to_read$0=to_read - r | 0,
             already_read=already_read$0,
             ofs=ofs$0,
             to_read=to_read$0;
            continue}}
        if((b[2] + already_read | 0) <= b[3])
         {b[2] = b[2] + already_read | 0;
          if(already_read < len)throw End_of_file;
          return 0}
        throw [0,Assert_failure,_ae_]}}
    function output_buffer(oc,b){return output(oc,b[1],0,b[2])}
    function add_substitute(b,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {if(i$7 < lim$1)
         {var current=caml_string_get(s,i$7);
          if(36 === current)
           {if(92 === previous)
             {add_char(b,current);
              var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
              continue}
            var start=i$7 + 1 | 0;
            if(lim$1 <= start)throw Not_found;
            var opening=caml_string_get(s,start),switch$0=0;
            if(40 !== opening && 123 !== opening)
             {var i$6=start + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$6;
              for(;;)
               {if(lim$0 <= i$3)
                 var stop=lim$0;
                else
                 {var match=caml_string_get(s,i$3),switch$1=0;
                  if(91 <= match)
                   {if(97 <= match)
                     {if(! (123 <= match))switch$1 = 1}
                    else
                     if(95 === match)switch$1 = 1}
                  else
                   if(58 <= match)
                    {if(65 <= match)switch$1 = 1}
                   else
                    if(48 <= match)switch$1 = 1;
                  if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                  var stop=i$3}
                var match$0=[0,sub$0(s,start,stop - start | 0),stop];
                switch$0 = 1;
                break}}
            if(! switch$0)
             {var i$5=start + 1 | 0,k$2=0;
              if(40 === opening)
               var _u$_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_af_];var _u$_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=i$5;
              for(;;)
               {if(lim <= i)throw Not_found;
                if(caml_string_get(s,i) === opening)
                 {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                if(caml_string_get(s,i) !== _u$_)
                 {var i$2=i + 1 | 0,i=i$2;continue}
                if(0 !== k)
                 {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                var
                 match$0=
                  [0,sub$0(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(b,caml_call1(f,ident));
            var previous=32,i$7=next_i;
            continue}
          if(92 === previous)
           {add_char(b,92);
            add_char(b,current);
            var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
            continue}
          if(92 === current)
           {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
          add_char(b,current);
          var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
          continue}
        var _va_=92 === previous?1:0;
        return _va_?add_char(b,previous):_va_}}
    function truncate(b,len)
     {if(0 <= len && ! (b[2] < len)){b[2] = len;return 0}
      return invalid_arg(cst_Buffer_truncate)}
    function to_seq$8(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_u9_=i + 1 | 0;
        return [0,x,function(_u__){return aux(_u9_,_u__)}]}
      var _u7_=0;
      return function(_u8_){return aux(_u7_,_u8_)}}
    function to_seqi$3(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_u5_=i + 1 | 0;
        return [0,[0,i,x],function(_u6_){return aux(_u5_,_u6_)}]}
      var _u3_=0;
      return function(_u4_){return aux(_u3_,_u4_)}}
    function add_seq$1(b,seq)
     {return iter(function(_u2_){return add_char(b,_u2_)},seq)}
    function of_seq$6(i){var b=create$2(32);add_seq$1(b,i);return b}
    function add_int8(b,x)
     {var new_position=b[2] + 1 | 0;
      if(b[3] < new_position)resize(b,1);
      caml_bytes_unsafe_set(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_ne(b,x)
     {var new_position=b[2] + 2 | 0;
      if(b[3] < new_position)resize(b,2);
      caml_bytes_set16(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int32_ne(b,x)
     {var new_position=b[2] + 4 | 0;
      if(b[3] < new_position)resize(b,4);
      caml_bytes_set32(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int64_ne(b,x)
     {var new_position=b[2] + 8 | 0;
      if(b[3] < new_position)resize(b,8);
      caml_bytes_set64(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_le(b,x){return add_int16_ne(b,x)}
    function add_int16_be(b,x)
     {var x$0=caml_bswap16(x);return add_int16_ne(b,x$0)}
    function add_int32_le(b,x){return add_int32_ne(b,x)}
    function add_int32_be(b,x)
     {var x$0=caml_int32_bswap(x);return add_int32_ne(b,x$0)}
    function add_int64_le(b,x){return add_int64_ne(b,x)}
    function add_int64_be(b,x)
     {var x$0=caml_int64_bswap(x);return add_int64_ne(b,x$0)}
    var
     Stdlib_Buffer=
      [0,
       create$2,
       contents,
       to_bytes$0,
       sub$3,
       blit$3,
       nth$0,
       length$4,
       clear$1,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq$8,
       to_seqi$3,
       add_seq$1,
       of_seq$6,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
    caml_register_global(806,Stdlib_Buffer,"Stdlib__Buffer");
    function create_char_set(param){return make$0(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function freeze_char_set(char_set){return of_bytes(char_set)}
    function rev_char_set(char_set)
     {var char_set$0=create_char_set(0),i=0;
      for(;;)
       {caml_bytes_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _u1_=i + 1 | 0;
        if(31 !== i){var i=_u1_;continue}
        return caml_string_of_bytes(char_set$0)}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_u0_=[0,ndec];else var _u0_=0;
          return [0,[8,_ag_,pad_of_pad_opt(pad_opt$5),_u0_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _uY_=len < min_len?1:0;
      if(_uY_)
       {var
         new_len=max$1(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _uZ_=0}
      else
       var _uZ_=_uY_;
      return _uZ_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        case 7:return 72;
        default:return 70}}
    function bprint_padty(buf,padty)
     {switch(padty)
       {case 0:return buffer_add_char(buf,45);
        case 1:return 0;
        default:return buffer_add_char(buf,48)}}
    function bprint_ignored_flag(buf,ign_flag)
     {return ign_flag?buffer_add_char(buf,95):ign_flag}
    function bprint_pad_opt(buf,pad_opt)
     {if(pad_opt)
       {var width=pad_opt[1];
        return buffer_add_string(buf,caml_string_of_jsbytes("" + width))}
      return 0}
    function bprint_padding(buf,pad)
     {if(typeof pad === "number")
       return 0;
      else
       {if(0 === pad[0])
         {var n=pad[2],padty=pad[1];
          bprint_padty(buf,padty);
          return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
        var padty$0=pad[1];
        bprint_padty(buf,padty$0);
        return buffer_add_char(buf,42)}}
    function bprint_precision(buf,prec)
     {if(typeof prec === "number")return prec?buffer_add_string(buf,cst$11):0;
      var n=prec[1];
      buffer_add_char(buf,46);
      return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
    function bprint_iconv_flag(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return buffer_add_char(buf,43);
        case 2:
        case 5:return buffer_add_char(buf,32);
        case 7:
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:return buffer_add_char(buf,35);
        default:return 0}}
    function bprint_altint_fmt(buf,ign_flag,iconv,pad,prec,c)
     {buffer_add_char(buf,37);
      bprint_ignored_flag(buf,ign_flag);
      bprint_iconv_flag(buf,iconv);
      bprint_padding(buf,pad);
      bprint_precision(buf,prec);
      buffer_add_char(buf,c);
      return buffer_add_char(buf,char_of_iconv(iconv))}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      return 8 <= fconv[2]?buffer_add_char(buf,35):0}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$12;
         case 1:return cst$13;
         case 2:return cst$14;
         case 3:return cst$15;
         case 4:return cst$16;
         case 5:return cst$17;
         default:return cst$18}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return cat(cst$19,make$1(1,c))}}
    function bprint_char_literal(buf,chr)
     {return 37 === chr?buffer_add_string(buf,cst$20):buffer_add_char(buf,chr)}
    function bprint_string_literal(buf,str)
     {var _uW_=caml_ml_string_length(str) - 1 | 0,_uV_=0;
      if(! (_uW_ < 0))
       {var i=_uV_;
        for(;;)
         {bprint_char_literal(buf,caml_string_get(str,i));
          var _uX_=i + 1 | 0;
          if(_uW_ !== i){var i=_uX_;continue}
          break}}
      return 0}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,cst_c);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,cst_s);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,cst_i);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,cst_li);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,cst_ni);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,cst_Li);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,cst_f);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,cst_B);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,cst$21);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,cst$22);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,cst$23);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,cst$24);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,cst_a);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,cst$25);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}
    function int_of_custom_arity(param)
     {if(param){var x=param[1];return 1 + int_of_custom_arity(x) | 0}return 0}
    function string_of_fmt(fmt)
     {var buf=buffer_create(16);
      function fmtiter(fmt,ign_flag)
       {var fmt$0=fmt,ign_flag$0=ign_flag;
        a:
        for(;;)
         if(typeof fmt$0 === "number")
          return 0;
         else
          switch(fmt$0[0])
           {case 0:
             var rest=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,99);
             var fmt$0=rest,ign_flag$0=0;
             continue;
            case 1:
             var rest$0=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,67);
             var fmt$0=rest$0,ign_flag$0=0;
             continue;
            case 2:
             var rest$1=fmt$0[2],pad=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_padding(buf,pad);
             buffer_add_char(buf,115);
             var fmt$0=rest$1,ign_flag$0=0;
             continue;
            case 3:
             var rest$2=fmt$0[2],pad$0=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_padding(buf,pad$0);
             buffer_add_char(buf,83);
             var fmt$0=rest$2,ign_flag$0=0;
             continue;
            case 4:
             var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_iconv_flag(buf,iconv);
             bprint_padding(buf,pad$1);
             bprint_precision(buf,prec);
             buffer_add_char(buf,char_of_iconv(iconv));
             var fmt$0=rest$3,ign_flag$0=0;
             continue;
            case 5:
             var
              rest$4=fmt$0[4],
              prec$0=fmt$0[3],
              pad$2=fmt$0[2],
              iconv$0=fmt$0[1];
             bprint_altint_fmt(buf,ign_flag$0,iconv$0,pad$2,prec$0,108);
             var fmt$0=rest$4,ign_flag$0=0;
             continue;
            case 6:
             var
              rest$5=fmt$0[4],
              prec$1=fmt$0[3],
              pad$3=fmt$0[2],
              iconv$1=fmt$0[1];
             bprint_altint_fmt(buf,ign_flag$0,iconv$1,pad$3,prec$1,110);
             var fmt$0=rest$5,ign_flag$0=0;
             continue;
            case 7:
             var
              rest$6=fmt$0[4],
              prec$2=fmt$0[3],
              pad$4=fmt$0[2],
              iconv$2=fmt$0[1];
             bprint_altint_fmt(buf,ign_flag$0,iconv$2,pad$4,prec$2,76);
             var fmt$0=rest$6,ign_flag$0=0;
             continue;
            case 8:
             var
              rest$7=fmt$0[4],
              prec$3=fmt$0[3],
              pad$5=fmt$0[2],
              fconv=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_fconv_flag(buf,fconv);
             bprint_padding(buf,pad$5);
             bprint_precision(buf,prec$3);
             buffer_add_char(buf,char_of_fconv(0,fconv));
             var fmt$0=rest$7,ign_flag$0=0;
             continue;
            case 9:
             var rest$8=fmt$0[2],pad$6=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_padding(buf,pad$6);
             buffer_add_char(buf,66);
             var fmt$0=rest$8,ign_flag$0=0;
             continue;
            case 10:
             var rest$9=fmt$0[1];
             buffer_add_string(buf,cst$26);
             var fmt$0=rest$9;
             continue;
            case 11:
             var rest$10=fmt$0[2],str=fmt$0[1];
             bprint_string_literal(buf,str);
             var fmt$0=rest$10;
             continue;
            case 12:
             var rest$11=fmt$0[2],chr$0=fmt$0[1];
             bprint_char_literal(buf,chr$0);
             var fmt$0=rest$11;
             continue;
            case 13:
             var rest$12=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_pad_opt(buf,pad_opt);
             buffer_add_char(buf,123);
             bprint_fmtty(buf,fmtty);
             buffer_add_char(buf,37);
             buffer_add_char(buf,125);
             var fmt$0=rest$12,ign_flag$0=0;
             continue;
            case 14:
             var rest$13=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_pad_opt(buf,pad_opt$0);
             buffer_add_char(buf,40);
             bprint_fmtty(buf,fmtty$0);
             buffer_add_char(buf,37);
             buffer_add_char(buf,41);
             var fmt$0=rest$13,ign_flag$0=0;
             continue;
            case 15:
             var rest$14=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,97);
             var fmt$0=rest$14,ign_flag$0=0;
             continue;
            case 16:
             var rest$15=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,116);
             var fmt$0=rest$15,ign_flag$0=0;
             continue;
            case 17:
             var rest$16=fmt$0[2],fmting_lit=fmt$0[1];
             bprint_string_literal(buf,string_of_formatting_lit(fmting_lit));
             var fmt$0=rest$16;
             continue;
            case 18:
             var rest$17=fmt$0[2],fmting_gen=fmt$0[1];
             if(0 === fmting_gen[0])
              {var match$1=fmting_gen[1],str$0=match$1[2];
               buffer_add_string(buf,cst$27);
               buffer_add_string(buf,str$0)}
             else
              {var match$2=fmting_gen[1],str$1=match$2[2];
               buffer_add_string(buf,cst$28);
               buffer_add_string(buf,str$1)}
             var fmt$0=rest$17;
             continue;
            case 19:
             var rest$18=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             buffer_add_char(buf,114);
             var fmt$0=rest$18,ign_flag$0=0;
             continue;
            case 20:
             var rest$19=fmt$0[3],char_set=fmt$0[2],width_opt=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_pad_opt(buf,width_opt);
             var
              print_char=
               function(buf,i)
                {var c=char_of_int(i);
                 return 37 === c
                         ?(buffer_add_char(buf,37),buffer_add_char(buf,37))
                         :64 === c
                           ?(buffer_add_char(buf,37),buffer_add_char(buf,64))
                           :buffer_add_char(buf,c)};
             buffer_add_char(buf,91);
             var
              _uL_=
               is_in_char_set(char_set,0)
                ?(buffer_add_char(buf,94),rev_char_set(char_set))
                :char_set,
              is_alone$0=
               function(_uQ_)
                {function is_alone(c)
                  {var
                    after=chr(c + 1 | 0),
                    before=chr(c - 1 | 0),
                    _uR_=is_in_char_set(_uQ_,c);
                   if(_uR_)
                    var
                     _uS_=is_in_char_set(_uQ_,before),
                     _uT_=_uS_?is_in_char_set(_uQ_,after):_uS_,
                     _uU_=1 - _uT_;
                   else
                    var _uU_=_uR_;
                   return _uU_}
                 return is_alone},
              is_alone=is_alone$0(_uL_);
             if(is_alone(93))buffer_add_char(buf,93);
             var i=1;
             b:
             for(;;)
              {if(i < 256)
                {if(! is_in_char_set(_uL_,char_of_int(i)))
                  {var i$0=i + 1 | 0,i=i$0;continue}
                 var match=char_of_int(i),switcher=match - 45 | 0,switch$0=0;
                 if(48 < switcher >>> 0)
                  if(210 <= switcher)print_char(buf,255);else switch$0 = 1;
                 else
                  {if(46 < switcher - 1 >>> 0)
                    {var i$2=i + 1 | 0,i=i$2;continue}
                   switch$0 = 1}
                 if(switch$0)
                  {var i$1=i + 1 | 0;
                   if(! is_in_char_set(_uL_,char_of_int(i$1)))
                    {print_char(buf,i$1 - 1 | 0);
                     var i$6=i$1 + 1 | 0,i=i$6;
                     continue}
                   var
                    match$0=char_of_int(i$1),
                    switcher$0=match$0 - 45 | 0,
                    switch$1=0;
                   if(48 < switcher$0 >>> 0)
                    if(210 <= switcher$0)
                     {print_char(buf,254);print_char(buf,255)}
                    else
                     switch$1 = 1;
                   else
                    if(46 < switcher$0 - 1 >>> 0)
                     {if(! is_in_char_set(_uL_,char_of_int(i$1 + 1 | 0)))
                       {print_char(buf,i$1 - 1 | 0);
                        var i$5=i$1 + 1 | 0,i=i$5;
                        continue}
                      switch$1 = 1}
                    else
                     switch$1 = 1;
                   if(switch$1)
                    {if(! is_in_char_set(_uL_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       print_char(buf,i$1);
                       var i$4=i$1 + 2 | 0,i=i$4;
                       continue}
                     var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                     for(;;)
                      {if(256 !== j$0 && is_in_char_set(_uL_,char_of_int(j$0)))
                        {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                       print_char(buf,i$3);
                       print_char(buf,45);
                       print_char(buf,j$0 - 1 | 0);
                       if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                       break}}}}
               if(is_alone(45))buffer_add_char(buf,45);
               buffer_add_char(buf,93);
               var fmt$0=rest$19,ign_flag$0=0;
               continue a}
            case 21:
             var rest$20=fmt$0[2],counter=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             switch(counter)
              {case 0:var _uM_=108;break;
               case 1:var _uM_=110;break;
               default:var _uM_=78}
             buffer_add_char(buf,_uM_);
             var fmt$0=rest$20,ign_flag$0=0;
             continue;
            case 22:
             var rest$21=fmt$0[1];
             buffer_add_char(buf,37);
             bprint_ignored_flag(buf,ign_flag$0);
             bprint_string_literal(buf,cst_0c);
             var fmt$0=rest$21,ign_flag$0=0;
             continue;
            case 23:
             var
              rest$22=fmt$0[2],
              ign=fmt$0[1],
              match$3=param_format_of_ignored_format(ign,rest$22),
              fmt$1=match$3[1],
              fmt$0=fmt$1,
              ign_flag$0=1;
             continue;
            default:
             var
              rest$23=fmt$0[3],
              arity=fmt$0[1],
              _uO_=int_of_custom_arity(arity),
              _uN_=1;
             if(! (_uO_ < 1))
              {var i$8=_uN_;
               for(;;)
                {buffer_add_char(buf,37);
                 bprint_ignored_flag(buf,ign_flag$0);
                 buffer_add_char(buf,63);
                 var _uP_=i$8 + 1 | 0;
                 if(_uO_ !== i$8){var i$8=_uP_;continue}
                 break}}
             var fmt$0=rest$23,ign_flag$0=0;
             continue}}
      fmtiter(fmt,0);
      return buffer_contents(buf)}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof ty2 === "number")
        return 0;
       else
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_ah_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_us_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_us_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_ut_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_ut_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_uu_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_uu_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_uv_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_uv_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_uw_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_uw_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_ux_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_ux_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_uy_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_uy_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_uz_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_uz_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_uA_=ty1[2],_uB_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_uC_=trans(_uA_,rest2$7);
              return [8,trans(_uB_,ty2$0),_uC_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_aq_];
          break;
         case 9:
          var switch$10=0,_uD_=ty1[3],_uE_=ty1[2],_uF_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               ty=trans(symm(_uE_),ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_uF_,ty22,trans(_uD_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ar_];
          break;
         case 10:
          var _uG_=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_uG_,rest2$9)]}
          throw [0,Assert_failure,_as_];
         case 11:
          var switch$11=0,_uH_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_uH_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_at_];
          break;
         case 12:
          var switch$12=0,_uI_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_uI_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_au_];
          break;
         case 13:
          var switch$13=0,_uJ_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_uJ_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_av_];
          break;
         default:
          var switch$14=0,_uK_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_uK_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_aw_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ak_];
        case 1:throw [0,Assert_failure,_al_];
        case 2:throw [0,Assert_failure,_am_];
        case 3:throw [0,Assert_failure,_an_];
        case 4:throw [0,Assert_failure,_ao_];
        case 5:throw [0,Assert_failure,_ai_];
        case 6:throw [0,Assert_failure,_aj_];
        default:throw [0,Assert_failure,_ap_]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _t6_=function(param){return 0},
         _t7_=function(param){return 0},
         _t8_=function(param){return 0};
        return [0,function(param){return 0},_t8_,_t7_,_t6_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _t9_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_t9_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _t__=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _t__,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _t$_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _t$_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _ua_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _ua_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _ub_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _ub_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _uc_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _uc_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _ud_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _ud_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _ue_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _ue_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _uf_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _uf_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _ug_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _uh_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _ui_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _ui_,
                  _uh_,
                  _ug_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _uj_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _uj_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _uk_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _uk_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _ul_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _ul_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _um_=function(param){caml_call1(de$12,0);return 0},
           _un_=function(param){caml_call1(ed$12,0);return 0},
           _uo_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _uo_,
                  _un_,
                  _um_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _up_=function(param){caml_call1(de$13,0);return 0},
           _uq_=function(param){caml_call1(ed$13,0);return 0},
           _ur_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _ur_,
                  _uq_,
                  _up_]}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _t4_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_t5_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _t5_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_t5_,_t4_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    var
     Type_mismatch=
      [248,cst_CamlinternalFormat_Type_mi,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")
       return [0,0,fmtty];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _t3_=match[2];
          if(typeof _t3_ !== "number" && 2 === _t3_[0])
           {var rest=_t3_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             sub_fmtty_rest=sub_fmtty[1],
             match=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match[2],
             sub_fmtty_rest$0=match[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$0[2],
             sub_fmtty_rest$2=match$0[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$1=fmtty[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$1[2],
             sub_fmtty_rest$4=match$1[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof fmtty !== "number" && 3 === fmtty[0])
           {var
             fmtty_rest$2=fmtty[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$2[2],
             sub_fmtty_rest$6=match$2[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof fmtty !== "number" && 4 === fmtty[0])
           {var
             fmtty_rest$3=fmtty[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$3[2],
             sub_fmtty_rest$8=match$3[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof fmtty !== "number" && 5 === fmtty[0])
           {var
             fmtty_rest$4=fmtty[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$4[2],
             sub_fmtty_rest$10=match$4[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof fmtty !== "number" && 6 === fmtty[0])
           {var
             fmtty_rest$5=fmtty[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$5[2],
             sub_fmtty_rest$12=match$5[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$6=fmtty[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$6[2],
             sub_fmtty_rest$14=match$6[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$7=fmtty[2],
             sub2_fmtty=fmtty[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$7[2],
             sub_fmtty_rest$16=match$7[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[3],
             sub2_fmtty$1=fmtty[2],
             sub1_fmtty=fmtty[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _t1_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_t1_))
             throw Type_mismatch;
            var _t2_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_t2_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$8=fmtty_rel_det(sub_fmtty$0),
             f4=match$8[4],
             f2=match$8[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$9=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$9[2],
             sub_fmtty_rest$18=match$9[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$10=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$10[2],
             sub_fmtty_rest$20=match$10[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$11[2],
             sub_fmtty_rest$22=match$11[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$12[2],
             sub_fmtty_rest$24=match$12[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$13[2],
             sub_fmtty_rest$26=match$13[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _tK_=match$1[2],
           _tJ_=match$1[1];
          if(typeof _tK_ !== "number" && 1 === _tK_[0])
           {var
             fmtty_rest$1=_tK_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_tJ_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _tM_=match$3[2],
           _tL_=match$3[1];
          if(typeof _tM_ !== "number" && 1 === _tM_[0])
           {var
             fmtty_rest$2=_tM_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_tL_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _tO_=match$5[3],
           _tN_=match$5[1];
          if(typeof _tO_ !== "number" && 2 === _tO_[0])
           {var
             fmtty_rest$3=_tO_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_tN_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _tQ_=match$7[3],
           _tP_=match$7[1];
          if(typeof _tQ_ !== "number" && 3 === _tQ_[0])
           {var
             fmtty_rest$4=_tQ_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_tP_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _tS_=match$9[3],
           _tR_=match$9[1];
          if(typeof _tS_ !== "number" && 4 === _tS_[0])
           {var
             fmtty_rest$5=_tS_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_tR_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _tU_=match$11[3],
           _tT_=match$11[1];
          if(typeof _tU_ !== "number" && 5 === _tU_[0])
           {var
             fmtty_rest$6=_tU_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_tT_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _tW_=match$13[3],
           _tV_=match$13[1];
          if(typeof _tW_ !== "number" && 6 === _tW_[0])
           {var
             fmtty_rest$7=_tW_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_tV_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _tY_=match$15[2],
           _tX_=match$15[1];
          if(typeof _tY_ !== "number" && 7 === _tY_[0])
           {var
             fmtty_rest$8=_tY_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_tX_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _tZ_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_tZ_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _t0_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_t0_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_t0_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format(fmt,fmtty)
     {var _tI_=type_format_gen(fmt,fmtty);
      if(typeof _tI_[2] === "number"){var fmt$0=_tI_[1];return fmt$0}
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _tH_=2 === padty$0?48:32,res=make$0(width$0,_tH_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < c - 97 >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          switch(c - 43 | 0)
           {case 5:
             if(len < (prec$0 + 2 | 0) && 1 < len)
              {var switch$2=0;
               if
                (120
                 ===
                 caml_string_get(str,1)
                 ||
                 88
                 ===
                 caml_string_get(str,1))
                switch$2 = 1;
               if(switch$2)
                {var res$1=make$0(prec$0 + 2 | 0,48);
                 caml_bytes_set(res$1,1,caml_string_get(str,1));
                 blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                 return caml_string_of_bytes(res$1)}}
             switch$0 = 1;
             switch$1 = 1;
             break;
            case 0:
            case 2:break;
            case 1:
            case 3:
            case 4:switch$1 = 1;break;
            default:switch$0 = 1;switch$1 = 1}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make$0(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make$0(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make$0(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function format_of_fconv(fconv,prec)
     {var
       prec$0=abs(prec),
       symb=char_of_fconv(_ax_,fconv),
       buf=buffer_create(16);
      buffer_add_char(buf,37);
      bprint_fconv_flag(buf,fconv);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_tC_=caml_ml_string_length(s) - 1 | 0,_tB_=0;
        if(! (_tC_ < 0))
         {var i$0=_tB_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0);
            if(! (9 < match - 48 >>> 0))n[1]++;
            var _tG_=i$0 + 1 | 0;
            if(_tC_ !== i$0){var i$0=_tG_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _tE_=caml_ml_string_length(s) - 1 | 0,
         _tD_=0;
        if(! (_tE_ < 0))
         {var i=_tD_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i);
            if(9 < c - 48 >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _tF_=i + 1 | 0;
            if(_tE_ !== i){var i=_tF_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _tA_=cst_d$3;break;
        case 2:var _tA_=cst_d$4;break;
        case 4:var _tA_=cst_i$1;break;
        case 5:var _tA_=cst_i$2;break;
        case 6:var _tA_=cst_x;break;
        case 7:var _tA_=cst_x$0;break;
        case 8:var _tA_=cst_X$0;break;
        case 9:var _tA_=cst_X$1;break;
        case 10:var _tA_=cst_o;break;
        case 11:var _tA_=cst_o$0;break;
        case 0:
        case 13:var _tA_=cst_d$2;break;
        case 3:
        case 14:var _tA_=cst_i$0;break;
        default:var _tA_=cst_u}
      return transform_int_alt(iconv,caml_format_int(_tA_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _tz_=cst_ld$0;break;
        case 2:var _tz_=cst_ld$1;break;
        case 4:var _tz_=cst_li$1;break;
        case 5:var _tz_=cst_li$2;break;
        case 6:var _tz_=cst_lx;break;
        case 7:var _tz_=cst_lx$0;break;
        case 8:var _tz_=cst_lX;break;
        case 9:var _tz_=cst_lX$0;break;
        case 10:var _tz_=cst_lo;break;
        case 11:var _tz_=cst_lo$0;break;
        case 0:
        case 13:var _tz_=cst_ld;break;
        case 3:
        case 14:var _tz_=cst_li$0;break;
        default:var _tz_=cst_lu}
      return transform_int_alt(iconv,caml_format_int(_tz_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _ty_=cst_nd$0;break;
        case 2:var _ty_=cst_nd$1;break;
        case 4:var _ty_=cst_ni$1;break;
        case 5:var _ty_=cst_ni$2;break;
        case 6:var _ty_=cst_nx;break;
        case 7:var _ty_=cst_nx$0;break;
        case 8:var _ty_=cst_nX;break;
        case 9:var _ty_=cst_nX$0;break;
        case 10:var _ty_=cst_no;break;
        case 11:var _ty_=cst_no$0;break;
        case 0:
        case 13:var _ty_=cst_nd;break;
        case 3:
        case 14:var _ty_=cst_ni$0;break;
        default:var _ty_=cst_nu}
      return transform_int_alt(iconv,caml_format_int(_ty_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _tx_=cst_Ld$0;break;
        case 2:var _tx_=cst_Ld$1;break;
        case 4:var _tx_=cst_Li$1;break;
        case 5:var _tx_=cst_Li$2;break;
        case 6:var _tx_=cst_Lx;break;
        case 7:var _tx_=cst_Lx$0;break;
        case 8:var _tx_=cst_LX;break;
        case 9:var _tx_=cst_LX$0;break;
        case 10:var _tx_=cst_Lo;break;
        case 11:var _tx_=cst_Lo$0;break;
        case 0:
        case 13:var _tx_=cst_Ld;break;
        case 3:
        case 14:var _tx_=cst_Li$0;break;
        default:var _tx_=cst_Lu}
      return transform_int_alt(iconv,caml_int64_format(_tx_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return runtime.caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=runtime.caml_classify_float(x);
        return 3 === match
                ?x < 0.?cst_neg_infinity:cst_infinity
                :4 <= match?cst_nan:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i=0;
         for(;;)
          {if(i === len)
            var _tv_=0;
           else
            {var match=caml_string_get(str,i),_tu_=match - 46 | 0,switch$0=0;
             if(23 < _tu_ >>> 0)
              {if(55 === _tu_)switch$0 = 1}
             else
              if(21 < _tu_ - 1 >>> 0)switch$0 = 1;
             if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
             var _tv_=1}
           var _tw_=_tv_?str:cat(str,cst$29);
           return caml_special_val(_tw_)}
        case 6:return hex(0);
        case 7:return uppercase_ascii$1(hex(0));
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var
              str=escaped(c),
              l=caml_ml_string_length(str),
              res=make$0(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _tr_=pad$5[2],_ts_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_ts_,_tr_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_ts_,_tr_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_ts_,_tr_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _tt_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_tt_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_tt_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_tt_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _tp_=fmt$0[1];
           if(0 === _tp_[0])
            {var
              rest$13=fmt$0[2],
              match=_tp_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_tp_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_ay_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _tq_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_tq_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_tq_])}}
    function make_ignored_param$0(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:throw [0,Assert_failure,_az_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt)}
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_to_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_aA_];
         default:throw [0,Assert_failure,_aB_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _tn_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_tn_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_tn_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _tm_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_tm_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_tm_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_ignored_param(k,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,acc,ign,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _tj_=pad[2],_tk_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_tk_,_tj_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_tk_,_tj_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             str=
              fix_padding
               (_tk_,_tj_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _tl_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_tl_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_tl_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_tl_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_sA_=make_iprintf(k$0,o,rest);
           return function(_ti_){return _sA_};
          case 1:
           var rest$0=fmt$0[1],_sB_=make_iprintf(k$0,o,rest$0);
           return function(_th_){return _sB_};
          case 2:
           var _sC_=fmt$0[1];
           if(typeof _sC_ === "number")
            {var rest$1=fmt$0[2],_sD_=make_iprintf(k$0,o,rest$1);
             return function(_td_){return _sD_}}
           else
            {if(0 === _sC_[0])
              {var rest$2=fmt$0[2],_sE_=make_iprintf(k$0,o,rest$2);
               return function(_tg_){return _sE_}}
             var
              rest$3=fmt$0[2],
              _sF_=make_iprintf(k$0,o,rest$3),
              _sG_=function(_tf_){return _sF_};
             return function(_te_){return _sG_}}
          case 3:
           var _sH_=fmt$0[1];
           if(typeof _sH_ === "number")
            {var rest$4=fmt$0[2],_sI_=make_iprintf(k$0,o,rest$4);
             return function(_s$_){return _sI_}}
           else
            {if(0 === _sH_[0])
              {var rest$5=fmt$0[2],_sJ_=make_iprintf(k$0,o,rest$5);
               return function(_tc_){return _sJ_}}
             var
              rest$6=fmt$0[2],
              _sK_=make_iprintf(k$0,o,rest$6),
              _sL_=function(_tb_){return _sK_};
             return function(_ta_){return _sL_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _sM_=fmt$0[1];
           if(typeof _sM_ === "number")
            {var rest$12=fmt$0[2],_sN_=make_iprintf(k$0,o,rest$12);
             return function(_s7_){return _sN_}}
           else
            {if(0 === _sM_[0])
              {var rest$13=fmt$0[2],_sO_=make_iprintf(k$0,o,rest$13);
               return function(_s__){return _sO_}}
             var
              rest$14=fmt$0[2],
              _sP_=make_iprintf(k$0,o,rest$14),
              _sQ_=function(_s9_){return _sP_};
             return function(_s8_){return _sQ_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_sR_=make_iprintf(k$0,o,rest$15);
           return function(_s6_){return _sR_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _sS_=make_iprintf(k$0,o,rest$17),
            _sT_=function(_s5_){return _sS_};
           return function(_s4_){return _sT_};
          case 16:
           var rest$18=fmt$0[1],_sU_=make_iprintf(k$0,o,rest$18);
           return function(_s3_){return _sU_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _sV_=fmt$0[1];
           if(0 === _sV_[0])
            {var
              rest$19=fmt$0[2],
              match=_sV_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_sV_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_aC_];
          case 20:
           var rest$21=fmt$0[3],_sW_=make_iprintf(k$0,o,rest$21);
           return function(_s2_){return _sW_};
          case 21:
           var rest$22=fmt$0[2],_sX_=make_iprintf(k$0,o,rest$22);
           return function(_s1_){return _sX_};
          case 22:
           var rest$23=fmt$0[1],_sY_=make_iprintf(k$0,o,rest$23);
           return function(_s0_){return _sY_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_sZ_=0;
           return make_ignored_param
                   (function(param){return caml_call1(k$0,o)},_sZ_,ign,rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_sy_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_sz_){return _sy_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)
           {var _r6_=make_iprintf(k,o,fmt),_r7_=function(_sm_){return _r6_};
            return function(_sl_){return _r7_}}
          var _r8_=make_iprintf(k,o,fmt);
          return function(_sk_){return _r8_}}
        var _r9_=make_iprintf(k,o,fmt);
        return function(_sj_){return _r9_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(prec)
             {var _r__=make_iprintf(k,o,fmt),_r$_=function(_sx_){return _r__};
              return function(_sw_){return _r$_}}
            var _sa_=make_iprintf(k,o,fmt);
            return function(_sv_){return _sa_}}
          var _sb_=make_iprintf(k,o,fmt);
          return function(_su_){return _sb_}}
        if(typeof prec === "number")
         {if(prec)
           {var
             _sc_=make_iprintf(k,o,fmt),
             _sd_=function(_st_){return _sc_},
             _se_=function(_ss_){return _sd_};
            return function(_sr_){return _se_}}
          var _sf_=make_iprintf(k,o,fmt),_sg_=function(_sq_){return _sf_};
          return function(_sp_){return _sg_}}
        var _sh_=make_iprintf(k,o,fmt),_si_=function(_so_){return _sh_};
        return function(_sn_){return _si_}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _r4_=acc$0[2],_r5_=acc$0[1];
           if(0 === _r4_[0])
            {var acc$1=_r4_[1];
             output_acc(o,_r5_);
             output_string(o,cst$30);
             var acc$0=acc$1;
             continue}
           var acc$2=_r4_[1];
           output_acc(o,_r5_);
           output_string(o,cst$31);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _r2_=acc$0[2],_r3_=acc$0[1];
           if(0 === _r2_[0])
            {var acc$1=_r2_[1];
             bufput_acc(b,_r3_);
             add_string(b,cst$32);
             var acc$0=acc$1;
             continue}
           var acc$2=_r2_[1];
           bufput_acc(b,_r3_);
           add_string(b,cst$33);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _r0_=acc$0[2],_r1_=acc$0[1];
           if(0 === _r0_[0])
            {var acc$1=_r0_[1];
             strput_acc(b,_r1_);
             add_string(b,cst$34);
             var acc$0=acc$1;
             continue}
           var acc$2=_r0_[1];
           strput_acc(b,_r1_);
           add_string(b,cst$35);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$2(256);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,cst$36))return _aD_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_aE_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0);
          if(25 < match - 97 >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _rY_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_rY_}
       catch(_rZ_)
        {_rZ_ = caml_wrap_exception(_rZ_);
         if(_rZ_[1] !== Failure)throw _rZ_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,cst$37)
        &&
        caml_string_notequal(box_name,cst_b$0))
       var
        box_type=
         caml_string_notequal(box_name,cst_h)
          ?caml_string_notequal(box_name,cst_hov)
            ?caml_string_notequal(box_name,cst_hv)
              ?caml_string_notequal(box_name,cst_v)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=prec?[0,1,fmt]:[0,0,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_aF_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_aG_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_aH_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0);
          if(9 < c - 48 >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_aY_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0);
           if(9 < c - 48 >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_aZ_]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_a4_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(! (32 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,cst$49)
               }}
          if(plus$0)
           {if(space$0)
             {if(legacy_behavior$0){var space$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,32,cst$46)}
            if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$47)}
          if(space$0)
           {if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$48)}
          throw [0,Assert_failure,_a2_]}}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_a0_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 switch(match$0 - 123 | 0)
                  {case 0:
                    var
                     sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                     str_ind$2=sub_end + 2 | 0,
                     str_ind$0=str_ind$2;
                    continue;
                   case 1:break;
                   default:
                    return expected_character
                            (str_ind$0 + 1 | 0,cst_character,125)}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _rW_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _rW_=0;
          var _rV_=_rW_}
        catch(_rX_)
         {_rX_ = caml_wrap_exception(_rX_);
          if(_rX_ !== Not_found && _rX_[1] !== Failure)throw _rX_;
          var _rV_=0}
        if(_rV_)
         {var
           match=_rV_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_aW_,fmt_rest$0]]}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _rO_=str_ind === end_ind?1:0,
           _rP_=_rO_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_rP_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _rQ_=[0,s,width,0],
             _rR_=str_ind_3 + 1 | 0,
             formatting_lit$0=_rQ_,
             next_ind=_rR_;
           else
            switch$1 = 1;
          else
           if(1 < switcher - 1 >>> 0)
            {var
              match$3=parse_integer(str_ind_3,end_ind),
              offset=match$3[2],
              str_ind_4=match$3[1],
              str_ind_5=parse_spaces(str_ind_4,end_ind);
             if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
             var
              s$0=sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
              _rS_=[0,s$0,width,offset],
              _rT_=str_ind_5 + 1 | 0,
              formatting_lit$0=_rS_,
              next_ind=_rT_}
           else
            switch$1 = 1;
          if(switch$1)throw Not_found}
        catch(_rU_)
         {_rU_ = caml_wrap_exception(_rU_);
          if(_rU_ !== Not_found && _rU_[1] !== Failure)throw _rU_;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from$0(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str],
             formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
             _rM_=[0,[18,formatting$0,fmt_rest$0]];
            return _rM_}
          throw Not_found}
        catch(_rN_)
         {_rN_ = caml_wrap_exception(_rN_);
          if(_rN_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _rN_}}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _rJ_=flag[1],_rK_=_rJ_?1 - legacy_behavior$0:_rJ_;
          if(_rK_)
           {var _rL_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_aI_),str,str_ind,_rL_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _rE_=space[1],
           _rF_=hash[1],
           _rG_=plus[1],
           _rH_=minus[1],
           _rI_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            _rI_
             ?_rH_
               ?legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0)
               :2
             :_rH_?0:1,
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _rH_,
                       _rG_,
                       _rF_,
                       _rE_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _rH_,
                     _rG_,
                     _rF_,
                     _rE_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_rH_,_rG_,_rF_,_rE_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_rH_,_rG_,_rF_,_rE_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_rH_,_rG_,_rF_,_rE_,ign,_aJ_)}}}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            switch(symb$0 - 42 | 0)
             {case 0:
               return parse_after_precision
                       (pct_ind,
                        str_ind$0 + 1 | 0,
                        end_ind,
                        minus,
                        plus,
                        hash,
                        space,
                        ign,
                        pad,
                        1);
              case 1:
              case 3:
               if(legacy_behavior$0)
                {var
                  _rD_=str_ind$0 + 1 | 0,
                  minus$0=minus || (45 === symb$0?1:0);
                 return parse_literal(minus$0,_rD_)}
               break
              }
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _aK_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,prec)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   prec,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof prec === "number" && ! prec)return parse_conv(0);
          if(minus)
           {if(typeof prec === "number")return parse_conv(_aL_);
            var n=prec[1];
            return parse_conv([0,0,n])}
          if(typeof prec === "number")return parse_conv(_aM_);
          var n$0=prec[1];
          return parse_conv([0,1,n$0])}
        return parse_conv(pad)}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,cst_precision$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aN_
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$1)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aO_
                      :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,cst$38);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
            return incompatible_flag(pct_ind,str_ind,c,cst$39)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _ra_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _ra_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_ra_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _rc_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_rc_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_ri_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _ri_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_ri_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _rj_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _rj_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_rj_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set,char_of_int(i));
                    var _rC_=i + 1 | 0;
                    if(c !== i){var i=_rC_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_aX_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _rB_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_rB_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_rB_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _rz_=str_ind$2 + 2 | 0;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return parse_char_set_content(counter$2,_rz_,end_ind)}
                        return caml_trampoline_return
                                (parse_char_set_content,[0,_rz_,end_ind])}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _rA_=str_ind$2 + 1 | 0;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return parse_char_set_content(counter$1,_rA_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_rA_,end_ind])}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _ry_=str_ind$0 + 1 | 0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return parse_char_set_content(counter$0,_ry_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_ry_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,reverse=1,str_ind$1=str_ind$0;
            else
             var reverse=0,str_ind$1=str_ind;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set$0=freeze_char_set(char_set),
             char_set$1=reverse?rev_char_set(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$1],
              _ro_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _ro_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$19]];
            var fmt_result=_ro_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _rp_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _rq_=_rp_;
              else
               var
                _rq_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message
                    (str_ind,cst_non_zero_widths_are_unsupp);
              var _rr_=_rq_}
            else
             var _rr_=char_format(fmt_rest$21);
            var fmt_result=_rr_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _rs_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_rs_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _rt_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _rt_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_rt_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _ru_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _ru_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_ru_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _rb_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _rb_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_rb_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _rv_=symb$0 - 88 | 0,
               switch$2=0;
              if(! (32 < _rv_ >>> 0))
               switch(_rv_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _rh_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _rh_=0;
              if(_rh_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(! (111 <= symb))
                 switch(symb - 108 | 0)
                  {case 0:var counter=0;switch$3 = 1;break;
                   case 1:break;
                   default:var counter=1;switch$3 = 1}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_a1_];
              if(get_ign(0))
               var ignored$5=[11,counter],_rg_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _rg_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_rg_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_aS_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _rk_=get_space(0),
             _rl_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_rl_,_rk_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _rm_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _rn_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_rn_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _rm_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_rm_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             hash$1=get_hash(0),
             plus$2=get_plus(0),
             flag=
              plus$2
               ?space$1
                 ?legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,cst$50)
                 :1
               :space$1?2:0,
             switch$4=0;
            if(73 <= symb)
             {var switcher=symb - 101 | 0;
              if(3 < switcher >>> 0)
               switch$4 = 1;
              else
               {switch(switcher)
                 {case 0:var _rw_=1;break;
                  case 1:var _rw_=0;break;
                  case 2:var _rw_=3;break;
                  default:var _rw_=6}
                var kind=_rw_}}
            else
             if(69 <= symb)
              {var switch$5=0;
               switch(symb - 69 | 0)
                {case 0:var _rx_=2;break;
                 case 1:switch$4 = 1;switch$5 = 1;break;
                 case 2:var _rx_=4;break;
                 default:var _rx_=7}
               if(! switch$5)var kind=_rx_}
             else
              switch$4 = 1;
            if(switch$4)
             {var switch$6=0;
              if(hash$1)
               if(70 === symb)var kind=8;else switch$6 = 1;
              else
               if(70 === symb)var kind=5;else switch$6 = 1;
              if(switch$6)throw [0,Assert_failure,_a3_]}
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var _rd_=match?incompatible_flag(pct_ind,str_ind,95,cst$40):0;
              else
               var ndec=match[1],_rd_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_rd_],
               _re_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _rf_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_rf_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _re_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_re_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$7=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$7 = 1;
           else
            {var switch$8=0;
             switch(symb - 108 | 0)
              {case 0:
                var
                 _qW_=caml_string_get(str,str_ind),
                 _qX_=get_space(0),
                 _qY_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_qY_,_qX_,_qW_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _qZ_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _q1_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_q1_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _qZ_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _q0_=_qZ_;
                break;
               case 1:switch$7 = 1;switch$8 = 1;break;
               default:
                var
                 _q2_=caml_string_get(str,str_ind),
                 _q3_=get_space(0),
                 _q4_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_q4_,_q3_,_q2_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _q5_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _q6_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_q6_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _q5_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _q0_=_q5_}
             if(! switch$8)var fmt_result=_q0_}
          else
           if(76 === symb)
            {var
              _q7_=caml_string_get(str,str_ind),
              _q8_=get_space(0),
              _q9_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_q9_,_q8_,_q7_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _q__=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _q$_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_q$_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _q__=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_q__}
           else
            switch$7 = 1;
          if(switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_aP_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _qN_=1 - plus_used[1],plus$0=_qN_?plus:_qN_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$41);
          var _qO_=1 - hash_used[1],hash$0=_qO_?hash:_qO_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,cst$42);
          var _qP_=1 - space_used[1],space$0=_qP_?space:_qP_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$43);
          var _qQ_=1 - pad_used[1],_qR_=_qQ_?caml_notequal([0,pad],_aQ_):_qQ_;
          if(_qR_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _qS_=1 - prec_used[1],
           _qT_=_qS_?caml_notequal([0,prec],_aR_):_qS_;
          if(_qT_)
           {var _qU_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_qU_,cst_precision$2)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$44)}
        var _qV_=1 - ign_used[1],ign$0=_qV_?ign:_qV_;
        if(ign$0)
         {var switch$9=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$9 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$9 = 1;
          var switch$10=0;
          if(switch$9 || ! legacy_behavior$0)switch$10 = 1;
          if(switch$10)incompatible_flag(pct_ind,str_ind,symb,cst$45)}
        return fmt_result}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _qM_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_qM_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_aT_;
            else
             {var c=caml_string_get(str,str_ind$0),switch$0=0;
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  switch$0 = 1;
                 else
                  switch(switcher)
                   {case 0:
                     var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]]}}
               else
                if(91 <= c)
                 switch(c - 91 | 0)
                  {case 0:
                    var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                   case 1:switch$0 = 1;break;
                   default:
                    var
                     match$4=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$3=match$4[1],
                     match$0=[0,[17,0,fmt_rest$3]]}
                else
                 switch$0 = 1;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]];
               else
                if(32 <= c)
                 switch(c - 32 | 0)
                  {case 0:
                    var
                     match$6=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$5=match$6[1],
                     match$0=[0,[17,_aU_,fmt_rest$5]];
                    break;
                   case 5:
                    var switch$1=0;
                    if
                     ((str_ind$0 + 1 | 0)
                      <
                      end_ind
                      &&
                      37
                      ===
                      caml_string_get(str,str_ind$0 + 1 | 0))
                     {var
                       match$7=parse(str_ind$0 + 2 | 0,end_ind),
                       fmt_rest$6=match$7[1],
                       match$0=[0,[17,6,fmt_rest$6]];
                      switch$1 = 1}
                    if(! switch$1)
                     var
                      match$8=parse(str_ind$0,end_ind),
                      fmt_rest$7=match$8[1],
                      match$0=[0,[12,64,fmt_rest$7]];
                    break;
                   case 12:
                    var
                     match$9=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$8=match$9[1],
                     match$0=[0,[17,_aV_,fmt_rest$8]];
                    break;
                   case 14:
                    var
                     match$10=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$9=match$10[1],
                     match$0=[0,[17,4,fmt_rest$9]];
                    break;
                   case 27:
                    var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                    break;
                   case 28:
                    var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                    break;
                   case 31:
                    var
                     match$11=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$10=match$11[1],
                     match$0=[0,[17,2,fmt_rest$10]];
                    break;
                   case 32:
                    var
                     match$12=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$11=match$12[1],
                     match$0=[0,[17,5,fmt_rest$11]];
                    break;
                   default:switch$0 = 1}
                else
                 switch$0 = 1;
              if(switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var match=fmt_ebb_of_string(0,str),fmt=match[1];
      try
       {var _qK_=[0,type_format(fmt,fmtty),str];return _qK_}
      catch(_qL_)
       {_qL_ = caml_wrap_exception(_qL_);
        if(_qL_ === Type_mismatch)
         {var _qJ_=string_of_fmtty(fmtty);
          return caml_call2(failwith_message(_a5_),str,_qJ_)}
        throw _qL_}}
    function format_of_string_format(str,param)
     {var
       str$0=param[2],
       fmt=param[1],
       match=fmt_ebb_of_string(0,str),
       fmt$0=match[1];
      try
       {var _qH_=[0,type_format(fmt$0,fmtty_of_fmt(fmt)),str];return _qH_}
      catch(_qI_)
       {_qI_ = caml_wrap_exception(_qI_);
        if(_qI_ === Type_mismatch)
         return caml_call2(failwith_message(_a6_),str,str$0);
        throw _qI_}}
    var
     CamlinternalFormat=
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
    caml_register_global(807,CamlinternalFormat,"CamlinternalFormat");
    function kfprintf(k,o,param)
     {var fmt=param[1],_qG_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _qG_,
               fmt)}
    function kbprintf(k,b,param)
     {var fmt=param[1],_qF_=0;
      return make_printf
              (function(acc){bufput_acc(b,acc);return caml_call1(k,b)},
               _qF_,
               fmt)}
    function ikfprintf(k,oc,param)
     {var fmt=param[1];return make_iprintf(k,oc,fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_qE_){return 0},oc,fmt)}
    function bprintf(b,fmt){return kbprintf(function(_qD_){return 0},b,fmt)}
    function ifprintf(oc,fmt)
     {return ikfprintf(function(_qC_){return 0},oc,fmt)}
    function ibprintf(b,fmt){return ikfprintf(function(_qB_){return 0},b,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$2(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Stdlib_Printf=
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
    caml_register_global(808,Stdlib_Printf,"Stdlib__Printf");
    var
     Bad=[248,cst_Stdlib_Arg_Bad,caml_fresh_oo_id(0)],
     Help=[248,cst_Stdlib_Arg_Help,caml_fresh_oo_id(0)],
     Stop=[248,cst_Stdlib_Arg_Stop,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$1=l$0[2],l$0=l$1;
          continue}
        throw Not_found}}
    function split$1(s)
     {var
       i=index$0(s,61),
       len=caml_ml_string_length(s),
       _qA_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_qA_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_qz_=cat(prefix,h);
        return cat
                (fold_left$0(function(x,y){return cat(x,cat(sep,y))},_qz_,t),
                 suffix)}
      return cst_none}
    function help_action(param){throw [0,Stop,_a9_]}
    function add_help(speclist)
     {try
       {assoc3(cst_help$2,speclist);var _qw_=0,_qu_=_qw_}
      catch(_qy_)
       {_qy_ = caml_wrap_exception(_qy_);
        if(_qy_ !== Not_found)throw _qy_;
        var
         _qu_=
          [0,[0,cst_help,[0,help_action],cst_Display_this_list_of_optio],0]}
      try
       {assoc3(cst_help$1,speclist);var _qv_=0,add2=_qv_}
      catch(_qx_)
       {_qx_ = caml_wrap_exception(_qx_);
        if(_qx_ !== Not_found)throw _qx_;
        var
         add2=
          [0,
           [0,cst_help$0,[0,help_action],cst_Display_this_list_of_optio$0],
           0]}
      return append(speclist,append(_qu_,add2))}
    function usage_b(buf,speclist,errmsg)
     {caml_call1(bprintf(buf,_a__),errmsg);
      var _qr_=add_help(speclist);
      return iter$2
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _qs_=0 < caml_ml_string_length(doc)?1:0;
                 if(_qs_)
                  {if(11 === spec[0])
                    {var l=spec[1],_qt_=make_symlist(cst$53,cst$52,cst$51,l);
                     return caml_call3(bprintf(buf,_a8_),key,_qt_,doc)}
                   return caml_call2(bprintf(buf,_a7_),key,doc)}
                 return _qs_},
               _qr_)}
    function usage_string(speclist,errmsg)
     {var b=create$2(200);usage_b(b,speclist,errmsg);return contents(b)}
    function usage(speclist,errmsg)
     {var _qq_=usage_string(speclist,errmsg);
      return caml_call1(eprintf(_a$_),_qq_)}
    var current=[0,0];
    function bool_of_string_opt$0(x)
     {try
       {var _qo_=[0,bool_of_string(x)];return _qo_}
      catch(_qp_)
       {_qp_ = caml_wrap_exception(_qp_);
        if(_qp_[1] === Invalid_argument)return 0;
        throw _qp_}}
    function int_of_string_opt$0(x)
     {try
       {var _qm_=[0,caml_int_of_string(x)];return _qm_}
      catch(_qn_)
       {_qn_ = caml_wrap_exception(_qn_);
        if(_qn_[1] === Failure)return 0;
        throw _qn_}}
    function float_of_string_opt(x)
     {try
       {var _qk_=[0,caml_float_of_string(x)];return _qk_}
      catch(_ql_)
       {_ql_ = caml_wrap_exception(_ql_);
        if(_ql_[1] === Failure)return 0;
        throw _ql_}}
    function parse_and_expand_argv_dynamic_
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         b=create$2(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[1 + initpos]
           :cst$54;
        switch(error[0])
         {case 0:
           var _qj_=error[1];
           if
            (caml_string_notequal(_qj_,cst_help$3)
             &&
             caml_string_notequal(_qj_,cst_help$4))
            caml_call2(bprintf(b,_ba_),progname,_qj_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(b,_bd_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(bprintf(b,_be_),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(b,_bf_),progname,s$0)}
        usage_b(b,speclist[1],errmsg);
        if(! caml_equal(error,_bb_) && ! caml_equal(error,_bc_))
         return [0,Bad,contents(b)];
        return [0,Help,contents(b)]}
      current[1]++;
      for(;;)
       {if(current[1] < argv[1].length - 1)
         {try
           {var
             _p__=current[1],
             s=caml_check_bound(argv[1],_p__)[1 + _p__],
             switch$0=0;
            if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s,0))
             {try
               {var
                 follow$1=0,
                 _qa_=assoc3(s,speclist[1]),
                 follow$0=follow$1,
                 action=_qa_}
              catch(_qh_)
               {_qh_ = caml_wrap_exception(_qh_);
                if(_qh_ !== Not_found)throw _qh_;
                try
                 {var
                   match=split$1(s),
                   arg=match[2],
                   keyword=match[1],
                   follow=[0,arg],
                   _p$_=assoc3(keyword,speclist[1])}
                catch(_qi_)
                 {_qi_ = caml_wrap_exception(_qi_);
                  if(_qi_ === Not_found)throw [0,Stop,[0,s]];
                  throw _qi_;
                  var _qb_=_qi_}
                var follow$0=follow,action=_p$_,_qc_=_qh_}
              var
               no_arg$0=
                function(s,follow)
                 {function no_arg(param)
                   {if(follow)
                     {var arg=follow[1];throw [0,Stop,[1,s,arg,cst_no_argument]]}
                    return 0}
                  return no_arg},
               no_arg=no_arg$0(s,follow$0),
               get_arg$0=
                function(s,follow)
                 {function get_arg(param)
                   {if(follow){var arg=follow[1];return arg}
                    if((current[1] + 1 | 0) < argv[1].length - 1)
                     {var _qg_=current[1] + 1 | 0;
                      return caml_check_bound(argv[1],_qg_)[1 + _qg_]}
                    throw [0,Stop,[2,s]]}
                  return get_arg},
               get_arg=get_arg$0(s,follow$0),
               consume_arg$0=
                function(follow)
                 {function consume_arg(param)
                   {return follow?0:(current[1]++,0)}
                  return consume_arg},
               consume_arg=consume_arg$0(follow$0),
               treat_action$0=
                function(s,no_arg,get_arg,consume_arg)
                 {function treat_action(param)
                   {switch(param[0])
                     {case 0:var f=param[1];no_arg(0);return caml_call1(f,0);
                      case 1:
                       var
                        f$0=param[1],
                        arg=get_arg(0),
                        match=bool_of_string_opt$0(arg);
                       if(match)
                        {var s$0=match[1];caml_call1(f$0,s$0);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg,cst_a_boolean]];
                      case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                      case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                      case 4:
                       var f$1=param[1],arg$0=get_arg(0);
                       caml_call1(f$1,arg$0);
                       return consume_arg(0);
                      case 5:
                       var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                      case 6:
                       var
                        f$2=param[1],
                        arg$1=get_arg(0),
                        match$0=int_of_string_opt$0(arg$1);
                       if(match$0)
                        {var x=match$0[1];caml_call1(f$2,x);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$1,cst_an_integer]];
                      case 7:
                       var
                        r$2=param[1],
                        arg$2=get_arg(0),
                        match$1=int_of_string_opt$0(arg$2);
                       if(match$1)
                        {var x$0=match$1[1];r$2[1] = x$0;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$2,cst_an_integer$0]];
                      case 8:
                       var
                        f$3=param[1],
                        arg$3=get_arg(0),
                        match$2=float_of_string_opt(arg$3);
                       if(match$2)
                        {var x$1=match$2[1];
                         caml_call1(f$3,x$1);
                         return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$3,cst_a_float]];
                      case 9:
                       var
                        r$3=param[1],
                        arg$4=get_arg(0),
                        match$3=float_of_string_opt(arg$4);
                       if(match$3)
                        {var x$2=match$3[1];r$3[1] = x$2;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$4,cst_a_float$0]];
                      case 10:
                       var specs=param[1];
                       no_arg(0);
                       return iter$2(treat_action,specs);
                      case 11:
                       var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                       if(mem(arg$5,symb))
                        {caml_call1(f$4,arg$5);return consume_arg(0)}
                       throw [0,
                              Stop,
                              [1,
                               s,
                               arg$5,
                               cat(cst_one_of,make_symlist(cst$57,cst$56,cst$55,symb))]];
                      case 12:
                       var f$5=param[1];
                       no_arg(0);
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _qd_=current[1] + 1 | 0;
                           caml_call1(f$5,caml_check_bound(argv[1],_qd_)[1 + _qd_]);
                           consume_arg(0);
                           continue}
                         return 0}
                      case 13:
                       var f$6=param[1];
                       no_arg(0);
                       var acc=[0,0];
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _qf_=current[1] + 1 | 0,_qe_=acc[1];
                           acc[1] = [0,caml_check_bound(argv[1],_qf_)[1 + _qf_],_qe_];
                           consume_arg(0);
                           continue}
                         return caml_call1(f$6,rev(acc[1]))}
                      default:
                       var f$7=param[1];
                       if(1 - allow_expand)
                        throw [0,Invalid_argument,cst_Arg_Expand_is_is_only_allo];
                       var arg$6=get_arg(0),newarg=caml_call1(f$7,arg$6);
                       consume_arg(0);
                       var
                        before=sub$1(argv[1],0,current[1] + 1 | 0),
                        after=
                         sub$1
                          (argv[1],
                           current[1] + 1 | 0,
                           (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                       argv[1]
                       =
                       caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                       return 0}}
                  return treat_action},
               treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
              treat_action(action);
              switch$0 = 1}
            if(! switch$0)caml_call1(anonfun,s)}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            if(exn$0[1] === Bad){var m=exn$0[2];throw convert_error([3,m])}
            if(exn$0[1] === Stop){var e=exn$0[2];throw convert_error(e)}
            throw exn$0;
            var exn=exn$0}
          current[1]++;
          continue}
        return 0}}
    function parse_and_expand_argv_dynamic
     (current,argv,speclist,anonfun,errmsg)
     {return parse_and_expand_argv_dynamic_
              (1,current,argv,speclist,anonfun,errmsg)}
    function parse_argv_dynamic(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_and_expand_argv_dynamic_
              (0,current$0,[0,argv],speclist,anonfun,errmsg)}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_argv_dynamic
              ([0,current$0],argv,[0,speclist],anonfun,errmsg)}
    function parse(l,f,msg)
     {try
       {var _p9_=parse_argv(0,caml_sys_argv(0),l,f,msg);return _p9_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bg_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bh_),msg$1);return exit(0)}
        throw exn}}
    function parse_dynamic(l,f,msg)
     {try
       {var _p8_=parse_argv_dynamic(0,caml_sys_argv(0),l,f,msg);return _p8_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bi_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bj_),msg$1);return exit(0)}
        throw exn}}
    function parse_expand(l,f,msg)
     {try
       {var
         argv=[0,caml_sys_argv(0)],
         spec=[0,l],
         current$0=[0,current[1]],
         _p7_=parse_and_expand_argv_dynamic(current$0,argv,spec,f,msg);
        return _p7_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bk_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bl_),msg$1);return exit(0)}
        throw exn}}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var n$0=index$0(s,9)}
      catch(_p5_)
       {_p5_ = caml_wrap_exception(_p5_);
        if(_p5_ === Not_found)
         {try
           {var n=index$0(s,32)}
          catch(_p6_)
           {_p6_ = caml_wrap_exception(_p6_);
            if(_p6_ === Not_found)return len;
            throw _p6_}
          return loop(n + 1 | 0)}
        throw _p5_}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max$1(cur,caml_ml_string_length(kwd))
              :max$1(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      return map$6
              (function(c)
                {if(9 === c && ! seen[1]){seen[1] = 1;return 32}return c},
               s)}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
      var
       completed=add_help(speclist),
       len=fold_left$0(max_arg_len,0,completed),
       len$0=min$1(len,limit);
      return map$4
              (function(ksd)
                {var _p3_=ksd[1],_p4_=ksd[2];
                 if(caml_string_notequal(ksd[3],cst$58))
                  {if(11 === _p4_[0])
                    {var
                      msg$0=ksd[3],
                      cutcol$0=second_word(msg$0),
                      spaces$0=make$1(max$1(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                     return [0,
                             _p3_,
                             _p4_,
                             cat(cst$59,cat(spaces$0,replace_leading_tab(msg$0)))]}
                   var
                    msg=ksd[3],
                    spec=ksd[2],
                    cutcol=second_word(msg),
                    kwd_len=caml_ml_string_length(_p3_),
                    diff=(len$0 - kwd_len | 0) - cutcol | 0;
                   if(0 < diff)
                    {var
                      spaces=make$1(diff,32),
                      prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                      suffix=
                       sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                     return [0,_p3_,spec,cat(prefix,cat(spaces,suffix))]}
                   return [0,_p3_,spec,replace_leading_tab(msg)]}
                 return ksd},
               completed)}
    function read_aux(trim,sep,file)
     {var ic=open_bin$0(file),buf=create$2(200),words=[0,0];
      function stash(param)
       {var s=contents(buf);
        if(trim)
         {var len=caml_ml_string_length(s),switch$0=0;
          if(0 < len && 13 === caml_string_get(s,len - 1 | 0))
           {var _p2_=sub$0(s,0,len - 1 | 0);switch$0 = 1}
          if(! switch$0)var _p2_=s;
          var word=_p2_}
        else
         var word=s;
        words[1] = [0,word,words[1]];
        return clear$1(buf)}
      try
       {for(;;)
         {var c=caml_ml_input_char(ic);
          if(c === sep)stash(0);else add_char(buf,c);
          continue}}
      catch(_p1_)
       {_p1_ = caml_wrap_exception(_p1_);
        if(_p1_ === End_of_file)
         {if(0 < buf[2])stash(0);
          caml_ml_close_channel(ic);
          return of_list(rev(words[1]))}
        throw _p1_}}
    var _bm_=10,_bn_=1;
    function read_arg(_p0_){return read_aux(_bn_,_bm_,_p0_)}
    var _bo_=0,_bp_=0;
    function read_arg0(_pZ_){return read_aux(_bp_,_bo_,_pZ_)}
    function write_aux(sep,file,args)
     {var oc=open_bin(file);
      iter$5(function(s){return caml_call2(fprintf(oc,_bq_),s,sep)},args);
      return close(oc)}
    var _br_=10;
    function write_arg(_pX_,_pY_){return write_aux(_br_,_pX_,_pY_)}
    var _bs_=0;
    function write_arg0(_pV_,_pW_){return write_aux(_bs_,_pV_,_pW_)}
    var
     Stdlib_Arg=
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    caml_register_global(809,Stdlib_Arg,"Stdlib__Arg");
    var
     Stdlib_Atomic=
      [0,make,get,set,exchange,compare_and_set,fetch_and_add,incr,decr];
    caml_register_global(810,Stdlib_Atomic,"Stdlib__Atomic");
    var printers=[0,0];
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bt_),f)
                :caml_obj_tag(f) === 253?to_string(f):cst$60
              :caml_call1(sprintf(_bu_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$61;
      var _pT_=other_fields(x,i + 1 | 0),_pU_=field(x,i);
      return caml_call2(sprintf(_bv_),_pU_,_pT_)}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}
            catch(_pS_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      return conv(printers[1])}
    function to_string_default(x)
     {if(x === Out_of_memory)return cst_Out_of_memory;
      if(x === Stack_overflow)return cst_Stack_overflow;
      if(x[1] === Match_failure)
       {var match$0=x[2],char$0=match$0[3],line=match$0[2],file=match$0[1];
        return caml_call5
                (sprintf(locfmt),
                 file,
                 line,
                 char$0,
                 char$0 + 5 | 0,
                 cst_Pattern_matching_failed)}
      if(x[1] === Assert_failure)
       {var
         match$1=x[2],
         char$1=match$1[3],
         line$0=match$1[2],
         file$0=match$1[1];
        return caml_call5
                (sprintf(locfmt),
                 file$0,
                 line$0,
                 char$1,
                 char$1 + 6 | 0,
                 cst_Assertion_failed)}
      if(x[1] === Undefined_recursive_module)
       {var
         match$2=x[2],
         char$2=match$2[3],
         line$1=match$2[2],
         file$1=match$2[1];
        return caml_call5
                (sprintf(locfmt),
                 file$1,
                 line$1,
                 char$2,
                 char$2 + 6 | 0,
                 cst_Undefined_recursive_module)}
      if(0 === caml_obj_tag(x))
       {var constructor=x[1][1],match=x.length - 1;
        if(2 < match >>> 0)
         var
          _pO_=other_fields(x,2),
          _pP_=field(x,1),
          _pR_=caml_call2(sprintf(_bw_),_pP_,_pO_);
        else
         switch(match)
          {case 0:var _pR_=cst$62;break;
           case 1:var _pR_=cst$63;break;
           default:var _pQ_=field(x,1),_pR_=caml_call1(sprintf(_bx_),_pQ_)}
        return cat(constructor,_pR_)}
      return x[1]}
    function to_string$6(e)
     {var match=use_printers(e);
      if(match){var s=match[1];return s}
      return to_string_default(e)}
    function print(fct,arg)
     {try
       {var _pN_=caml_call1(fct,arg);return _pN_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _pM_=to_string$6(x);
        caml_call1(eprintf(_by_),_pM_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _pL_=caml_call1(fct,arg);return _pL_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _pK_=to_string$6(x);
        caml_call1(eprintf(_bz_),_pK_);
        return exit(2)}}
    function raw_backtrace_entries(bt){return bt}
    function convert_raw_backtrace(bt)
     {return [0,runtime.caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos?cst_Raised_by_primitive_operat:cst_Called_from}
      if(0 === slot[0])
       {var
         _pC_=slot[5],
         _pD_=slot[4],
         _pE_=slot[3],
         _pF_=slot[6]?cst_inlined:cst$64,
         _pG_=slot[2],
         _pH_=slot[7],
         _pI_=info(slot[1]);
        return [0,
                caml_call7(sprintf(_bA_),_pI_,_pH_,_pG_,_pF_,_pE_,_pD_,_pC_)]}
      if(slot[1])return 0;
      var _pJ_=info(0);
      return [0,caml_call1(sprintf(_bB_),_pJ_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_pA_=a.length - 1 - 1 | 0,_pz_=0;
        if(! (_pA_ < 0))
         {var i=_pz_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bC_),str)}
            var _pB_=i + 1 | 0;
            if(_pA_ !== i){var i=_pB_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bD_)}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtra(0))}
    function raw_backtrace_to_string(raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],b=create$2(1024),_px_=a.length - 1 - 1 | 0,_pw_=0;
        if(! (_px_ < 0))
         {var i=_pw_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(bprintf(b,_bE_),str)}
            var _py_=i + 1 | 0;
            if(_px_ !== i){var i=_py_;continue}
            break}}
        return contents(b)}
      return cst_Program_not_linked_with_g_}
    function backtrace_slot_is_raise(param)
     {return 0 === param[0]?param[1]:param[1]}
    function backtrace_slot_is_inline(param){return 0 === param[0]?param[6]:0}
    function backtrace_slot_location(param)
     {return 0 === param[0]?[0,[0,param[2],param[3],param[4],param[5]]]:0}
    function backtrace_slot_defname(param)
     {if(0 === param[0] && caml_string_notequal(param[7],cst$65))
       return [0,param[7]];
      return 0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(match)
       {var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
        for(;;)
         {if(-1 === i)
           var _pv_=0;
          else
           {var
             param=caml_check_bound(backtrace,i)[1 + i],
             _pu_=0 === param[0]?1:0;
            if(! _pu_){var i$0=i - 1 | 0,i=i$0;continue}
            var _pv_=_pu_}
          return _pv_?[0,backtrace]:0}}
      return 0}
    function backtrace_slots_of_raw_entry(entry)
     {return backtrace_slots([0,entry])}
    function raw_backtrace_length(bt){return bt.length - 1}
    function get_backtrace(param)
     {return raw_backtrace_to_string(caml_get_exception_raw_backtra(0))}
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=printers[1],
         new_printers=[0,fn,old_printers],
         success=compare_and_set(printers,old_printers,new_printers),
         _pt_=1 - success;
        if(_pt_)continue;
        return _pt_}}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    var errors=_bF_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _pr_=to_string$6(exn);
      caml_call1(eprintf(_bG_),_pr_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=runtime.caml_ml_debug_info_status(0);
      if(status < 0)
       {var _ps_=abs(status);
        prerr_endline(caml_check_bound(errors,_ps_)[1 + _ps_])}
      return caml_ml_flush(stderr)}
    var uncaught_exception_handler=[0,default_uncaught_exception_han];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = fn;return 0}
    var empty_backtrace=[0];
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {try
         {var
           raw_backtrace=
            debugger_in_use?empty_backtrace:caml_get_exception_raw_backtra(0);
          try {do_at_exit(0)}catch(_pq_){}
          try
           {var
             _pm_=caml_call2(uncaught_exception_handler[1],exn,raw_backtrace),
             _pl_=_pm_}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            var
             raw_backtrace$0=caml_get_exception_raw_backtra(0),
             _pj_=to_string$6(exn);
            caml_call1(eprintf(_bH_),_pj_);
            print_raw_backtrace(stderr,raw_backtrace);
            var _pk_=to_string$6(exn$0);
            caml_call1(eprintf(_bI_),_pk_);
            print_raw_backtrace(stderr,raw_backtrace$0);
            var _pl_=caml_ml_flush(stderr)}
          var _pn_=_pl_}
        catch(_pp_)
         {_pp_ = caml_wrap_exception(_pp_);
          if(_pp_ !== Out_of_memory)throw _pp_;
          var _pn_=prerr_endline(cst_Fatal_error_out_of_memory_)}
        return _pn_}
      catch(_po_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception);
    function _bJ_(_pi_){return runtime.caml_raw_backtrace_next_slot(_pi_)}
    function _bK_(_ph_){return runtime.caml_convert_raw_backtrace_slot(_ph_)}
    function _bL_(_pg_,_pf_)
     {return runtime.caml_raw_backtrace_slot(_pg_,_pf_)}
    var
     _bM_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       backtrace_slot_defname,
       format_backtrace_slot];
    function _bN_(_pe_){return caml_get_exception_raw_backtra(_pe_)}
    function _bO_(_pd_){return runtime.caml_backtrace_status(_pd_)}
    var
     Stdlib_Printexc=
      [0,
       to_string$6,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_pc_){return runtime.caml_record_backtrace(_pc_)},
       _bO_,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       _bN_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       _bM_,
       raw_backtrace_length,
       _bL_,
       _bK_,
       _bJ_,
       exn_slot_id,
       exn_slot_name];
    caml_register_global(811,Stdlib_Printexc,"Stdlib__Printexc");
    function const$0(c,param){return c}
    function flip(f,x,y){return caml_call2(f,y,x)}
    function negate(p,v){return 1 - caml_call1(p,v)}
    var
     Finally_raised=
      [248,cst_Stdlib_Fun_Finally_raised,caml_fresh_oo_id(0)];
    register_printer
     (function(param)
       {if(param[1] === Finally_raised)
         {var exn=param[2];
          return [0,cat(cst_Fun_Finally_raised,to_string$6(exn))]}
        return 0});
    function protect(finally$0,work)
     {function finally_no_exn(param)
       {try
         {var _pb_=caml_call1(finally$0,0);return _pb_}
        catch(e)
         {e = caml_wrap_exception(e);
          var bt=caml_get_exception_raw_backtra(0),exn=[0,Finally_raised,e];
          caml_restore_raw_backtrace(exn,bt);
          throw exn}}
      try
       {var result=caml_call1(work,0)}
      catch(work_exn)
       {work_exn = caml_wrap_exception(work_exn);
        var work_bt=caml_get_exception_raw_backtra(0);
        finally_no_exn(0);
        caml_restore_raw_backtrace(work_exn,work_bt);
        throw work_exn}
      finally_no_exn(0);
      return result}
    var Stdlib_Fun=[0,const$0,flip,negate,protect,Finally_raised];
    caml_register_global(812,Stdlib_Fun,"Stdlib__Fun");
    function print_stat(c)
     {var st=runtime.caml_gc_stat(0),_oV_=st[4];
      caml_call1(fprintf(c,_bP_),_oV_);
      var _oW_=st[5];
      caml_call1(fprintf(c,_bQ_),_oW_);
      var _oX_=st[14];
      caml_call1(fprintf(c,_bR_),_oX_);
      var _oY_=st[17];
      caml_call1(fprintf(c,_bS_),_oY_);
      fprintf(c,_bT_);
      var
       _oZ_=st[1],
       l1=caml_ml_string_length(caml_call1(sprintf(_bU_),_oZ_)),
       _o0_=st[1];
      caml_call2(fprintf(c,_bV_),l1,_o0_);
      var _o1_=st[2];
      caml_call2(fprintf(c,_bW_),l1,_o1_);
      var _o2_=st[3];
      caml_call2(fprintf(c,_bX_),l1,_o2_);
      fprintf(c,_bY_);
      var
       _o3_=st[15],
       l2=caml_ml_string_length(caml_call1(sprintf(_bZ_),_o3_)),
       _o4_=st[15];
      caml_call2(fprintf(c,_b0_),l2,_o4_);
      var _o5_=st[6];
      caml_call2(fprintf(c,_b1_),l2,_o5_);
      var _o6_=st[8];
      caml_call2(fprintf(c,_b2_),l2,_o6_);
      var _o7_=st[10];
      caml_call2(fprintf(c,_b3_),l2,_o7_);
      var _o8_=st[12];
      caml_call2(fprintf(c,_b4_),l2,_o8_);
      var _o9_=st[13];
      caml_call2(fprintf(c,_b5_),l2,_o9_);
      fprintf(c,_b6_);
      var _o__=st[9];
      caml_call1(fprintf(c,_b7_),_o__);
      var _o$_=st[11];
      caml_call1(fprintf(c,_b8_),_o$_);
      var _pa_=st[7];
      return caml_call1(fprintf(c,_b9_),_pa_)}
    function allocated_bytes(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function create_alarm(f){return [0,1]}
    function delete_alarm(a){a[1] = 0;return 0}
    function _b__(param){return 0}
    function _b$_(param){return 0}
    function _ca_(param){return 0}
    function _cb_(param){return 0}
    var null_tracker=[0,function(param){return 0},_cb_,_ca_,_b$_,_b__];
    function start(sampling_rate,opt,tracker)
     {if(opt)
       var sth=opt[1],callstack_size=sth;
      else
       var callstack_size=max_int;
      return runtime.caml_memprof_start(sampling_rate,callstack_size,tracker)}
    var _cc_=[0,null_tracker,start,runtime.caml_memprof_stop];
    function _cd_(_oU_){return runtime.caml_final_release(_oU_)}
    function _ce_(_oT_,_oS_)
     {return runtime.caml_final_register_called_without_value(_oT_,_oS_)}
    var
     Stdlib_Gc=
      [0,
       print_stat,
       allocated_bytes,
       function(_oR_,_oQ_){return runtime.caml_final_register(_oR_,_oQ_)},
       _ce_,
       _cd_,
       create_alarm,
       delete_alarm,
       _cc_];
    caml_register_global(813,Stdlib_Gc,"Stdlib__Gc");
    function string(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function bytes(b){return string(caml_string_of_bytes(b))}
    function substring(str,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(str) - len | 0) < ofs))
       return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function subbytes(b,ofs,len)
     {return substring(caml_string_of_bytes(b),ofs,len)}
    function file(filename)
     {var ic=open_bin$0(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function output$0(chan,digest){return output_string(chan,digest)}
    function input$0(chan){return really_input_string(chan,16)}
    function char_hex(n){var _oP_=10 <= n?87:48;return n + _oP_ | 0}
    function to_hex(d)
     {if(16 !== caml_ml_string_length(d))invalid_arg(cst_Digest_to_hex);
      var result=caml_create_bytes(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,char_hex(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,char_hex(x & 15));
        var _oO_=i + 1 | 0;
        if(15 !== i){var i=_oO_;continue}
        return caml_string_of_bytes(result)}}
    function from_hex(s)
     {if(32 !== caml_ml_string_length(s))invalid_arg(cst_Digest_from_hex);
      function digit(c)
       {if(65 <= c)
         {if(97 <= c)
           {if(! (103 <= c))return (c - 97 | 0) + 10 | 0}
          else
           if(! (71 <= c))return (c - 65 | 0) + 10 | 0}
        else
         if(! (9 < c - 48 >>> 0))return c - 48 | 0;
        throw [0,Invalid_argument,cst_Digest_from_hex$0]}
      var result=caml_create_bytes(16),i=0;
      for(;;)
       {var i$0=2 * i | 0,_oM_=digit(caml_string_get(s,i$0 + 1 | 0));
        caml_bytes_set
         (result,i,chr((digit(caml_string_get(s,i$0)) << 4) + _oM_ | 0));
        var _oN_=i + 1 | 0;
        if(15 !== i){var i=_oN_;continue}
        return caml_string_of_bytes(result)}}
    var
     Stdlib_Digest=
      [0,
       compare$9,
       equal$9,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output$0,
       input$0,
       to_hex,
       from_hex];
    caml_register_global(814,Stdlib_Digest,"Stdlib__Digest");
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {blit$1(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[1 + i$0] = i$0;
        var _oL_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_oL_;continue}
        var accu=[0,cst_x$1],_oH_=54 + max$1(55,l) | 0,_oG_=0;
        if(! (_oH_ < 0))
         {var i=_oG_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[1 + k];
            accu[1] = string(cat(accu[1],caml_string_of_jsbytes("" + x)));
            var
             _oI_=accu[1],
             _oC_=caml_string_get(_oI_,3) << 24,
             _oD_=caml_string_get(_oI_,2) << 16,
             _oE_=caml_string_get(_oI_,1) << 8,
             _oF_=((caml_string_get(_oI_,0) + _oE_ | 0) + _oD_ | 0) + _oC_ | 0,
             _oJ_=(caml_check_bound(s[1],j)[1 + j] ^ _oF_) & 1073741823;
            caml_check_bound(s[1],j)[1 + j] = _oJ_;
            var _oK_=i + 1 | 0;
            if(_oH_ !== i){var i=_oK_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$3(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$3(caml_sys_random_seed(0))}
    function copy$5(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _oz_=s[2],
       curval=caml_check_bound(s[1],_oz_)[1 + _oz_],
       _oA_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_oA_)[1 + _oA_]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _oB_=s[2];
      caml_check_bound(s[1],_oB_)[1 + _oB_] = newval30;
      return newval30}
    function intaux(s,n)
     {for(;;)
       {var r=bits(s),v=caml_mod(r,n);
        if(((1073741823 - n | 0) + 1 | 0) < (r - v | 0))continue;
        return v}}
    function int$0(s,bound)
     {if(! (1073741823 < bound) && 0 < bound)return intaux(s,bound);
      return invalid_arg(cst_Random_int)}
    function full_int(s,bound)
     {if(0 < bound)
       {if(1073741823 < bound)
         for(;;)
          {var b1=bits(s),b2=bits(s);
           if(bound <= 2147483647)
            var bpos=(b2 & 1073725440) << 1 | b1 >>> 15 | 0,r=bpos;
           else
            var
             b3=bits(s),
             bpos$0=
              ((b3 & 1073741312) << 12 | b2 >>> 9 | 0)
              <<
              20
              |
              b1
              >>>
              10
              |
              0,
             r=bpos$0;
           var v=caml_mod(r,bound);
           if(((2147483647 - bound | 0) + 1 | 0) < (r - v | 0))continue;
           return v}
        return intaux(s,bound)}
      return invalid_arg(cst_Random_full_int)}
    function int32(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var b1=bits(s),b2=(bits(s) & 1) << 30,r=b1 | b2,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function int64(s,bound)
     {if(caml_lessequal(bound,_cg_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         b1=caml_int64_of_int32(bits(s)),
         b2=caml_int64_shift_left(caml_int64_of_int32(bits(s)),30),
         b3=caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7),60),
         r=caml_int64_or(b1,caml_int64_or(b2,b3)),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(max_int$2,bound),_cf_)))
         continue;
        return v}}
    function nativeint(s,bound){return int32(s,bound)}
    function float$0(s,bound)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824. + r2) / 1073741824. * bound}
    function bool(s){return 0 === (bits(s) & 1)?1:0}
    function bits32(s)
     {var b1=bits(s) >>> 14 | 0,b2=bits(s) >>> 14 | 0;return b1 | b2 << 16}
    function bits64(s)
     {var
       b1=caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)),9),
       b2=caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)),9),
       b3=caml_int64_shift_right_unsigne(caml_int64_of_int32(bits(s)),8);
      return caml_int64_or
              (b1,
               caml_int64_or
                (caml_int64_shift_left(b2,21),caml_int64_shift_left(b3,42)))}
    function nativebits(s){return bits32(s)}
    var default$0=[0,_ch_.slice(),0];
    function bits$0(param){return bits(default$0)}
    function int$1(bound){return int$0(default$0,bound)}
    function full_int$0(bound){return full_int(default$0,bound)}
    function int32$0(bound){return int32(default$0,bound)}
    function nativeint$0(bound){return nativeint(default$0,bound)}
    function int64$0(bound){return int64(default$0,bound)}
    function float$1(scale){return float$0(default$0,scale)}
    function bool$0(param){return bool(default$0)}
    function bits32$0(param){return bits32(default$0)}
    function bits64$0(param){return bits64(default$0)}
    function nativebits$0(param){return nativebits(default$0)}
    function full_init$0(seed){return full_init(default$0,seed)}
    function init$5(seed){return full_init(default$0,[0,seed])}
    function self_init(param){return full_init$0(caml_sys_random_seed(0))}
    function get_state(param){return copy$5(default$0)}
    function set_state(s){return assign(default$0,s)}
    var
     _ci_=
      [0,
       make$3,
       make_self_init,
       copy$5,
       bits,
       int$0,
       full_int,
       int32,
       nativeint,
       int64,
       float$0,
       bool,
       bits32,
       bits64,
       nativebits],
     Stdlib_Random=
      [0,
       init$5,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       full_int$0,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       _ci_,
       get_state,
       set_state];
    caml_register_global(815,Stdlib_Random,"Stdlib__Random");
    function ongoing_traversal(h)
     {var _ox_=h.length - 1 < 4?1:0,_oy_=_ox_ || (h[4] < 0?1:0);return _oy_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _c5_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_c5_}
    catch(_ov_)
     {_ov_ = caml_wrap_exception(_ov_);
      if(_ov_ !== Not_found)throw _ov_;
      try
       {var _c4_=caml_sys_getenv(cst_CAMLRUNPARAM),_cj_=_c4_}
      catch(_ow_)
       {_ow_ = caml_wrap_exception(_ow_);
        if(_ow_ !== Not_found)throw _ow_;
        var _cj_=cst$66}
      var params=_cj_}
    var
     randomized_default=contains$0(params,82),
     randomized=[0,randomized_default];
    function randomize(param){randomized[1] = 1;return 0}
    function is_randomized(param){return randomized[1]}
    var prng=[246,function(_ou_){return caml_call1(_ci_[2],0)}];
    function power_2_above(x,n)
     {var x$0=x;
      for(;;)
       {if(n <= x$0)return x$0;
        if(max_array_length < (x$0 * 2 | 0))return x$0;
        var x$1=x$0 * 2 | 0,x$0=x$1;
        continue}}
    function create$3(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized[1];
      var s=power_2_above(16,initial_size);
      if(random)
       var
        _os_=caml_obj_tag(prng),
        _ot_=250 === _os_?prng[1]:246 === _os_?force_lazy_block(prng):prng,
        seed=caml_call1(_ci_[4],_ot_);
      else
       var seed=0;
      return [0,0,caml_make_vect(s,0),seed,s]}
    function clear$2(h)
     {var _or_=0 < h[1]?1:0;
      return _or_?(h[1] = 0,fill$0(h[2],0,h[2].length - 1,0)):_or_}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1 && len !== abs(h[4]))
       {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            prec[3] = r;
            var prec=r,param$0=next$0;
            continue}
          return prec$0}}
      return 0}
    function copy$6(init)
     {var _oo_=init[4],_op_=init[3],_oq_=map$7(copy_bucketlist,init[2]);
      return [0,init[1],_oq_,_op_,_oo_]}
    function length$5(h){return h[1]}
    function insert_all_buckets(indexfun,inplace,odata,ndata)
     {var
       nsize=ndata.length - 1,
       ndata_tail=caml_make_vect(nsize,0),
       _oi_=odata.length - 1 - 1 | 0,
       _oh_=0;
      if(! (_oi_ < 0))
       {var i$0=_oh_;
        a:
        for(;;)
         {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
          for(;;)
           {if(cell)
             {var
               key=cell[1],
               data=cell[2],
               next=cell[3],
               cell$0=inplace?cell:[0,key,data,0],
               nidx=caml_call1(indexfun,key),
               match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
              if(match)
               match[3] = cell$0;
              else
               caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
              caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
              var cell=next;
              continue}
            var _on_=i$0 + 1 | 0;
            if(_oi_ !== i$0){var i$0=_on_;continue a}
            break}
          break}}
      if(inplace)
       {var _ok_=nsize - 1 | 0,_oj_=0;
        if(! (_ok_ < 0))
         {var i=_oj_;
          for(;;)
           {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
            if(match$0)match$0[3] = 0;
            var _om_=i + 1 | 0;
            if(_ok_ !== i){var i=_om_;continue}
            break}}
        var _ol_=0}
      else
       var _ol_=inplace;
      return _ol_}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _og_=nsize < max_array_length?1:0;
      if(_og_)
       {var ndata=caml_make_vect(nsize,0),inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        return insert_all_buckets(caml_call1(indexfun,h),inplace,odata,ndata)}
      return _og_}
    function iter$10(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
            caml_call2(f,key,data);
            var param$0=next;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_oc_=d.length - 1 - 1 | 0,_ob_=0;
        if(! (_oc_ < 0))
         {var i=_ob_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[1 + i]);
            var _of_=i + 1 | 0;
            if(_oc_ !== i){var i=_of_;continue}
            break}}
        var _od_=1 - old_trav,_oe_=_od_?flip_ongoing_traversal(h):_od_;
        return _oe_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             caml_check_bound(h[2],i)[1 + i] = slot$0;
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        return prec$0
                ?(prec$0[3] = 0,0)
                :(caml_check_bound(h[2],i)[1 + i] = 0,0)}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _n9_=d.length - 1 - 1 | 0,_n8_=0;
        if(! (_n9_ < 0))
         {var i=_n8_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
            var _oa_=i + 1 | 0;
            if(_n9_ !== i){var i=_oa_;continue}
            break}}
        var _n__=1 - old_trav,_n$_=_n__?flip_ongoing_traversal(h):_n__;
        return _n$_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$4(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_n4_=d.length - 1 - 1 | 0,_n3_=0;
        if(! (_n4_ < 0))
         {var i=_n3_;
          for(;;)
           {var _n6_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_n6_);
            var _n7_=i + 1 | 0;
            if(_n4_ !== i){var i=_n7_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _n5_=accu[1];
        return _n5_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var
       _nZ_=h[2],
       _n0_=0,
       mbl=
        fold_left$3
         (function(m,b){return max$1(m,bucket_length(0,b))},_n0_,_nZ_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _n1_=h[2];
      iter$5
       (function(b)
         {var
           l=bucket_length(0,b),
           _n2_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
          caml_check_bound(histo,l)[1 + l] = _n2_;
          return 0},
        _n1_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq$9(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_nY_){return aux(i$0,next,_nY_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _nV_=0,_nW_=0;
      return function(_nX_){return aux(_nW_,_nV_,_nX_)}}
    function to_seq_keys(m)
     {var _nR_=to_seq$9(m);
      function _nS_(_nU_){return _nU_[1]}
      return function(_nT_){return map$1(_nS_,_nR_,_nT_)}}
    function to_seq_values(m)
     {var _nN_=to_seq$9(m);
      function _nO_(_nQ_){return _nQ_[2]}
      return function(_nP_){return map$1(_nO_,_nN_,_nP_)}}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _nM_=h[2].length - 1 - 1 | 0;
        return caml_call2(H[2],h[3],key) & _nM_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _nL_=h[2].length - 1 << 1 < h[1]?1:0;
        return _nL_?resize$0(key_index,h):_nL_}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
            if(caml_call2(H[1],k,key))
             {h[1] = h[1] - 1 | 0;
              return prec
                      ?(prec[3] = next,0)
                      :(caml_check_bound(h[2],i)[1 + i] = next,0)}
            var prec=c,c=next;
            continue}
          return 0}}
      function find(h,key)
       {var _nK_=key_index(h,key),match=caml_check_bound(h[2],_nK_)[1 + _nK_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return data;
                  var param=next;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_opt(h,key)
       {var _nJ_=key_index(h,key),match=caml_check_bound(h[2],_nJ_)[1 + _nJ_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
              if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _nI_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_nI_)[1 + _nI_])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(H[1],k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _nF_=0}
          else
           var _nF_=1;
          if(_nF_)
           {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _nG_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_nG_)return resize$0(key_index,h);
            var _nH_=_nG_}
          else
           var _nH_=_nF_;
          return _nH_}}
      function mem(h,key)
       {var
         _nE_=key_index(h,key),
         param$0=caml_check_bound(h[2],_nE_)[1 + _nE_],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3],_nD_=caml_call2(H[1],k,key);
            if(_nD_)return _nD_;
            var param=next;
            continue}
          return 0}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create$3,
              clear$2,
              reset$0,
              copy$6,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$10,
              filter_map_inplace,
              fold$4,
              length$5,
              stats,
              to_seq$9,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function Make$0(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       _nC_=include[1];
      function create(sz){return caml_call2(_nC_,_ck_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function hash$1(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash(seed,x){return caml_hash(10,100,seed,x)}
    function key_index(h,key)
     {return 4 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :invalid_arg(cst_Hashtbl_unsupported_hash_t)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
      caml_check_bound(h[2],i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _nB_=h[2].length - 1 << 1 < h[1]?1:0;
      return _nB_?resize$0(key_index,h):_nB_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[1 + i],prec=0,c=c$0;
      for(;;)
       {if(c)
         {var k=c[1],next=c[3];
          if(0 === caml_compare(k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :(caml_check_bound(h[2],i)[1 + i] = next,0)}
          var prec=c,c=next;
          continue}
        return 0}}
    function find$1(h,key)
     {var _nA_=key_index(h,key),match=caml_check_bound(h[2],_nA_)[1 + _nA_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_opt$1(h,key)
     {var _nz_=key_index(h,key),match=caml_check_bound(h[2],_nz_)[1 + _nz_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return [0,d1];
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return [0,d2];
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return [0,d3];
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return [0,data];
                var param=next;
                continue}
              return 0}}
          return 0}
        return 0}
      return 0}
    function find_all$0(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3];
            if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _ny_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_ny_)[1 + _ny_])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _nv_=0}
        else
         var _nv_=1;
        if(_nv_)
         {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _nw_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_nw_)return resize$0(key_index,h);
          var _nx_=_nw_}
        else
         var _nx_=_nv_;
        return _nx_}}
    function mem$2(h,key)
     {var
       _nu_=key_index(h,key),
       param$0=caml_check_bound(h[2],_nu_)[1 + _nu_],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_nt_=0 === caml_compare(k,key)?1:0;
          if(_nt_)return _nt_;
          var param=next;
          continue}
        return 0}}
    function add_seq$2(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return add$0(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq$7(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
    function rebuild(opt,h)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized[1];
      var s=power_2_above(16,h[2].length - 1);
      if(random)
       var
        _nm_=caml_obj_tag(prng),
        _nn_=250 === _nm_?prng[1]:246 === _nm_?force_lazy_block(prng):prng,
        seed=caml_call1(_ci_[4],_nn_);
      else
       var seed=4 <= h.length - 1?h[3]:0;
      var
       _no_=4 <= h.length - 1?h[4]:s,
       h$0=[0,h[1],caml_make_vect(s,0),seed,_no_],
       _np_=h$0[2],
       _nq_=h[2],
       _nr_=0;
      insert_all_buckets
       (function(_ns_){return key_index(h$0,_ns_)},_nr_,_nq_,_np_);
      return h$0}
    var
     Stdlib_Hashtbl=
      [0,
       create$3,
       clear$2,
       reset$0,
       copy$6,
       add$0,
       find$1,
       find_opt$1,
       find_all$0,
       mem$2,
       remove,
       replace,
       iter$10,
       filter_map_inplace,
       fold$4,
       length$5,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq$9,
       to_seq_keys,
       to_seq_values,
       add_seq$2,
       replace_seq,
       of_seq$7,
       Make$0,
       MakeSeeded,
       hash$1,
       seeded_hash,
       hash_param,
       caml_hash];
    caml_register_global(816,Stdlib_Hashtbl,"Stdlib__Hashtbl");
    function weak_create(l)
     {var _nk_=0 <= l?1:0,_nl_=_nk_?l <= _q_[15]?1:0:_nk_;
      if(1 - _nl_)invalid_arg(cst_Weak_create);
      return runtime.caml_weak_create(l)}
    function length$6(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset$0(e,o,msg)
     {var _nh_=0 <= o?1:0,_ni_=_nh_?o < length$6(e)?1:0:_nh_,_nj_=1 - _ni_;
      return _nj_?invalid_arg(msg):_nj_}
    function set$1(e,o,x)
     {raise_if_invalid_offset$0(e,o,cst_Weak_set);
      if(x){var x$0=x[1];return caml_ephe_set_key(e,o,x$0)}
      return caml_ephe_unset_key(e,o)}
    function get$2(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get);
      return runtime.caml_weak_get(e,o)}
    function get_copy(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get_copy);
      return runtime.caml_weak_get_copy(e,o)}
    function check$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_check);
      return runtime.caml_weak_check(e,o)}
    function blit$4(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$6(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$6(e2) - l | 0) < o2))
       {var
         _nf_=0 !== l?1:0,
         _ng_=_nf_?runtime.caml_weak_blit(e1,o1,e2,o2,l):_nf_;
        return _ng_}
      return invalid_arg(cst_Weak_blit)}
    function fill$2(ar,ofs,len,x)
     {if(0 <= ofs && 0 <= len && ! ((length$6(ar) - len | 0) < ofs))
       {var _nd_=(ofs + len | 0) - 1 | 0;
        if(! (_nd_ < ofs))
         {var i=ofs;
          for(;;)
           {set$1(ar,i,x);
            var _ne_=i + 1 | 0;
            if(_nd_ !== i){var i=_ne_;continue}
            break}}
        return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    function Make$1(H)
     {var emptybucket=weak_create(0);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0;
        return [0,
                caml_make_vect(sz$1,emptybucket),
                caml_make_vect(sz$1,[0]),
                limit,
                0,
                0]}
      function clear(t)
       {var _nb_=t[1].length - 1 - 1 | 0,_na_=0;
        if(! (_nb_ < 0))
         {var i=_na_;
          for(;;)
           {caml_check_bound(t[1],i)[1 + i] = emptybucket;
            caml_check_bound(t[2],i)[1 + i] = [0];
            var _nc_=i + 1 | 0;
            if(_nb_ !== i){var i=_nc_;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {var _m$_=t[1],i=0;
        return fold_right$2
                (function(b,accu$1)
                  {var i$0=i,accu=accu$1;
                   for(;;)
                    {if(length$6(b) <= i$0)return accu;
                     var match=get$2(b,i$0);
                     if(match)
                      {var
                        v=match[1],
                        accu$0=caml_call2(f,v,accu),
                        i$1=i$0 + 1 | 0,
                        i$0=i$1,
                        accu=accu$0;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _m$_,
                 init)}
      function iter(f,t)
       {var _m__=t[1],i=0;
        return iter$5
                (function(b)
                  {var i$0=i;
                   for(;;)
                    {if(length$6(b) <= i$0)return 0;
                     var match=get$2(b,i$0);
                     if(match)
                      {var v=match[1];
                       caml_call1(f,v);
                       var i$1=i$0 + 1 | 0,i$0=i$1;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _m__)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$6(b) <= i$0)return accu$0;
          var
           _m9_=check$0(b,i$0)?1:0,
           accu$1=accu$0 + _m9_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function count(t)
       {var _m4_=0,_m5_=t[1],_m6_=0;
        return fold_right$2
                (function(_m7_,_m8_){return count_bucket(_m6_,_m7_,_m8_)},
                 _m5_,
                 _m4_)}
      function add_aux(t,setter,d,h,index)
       {var
         bucket$0=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket$0),
         i$3=0;
        for(;;)
         {if(sz <= i$3)
           {var
             newsz=
              min$1(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
            if(newsz <= sz)failwith(cst_Weak_Make_hash_bucket_cann);
            var
             newbucket$0=weak_create(newsz),
             newhashes=caml_make_vect(newsz,0);
            blit$4(bucket$0,0,newbucket$0,0,sz);
            blit$1(hashes,0,newhashes,0,sz);
            caml_call3(setter,newbucket$0,sz,d);
            caml_check_bound(newhashes,sz)[1 + sz] = h;
            caml_check_bound(t[1],index)[1 + index] = newbucket$0;
            caml_check_bound(t[2],index)[1 + index] = newhashes;
            var _m0_=sz <= t[3]?1:0,_m1_=_m0_?t[3] < newsz?1:0:_m0_;
            if(_m1_)
             {t[4] = t[4] + 1 | 0;
              var i$4=0;
              for(;;)
               {var
                 _mQ_=t[5],
                 bucket=caml_check_bound(t[1],_mQ_)[1 + _mQ_],
                 _mR_=t[5],
                 hbucket=caml_check_bound(t[2],_mR_)[1 + _mR_],
                 n=length$6(bucket),
                 prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
                 live=count_bucket(0,bucket,0);
                if(live <= prev_len)
                 {var j$2=length$6(bucket) - 1 | 0,i$0=0,j=j$2;
                  for(;;)
                   {if(prev_len <= j)
                     {if(check$0(bucket,i$0))
                       {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      if(check$0(bucket,j))
                       {blit$4(bucket,j,bucket,i$0,1);
                        var _mS_=caml_check_bound(hbucket,j)[1 + j];
                        caml_check_bound(hbucket,i$0)[1 + i$0] = _mS_;
                        var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                        continue}
                      var j$1=j - 1 | 0,j=j$1;
                      continue}
                    if(0 === prev_len)
                     {var _mT_=t[5];
                      caml_check_bound(t[1],_mT_)[1 + _mT_] = emptybucket;
                      var _mU_=t[5];
                      caml_check_bound(t[2],_mU_)[1 + _mU_] = [0]}
                    else
                     {var newbucket=weak_create(prev_len);
                      blit$4(bucket,0,newbucket,0,prev_len);
                      var _mX_=t[5];
                      caml_check_bound(t[1],_mX_)[1 + _mX_] = newbucket;
                      var _mY_=sub$1(hbucket,0,prev_len),_mZ_=t[5];
                      caml_check_bound(t[2],_mZ_)[1 + _mZ_] = _mY_}
                    var _mV_=t[3] < n?1:0,_mW_=_mV_?prev_len <= t[3]?1:0:_mV_;
                    if(_mW_)t[4] = t[4] - 1 | 0;
                    break}}
                t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
                var _m3_=i$4 + 1 | 0;
                if(2 !== i$4){var i$4=_m3_;continue}
                break}}
            var _m2_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
            if(_m2_)
             {var
               n$0=t[1].length - 1,
               newlen=min$1(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
              if(n$0 < newlen)
               {var newt=create(newlen),_mP_=t[1],i=0;
                iteri$3
                 (function(j,ob)
                   {var i$0=i;
                    for(;;)
                     {if(length$6(ob) <= i$0)return 0;
                      var match=check$0(ob,i$0);
                      if(match)
                       {var
                         oh=caml_check_bound(t[2],j)[1 + j],
                         setter$0=
                          function(i)
                           {function setter(nb,ni,param){return blit$4(ob,i,nb,ni,1)}
                            return setter},
                         setter=setter$0(i$0),
                         h=caml_check_bound(oh,i$0)[1 + i$0];
                        add_aux(newt,setter,0,h,get_index(newt,h));
                        var i$1=i$0 + 1 | 0,i$0=i$1;
                        continue}
                      var i$2=i$0 + 1 | 0,i$0=i$2;
                      continue}},
                  _mP_);
                t[1] = newt[1];
                t[2] = newt[2];
                t[3] = newt[3];
                t[4] = newt[4];
                t[5] = caml_mod(t[5],newt[1].length - 1);
                return 0}
              t[3] = max_int;
              t[4] = 0;
              return 0}
            return _m2_}
          if(check$0(bucket$0,i$3)){var i$5=i$3 + 1 | 0,i$3=i$5;continue}
          caml_call3(setter,bucket$0,i$3,d);
          caml_check_bound(hashes,i$3)[1 + i$3] = h;
          return 0}}
      function add(t,d)
       {var h=caml_call1(H[2],d);
        return add_aux(t,set$1,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return caml_call2(ifnotfound,h,index);
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$2(bucket,i);
                if(match$0){var v$0=match$0[1];return v$0}
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function merge(t,d)
       {return find_or
                (t,
                 d,
                 function(h,index){add_aux(t,set$1,[0,d],h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return 0;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var v$0=get$2(bucket,i);
                if(v$0)return v$0;
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return ifnotfound;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
            var i$0=i + 1 | 0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}}
      function remove(t,d)
       {var _mO_=0;
        return find_shadow(t,d,function(w,i){return set$1(w,i,0)},_mO_)}
      function mem(t,d)
       {var _mN_=0;return find_shadow(t,d,function(w,i){return 1},_mN_)}
      function find_all(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$6(bucket),
         i=0,
         accu=0;
        for(;;)
         {if(sz <= i)return accu;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$2(bucket,i);
                if(match$0)
                 {var
                   v$0=match$0[1],
                   accu$0=[0,v$0,accu],
                   i$0=i + 1 | 0,
                   i=i$0,
                   accu=accu$0;
                  continue}
                var i$1=i + 1 | 0,i=i$1;
                continue}}
            var i$2=i + 1 | 0,i=i$2;
            continue}
          var i$3=i + 1 | 0,i=i$3;
          continue}}
      function stats(t)
       {var len=t[1].length - 1,lens=map$7(length$6,t[1]);
        sort(caml_int_compare,lens);
        var
         _mF_=0,
         totlen=
          fold_left$3(function(_mM_,_mL_){return _mM_ + _mL_ | 0},_mF_,lens),
         _mG_=len - 1 | 0,
         _mI_=len / 2 | 0,
         _mH_=caml_check_bound(lens,_mG_)[1 + _mG_],
         _mJ_=caml_check_bound(lens,_mI_)[1 + _mI_],
         _mK_=caml_check_bound(lens,0)[1];
        return [0,len,count(t),totlen,_mK_,_mJ_,_mH_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    var
     Stdlib_Weak=
      [0,
       weak_create,
       length$6,
       set$1,
       get$2,
       get_copy,
       check$0,
       fill$2,
       blit$4,
       Make$1];
    caml_register_global(817,Stdlib_Weak,"Stdlib__Weak");
    function id$0(x){return x}
    var
     String_tag=[248,cst_Stdlib_Format_String_tag,caml_fresh_oo_id(0)],
     size=0,
     unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _mE_=caml_string_notequal(s,cst$67);
      return _mE_?format_pp_text(state,caml_ml_string_length(s),s):_mE_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min$1(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_cl_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function format_pp_token(state,size$0,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var match$3=top_opt(state[3]);
          if(match$3)
           {var
             match$4=match$3[1],
             tabs=match$4[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:pop_opt(state[2]);return 0;
         case 2:pop_opt(state[3]);return 0;
         case 3:
          var match$5=top_opt(state[2]);
          if(match$5)
           {var match$6=match$5[1],width$0=match$6[2];
            return break_line(state,width$0)}
          return pp_output_newline(state);
         case 4:
          var _mB_=state[10] !== (state[6] - state[9] | 0)?1:0;
          if(_mB_)
           {var match$1=take_opt(state[28]);
            if(match$1)
             {var match$2=match$1[1],size=match$2[1],length=match$2[3];
              state[12] = state[12] - length | 0;
              state[9] = state[9] + size | 0;
              return 0}
            return 0}
          return _mB_;
         default:
          var match$7=pop_opt(state[5]);
          if(match$7)
           {var tag_name=match$7[1],marker=caml_call1(state[25],tag_name);
            return pp_output_string(state,marker)}
          return 0}
      else
       switch(param[0])
        {case 0:var s=param[1];return format_pp_text(state,size$0,s);
         case 1:
          var
           breaks=param[2],
           fits=param[1],
           off=breaks[2],
           before=breaks[1],
           match$8=top_opt(state[2]);
          if(match$8)
           {var match$9=match$8[1],width$1=match$9[2],box_type$0=match$9[1];
            switch(box_type$0)
             {case 0:return break_same_line(state,fits);
              case 1:return break_new_line(state,breaks,width$1);
              case 2:return break_new_line(state,breaks,width$1);
              case 3:
               return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                       ?break_new_line(state,breaks,width$1)
                       :break_same_line(state,fits);
              case 4:
               return state[11]
                       ?break_same_line(state,fits)
                       :state[9] < (size$0 + caml_ml_string_length(before) | 0)
                         ?break_new_line(state,breaks,width$1)
                         :((state[6] - width$1 | 0) + off | 0) < state[10]
                           ?break_new_line(state,breaks,width$1)
                           :break_same_line(state,fits);
              default:return break_same_line(state,fits)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n=param[1],
           insertion_point=state[6] - state[9] | 0,
           match$10=top_opt(state[3]);
          if(match$10)
           {var match$11=match$10[1],tabs$0=match$11[1],_mC_=tabs$0[1];
            if(_mC_)
             {var first=_mC_[1],param$0=tabs$0[1];
              for(;;)
               {if(param$0)
                 {var tail=param$0[2],head=param$0[1];
                  if(! (insertion_point <= head)){var param$0=tail;continue}
                  var _mD_=head}
                else
                 var _mD_=first;
                var tab=_mD_;
                break}}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,[0,cst$69,offset + n | 0,cst$68])
                    :break_new_line
                      (state,[0,cst$71,tab + off$0 | 0,cst$70],state[6])}
          return 0;
         case 3:
          var
           ty=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)
           {var match=top_opt(state[2]);
            if(match)
             {var match$0=match[1],width=match$0[2],box_type=match$0[1];
              if(state[9] < width && ! (3 < box_type - 1 >>> 0))
               break_line(state,width)}
            else
             pp_output_newline(state)}
          var
           width$2=state[9] - off$1 | 0,
           box_type$1=1 === ty?1:state[9] < size$0?ty:5;
          return push([0,box_type$1,width$2],state[2]);
         case 4:var tbox=param[1];return push(tbox,state[3]);
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[24],tag_name$0);
          pp_output_string(state,marker$0);
          return push(tag_name$0,state[5])}}
    function advance_left(state)
     {for(;;)
       {var match=peek_opt(state[28]);
        if(match)
         {var
           match$0=match[1],
           size=match$0[1],
           length=match$0[3],
           token=match$0[2],
           pending_count=state[13] - state[12] | 0,
           _mz_=0 <= size?1:0,
           _mA_=_mz_ || (state[9] <= pending_count?1:0);
          if(_mA_)
           {take$0(state[28]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,token);
            state[12] = length + state[12] | 0;
            continue}
          return _mA_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_cm_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _mu_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _mv_=queue_elem[2];
        if(typeof _mv_ !== "number")
         switch(_mv_[0])
          {case 3:
            var
             _mx_=1 - ty,
             _my_=
              _mx_
               ?(queue_elem[1] = state[13] + _mu_ | 0,pop_opt(state[1]),0)
               :_mx_;
            return _my_;
           case 1:
           case 2:
            var
             _mw_=
              ty?(queue_elem[1] = state[13] + _mu_ | 0,pop_opt(state[1]),0):ty;
            return _mw_
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _ms_=state[14] === state[15]?1:0;
      if(_ms_)
       {var _mt_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_mt_),_mt_)}
      return _ms_}
    function pp_close_box(state,param)
     {var _mq_=1 < state[14]?1:0;
      if(_mq_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _mr_=0}
      else
       var _mr_=_mq_;
      return _mr_}
    function pp_open_stag(state,tag_name)
     {if(state[22]){push(tag_name,state[4]);caml_call1(state[26],tag_name)}
      var _mp_=state[23];
      if(_mp_)
       {var token=[5,tag_name];return pp_enqueue(state,[0,size,token,0])}
      return _mp_}
    function pp_close_stag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _mn_=state[22];
      if(_mn_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _mo_=0}
      else
       var _mo_=_mn_;
      return _mo_}
    function pp_open_tag(state,s){return pp_open_stag(state,[0,String_tag,s])}
    function pp_close_tag(state,param){return pp_close_stag(state,0)}
    function pp_set_print_tags(state,b){state[22] = b;return 0}
    function pp_set_mark_tags(state,b){state[23] = b;return 0}
    function pp_get_print_tags(state,param){return state[22]}
    function pp_get_mark_tags(state,param){return state[23]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_stag_function(state,param)
     {return [0,state[24],state[25],state[26],state[27]]}
    function pp_set_formatter_stag_function(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[24] = mot;
      state[25] = mct;
      state[26] = pot;
      state[27] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _mm_=state[4];
      iter$7(function(param){return pp_close_tag(state,0)},_mm_);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _ml_=state[14] < state[15]?1:0;
      return _ml_?enqueue_string_as(state,size,s):_ml_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_bytes(state,s)
     {return pp_print_as(state,caml_ml_bytes_length(s),of_bytes(s))}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_string_of_jsbytes("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,to_string(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$1(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _mk_=state[14] < state[15]?1:0;
      return _mk_?enqueue_advance(state,[0,size,3,0]):_mk_}
    function pp_print_if_newline(state,param)
     {var _mj_=state[14] < state[15]?1:0;
      return _mj_?enqueue_advance(state,[0,size,4,0]):_mj_}
    function pp_print_custom_break(state,fits,breaks)
     {var
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _mi_=state[14] < state[15]?1:0;
      if(_mi_)
       {var
         size=- state[13] | 0,
         token=[1,fits,breaks],
         length=
          (caml_ml_string_length(before) + width | 0)
          +
          caml_ml_string_length(after)
          |
          0,
         elem=[0,size,token,length];
        return scan_push(state,1,elem)}
      return _mi_}
    function pp_print_break(state,width,offset)
     {return pp_print_custom_break
              (state,[0,cst$75,width,cst$74],[0,cst$73,offset,cst$72])}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _mh_=state[14] < state[15]?1:0;
      if(_mh_)
       {var elem=[0,size,[4,[0,[0,0]]],0];return enqueue_advance(state,elem)}
      return _mh_}
    function pp_close_tbox(state,param)
     {var _me_=1 < state[14]?1:0;
      if(_me_)
       {var _mf_=state[14] < state[15]?1:0;
        if(_mf_)
         {var elem=[0,size,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _mg_=0}
        else
         var _mg_=_mf_}
      else
       var _mg_=_me_;
      return _mg_}
    function pp_print_tbreak(state,width,offset)
     {var _md_=state[14] < state[15]?1:0;
      if(_md_)
       {var size=- state[13] | 0,elem=[0,size,[2,width,offset],width];
        return scan_push(state,1,elem)}
      return _md_}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _mc_=state[14] < state[15]?1:0;
      if(_mc_){var elem=[0,size,0,0];return enqueue_advance(state,elem)}
      return _mc_}
    function pp_set_max_boxes(state,n)
     {var _ma_=1 < n?1:0,_mb_=_ma_?(state[15] = n,0):_ma_;return _mb_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var _l$_=1 < n$0?1:0;
      if(_l$_)
       {var n$1=state[6] - n$0 | 0,_l__=1 <= n$1?1:0;
        if(_l__)
         {var n=pp_limit(n$1);
          state[7] = n;
          state[8] = state[6] - state[7] | 0;
          return pp_rinit(state)}
        return _l__}
      return _l$_}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _l9_=1 <= n?1:0;
      if(_l9_)
       {var n$0=pp_limit(n);
        state[6] = n$0;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max$1(max$1(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _l9_}
    function validate_geometry(param)
     {var margin=param[2],max_indent=param[1];
      return 2 <= max_indent?margin <= max_indent?_cn_:_co_:_cp_}
    function check_geometry(geometry)
     {var match=validate_geometry(geometry);return 0 === match[0]?1:0}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_full_geometry(state,param)
     {var margin=param[2],max_indent=param[1];
      pp_set_margin(state,margin);
      pp_set_max_indent(state,max_indent);
      return 0}
    function pp_set_geometry(state,max_indent,margin)
     {var geometry=[0,max_indent,margin],match=validate_geometry(geometry);
      if(0 === match[0])return pp_set_full_geometry(state,geometry);
      var msg=match[1];
      throw [0,Invalid_argument,cat(cst_Format_pp_set_geometry,msg)]}
    function pp_safe_set_geometry(state,max_indent,margin)
     {var geometry=[0,max_indent,margin],match=validate_geometry(geometry);
      return 0 === match[0]?pp_set_full_geometry(state,geometry):0}
    function pp_get_geometry(state,param){return [0,state[8],state[6]]}
    function pp_update_geometry(state,update)
     {var geometry=pp_get_geometry(state,0);
      return pp_set_full_geometry(state,caml_call1(update,geometry))}
    function pp_set_formatter_out_functions(state,param)
     {var j=param[5],i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      state[21] = j;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20],state[21]]}
    function pp_set_formatter_output_functi(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functi(state,param)
     {return [0,state[17],state[18]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$76,0,1)}
    var blank_line=make$1(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _l8_=0 < n$0?1:0;
        if(_l8_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _l8_}}
    function pp_set_formatter_out_channel(state,oc)
     {state[17]
      =
      function(_l5_,_l6_,_l7_){return output_substring(oc,_l5_,_l6_,_l7_)};
      state[18] = function(param){return caml_ml_flush(oc)};
      state[19] = function(_l4_){return display_newline(state,_l4_)};
      state[20] = function(_l3_){return display_indent(state,_l3_)};
      state[21] = function(_l2_){return display_indent(state,_l2_)};
      return 0}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return cat(cst$78,cat(s,cst$77))}
      return cst$79}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return cat(cst$81,cat(s,cst$80))}
      return cst$82}
    function default_pp_print_open_tag(_l1_){return 0}
    function default_pp_print_close_tag(_l0_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var pp_queue=create$1(0),sys_tok=[0,unknown,_cq_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create$0(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var _lX_=create$0(0),_lY_=create$0(0),_lZ_=create$0(0);
      return [0,
              scan_stack,
              create$0(0),
              _lZ_,
              _lY_,
              _lX_,
              78,
              10,
              68,
              78,
              0,
              1,
              1,
              1,
              1,
              max_int,
              cst$83,
              f,
              g,
              h,
              i,
              j,
              0,
              0,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function formatter_of_out_functions(out_funs)
     {return pp_make_formatter
              (out_funs[1],out_funs[2],out_funs[3],out_funs[4],out_funs[5])}
    function make_formatter(output,flush)
     {function _lP_(_lW_){return 0}
      function _lQ_(_lV_){return 0}
      var
       ppf=
        pp_make_formatter(output,flush,function(_lU_){return 0},_lQ_,_lP_);
      ppf[19] = function(_lT_){return display_newline(ppf,_lT_)};
      ppf[20] = function(_lS_){return display_indent(ppf,_lS_)};
      ppf[21] = function(_lR_){return display_indent(ppf,_lR_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _lL_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_lM_,_lN_,_lO_)
                {return output_substring(oc,_lM_,_lN_,_lO_)},
               _lL_)}
    function formatter_of_buffer(b)
     {function _lG_(_lK_){return 0}
      return make_formatter
              (function(_lH_,_lI_,_lJ_)
                {return add_substring(b,_lH_,_lI_,_lJ_)},
               _lG_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$2(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     str_formatter=formatter_of_buffer(stdbuf);
    function flush_buffer_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
    function flush_str_formatter(param)
     {return flush_buffer_formatter(stdbuf,str_formatter)}
    function make_symbolic_output_buffer(param){return [0,0]}
    function clear_symbolic_output_buffer(sob){sob[1] = 0;return 0}
    function get_symbolic_output_buffer(sob){return rev(sob[1])}
    function flush_symbolic_output_buffer(sob)
     {var items=get_symbolic_output_buffer(sob);
      clear_symbolic_output_buffer(sob);
      return items}
    function add_symbolic_output_item(sob,item)
     {sob[1] = [0,item,sob[1]];return 0}
    function formatter_of_symbolic_output_b(sob)
     {function f(s,i,n){return add_symbolic_output_item(sob,[0,sub$0(s,i,n)])}
      function g(_lF_){return add_symbolic_output_item(sob,0)}
      function h(_lE_){return add_symbolic_output_item(sob,1)}
      function i(n){return add_symbolic_output_item(sob,[1,n])}
      function j(n){return add_symbolic_output_item(sob,[2,n])}
      return pp_make_formatter(f,g,h,i,j)}
    function open_hbox(_lD_){return pp_open_hbox(std_formatter,_lD_)}
    function open_vbox(_lC_){return pp_open_vbox(std_formatter,_lC_)}
    function open_hvbox(_lB_){return pp_open_hvbox(std_formatter,_lB_)}
    function open_hovbox(_lA_){return pp_open_hovbox(std_formatter,_lA_)}
    function open_box(_lz_){return pp_open_box(std_formatter,_lz_)}
    function close_box(_ly_){return pp_close_box(std_formatter,_ly_)}
    function open_tag(_lx_){return pp_open_tag(std_formatter,_lx_)}
    function close_tag(_lw_){return pp_close_tag(std_formatter,_lw_)}
    function open_stag(_lv_){return pp_open_stag(std_formatter,_lv_)}
    function close_stag(_lu_){return pp_close_stag(std_formatter,_lu_)}
    function print_as(_ls_,_lt_){return pp_print_as(std_formatter,_ls_,_lt_)}
    function print_string$0(_lr_){return pp_print_string(std_formatter,_lr_)}
    function print_bytes$0(_lq_){return pp_print_bytes(std_formatter,_lq_)}
    function print_int$0(_lp_){return pp_print_int(std_formatter,_lp_)}
    function print_float$0(_lo_){return pp_print_float(std_formatter,_lo_)}
    function print_char$0(_ln_){return pp_print_char(std_formatter,_ln_)}
    function print_bool(_lm_){return pp_print_bool(std_formatter,_lm_)}
    function print_break(_lk_,_ll_)
     {return pp_print_break(std_formatter,_lk_,_ll_)}
    function print_cut(_lj_){return pp_print_cut(std_formatter,_lj_)}
    function print_space(_li_){return pp_print_space(std_formatter,_li_)}
    function force_newline(_lh_){return pp_force_newline(std_formatter,_lh_)}
    function print_flush(_lg_){return pp_print_flush(std_formatter,_lg_)}
    function print_newline$0(_lf_)
     {return pp_print_newline(std_formatter,_lf_)}
    function print_if_newline(_le_)
     {return pp_print_if_newline(std_formatter,_le_)}
    function open_tbox(_ld_){return pp_open_tbox(std_formatter,_ld_)}
    function close_tbox(_lc_){return pp_close_tbox(std_formatter,_lc_)}
    function print_tbreak(_la_,_lb_)
     {return pp_print_tbreak(std_formatter,_la_,_lb_)}
    function set_tab(_k$_){return pp_set_tab(std_formatter,_k$_)}
    function print_tab(_k__){return pp_print_tab(std_formatter,_k__)}
    function set_margin(_k9_){return pp_set_margin(std_formatter,_k9_)}
    function get_margin(_k8_){return std_formatter[6]}
    function set_max_indent(_k7_)
     {return pp_set_max_indent(std_formatter,_k7_)}
    function get_max_indent(_k6_){return std_formatter[8]}
    function set_geometry(_k4_,_k5_)
     {return pp_set_geometry(std_formatter,_k4_,_k5_)}
    function safe_set_geometry(_k2_,_k3_)
     {return pp_safe_set_geometry(std_formatter,_k2_,_k3_)}
    function get_geometry(_k1_){return pp_get_geometry(std_formatter,_k1_)}
    function update_geometry(_k0_)
     {return pp_update_geometry(std_formatter,_k0_)}
    function set_max_boxes(_kZ_){return pp_set_max_boxes(std_formatter,_kZ_)}
    function get_max_boxes(_kY_){return std_formatter[15]}
    function over_max_boxes(_kX_)
     {return pp_over_max_boxes(std_formatter,_kX_)}
    function set_ellipsis_text(_kW_)
     {return pp_set_ellipsis_text(std_formatter,_kW_)}
    function get_ellipsis_text(_kV_){return std_formatter[16]}
    function set_formatter_out_channel(_kU_)
     {return pp_set_formatter_out_channel(std_formatter,_kU_)}
    function set_formatter_out_functions(_kT_)
     {return pp_set_formatter_out_functions(std_formatter,_kT_)}
    function get_formatter_out_functions(_kS_)
     {return pp_get_formatter_out_functions(std_formatter,_kS_)}
    function set_formatter_output_functions(_kQ_,_kR_)
     {return pp_set_formatter_output_functi(std_formatter,_kQ_,_kR_)}
    function get_formatter_output_functions(_kP_)
     {return pp_get_formatter_output_functi(std_formatter,_kP_)}
    function set_formatter_stag_functions(_kO_)
     {return pp_set_formatter_stag_function(std_formatter,_kO_)}
    function get_formatter_stag_functions(_kN_)
     {return pp_get_formatter_stag_function(std_formatter,_kN_)}
    function set_print_tags(_kM_)
     {return pp_set_print_tags(std_formatter,_kM_)}
    function get_print_tags(_kL_){return std_formatter[22]}
    function set_mark_tags(_kK_){return pp_set_mark_tags(std_formatter,_kK_)}
    function get_mark_tags(_kJ_){return std_formatter[23]}
    function set_tags(_kI_){return pp_set_tags(std_formatter,_kI_)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _kH_=param$0[1];
          if(param$0[2])
           {var vs=param$0[2];
            caml_call2(pp_v,ppf,_kH_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=vs;
            continue}
          return caml_call2(pp_v,ppf,_kH_)}
        return 0}}
    function pp_print_seq(opt,pp_v,ppf,seq$1)
     {if(opt)var sth=opt[1],pp_sep=sth;else var pp_sep=pp_print_cut;
      var match$0=caml_call1(seq$1,0);
      if(match$0)
       {var seq$2=match$0[2],v$0=match$0[1];
        caml_call2(pp_v,ppf,v$0);
        var seq=seq$2;
        for(;;)
         {var match=caml_call1(seq,0);
          if(match)
           {var seq$0=match[2],v=match[1];
            caml_call2(pp_sep,ppf,0);
            caml_call2(pp_v,ppf,v);
            var seq=seq$0;
            continue}
          return 0}}
      return 0}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var match=caml_string_get(s,right[1]);
          if(10 === match)
           {flush(0);pp_force_newline(ppf,0)}
          else
           if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
          continue}
        var _kG_=left[1] !== len?1:0;
        return _kG_?flush(0):_kG_}}
    function pp_print_option(opt,pp_v,ppf,param)
     {if(opt)
       var sth=opt[1],none=sth;
      else
       var none=function(param,_kF_){return 0};
      if(param){var v=param[1];return caml_call2(pp_v,ppf,v)}
      return caml_call2(none,ppf,0)}
    function pp_print_result(ok,error,ppf,param)
     {if(0 === param[0]){var v=param[1];return caml_call2(ok,ppf,v)}
      var e=param[1];
      return caml_call2(error,ppf,e)}
    function pp_print_either(left,right,ppf,param)
     {if(0 === param[0]){var l=param[1];return caml_call2(left,ppf,l)}
      var r=param[1];
      return caml_call2(right,ppf,r)}
    function compute_tag(output,tag_acc)
     {var buf=create$2(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?sub$3(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1];
          pp_print_char(ppf,64);
          return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _kv_=acc[2],_kw_=acc[1];
          if(0 === _kv_[0])
           {var acc$0=_kv_[1];
            output_acc$0(ppf,_kw_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
          var acc$1=_kv_[1];
          output_acc$0(ppf,_kw_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _kx_=acc[1],switch$1=0;
          if(typeof _kx_ !== "number" && 0 === _kx_[0])
           {var _ky_=_kx_[2],switch$2=0;
            if(typeof _ky_ !== "number" && 1 === _ky_[0])
             {var s$0=acc[2],size=_ky_[2],p$1=_kx_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_kx_;switch$0 = 2}
          break;
         case 3:
          var _kz_=acc[1],switch$3=0;
          if(typeof _kz_ !== "number" && 0 === _kz_[0])
           {var _kA_=_kz_[2],switch$4=0;
            if(typeof _kA_ !== "number" && 1 === _kA_[0])
             {var c$0=acc[2],size$0=_kA_[2],p$3=_kz_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c=acc[2],p$2=_kz_;switch$0 = 3}
          break;
         case 4:
          var _kB_=acc[1],switch$5=0;
          if(typeof _kB_ !== "number" && 0 === _kB_[0])
           {var _kC_=_kB_[2],switch$6=0;
            if(typeof _kC_ !== "number" && 1 === _kC_[0])
             {var s$0=acc[2],size=_kC_[2],p$1=_kB_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_kB_;switch$0 = 2}
          break;
         case 5:
          var _kD_=acc[1],switch$7=0;
          if(typeof _kD_ === "number" || ! (0 === _kD_[0]))
           switch$7 = 1;
          else
           {var _kE_=_kD_[2],switch$8=0;
            if(typeof _kE_ !== "number" && 1 === _kE_[0])
             {var c$0=acc[2],size$0=_kE_[2],p$3=_kD_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c=acc[2],p$2=_kD_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$1(1,c$0));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _kj_=acc[2],_kk_=acc[1];
          if(0 === _kj_[0])
           {var acc$0=_kj_[1];
            strput_acc$0(ppf,_kk_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
          var acc$1=_kj_[1];
          strput_acc$0(ppf,_kk_);
          var
           match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _kl_=acc[1],switch$1=0;
          if(typeof _kl_ !== "number" && 0 === _kl_[0])
           {var _km_=_kl_[2],switch$2=0;
            if(typeof _km_ !== "number" && 1 === _km_[0])
             {var s$0=acc[2],size=_km_[2],p$1=_kl_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_kl_;switch$0 = 2}
          break;
         case 3:
          var _kn_=acc[1],switch$3=0;
          if(typeof _kn_ !== "number" && 0 === _kn_[0])
           {var _ko_=_kn_[2],switch$4=0;
            if(typeof _ko_ !== "number" && 1 === _ko_[0])
             {var c$0=acc[2],size$0=_ko_[2],p$3=_kn_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c=acc[2],p$2=_kn_;switch$0 = 3}
          break;
         case 4:
          var _kp_=acc[1],switch$5=0;
          if(typeof _kp_ !== "number" && 0 === _kp_[0])
           {var _kq_=_kp_[2],switch$6=0;
            if(typeof _kq_ !== "number" && 1 === _kq_[0])
             {var s$0=acc[2],size=_kq_[2],p$1=_kp_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_kp_;switch$0 = 2}
          break;
         case 5:
          var _kr_=acc[1],switch$7=0;
          if(typeof _kr_ === "number" || ! (0 === _kr_[0]))
           switch$7 = 1;
          else
           {var _ks_=_kr_[2],switch$8=0;
            if(typeof _ks_ !== "number" && 1 === _ks_[0])
             {var c$0=acc[2],size$0=_ks_[2],p$3=_kr_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c=acc[2],p$2=_kr_;switch$0 = 3}
          break;
         case 6:
          var _kt_=acc[1];
          if(typeof _kt_ !== "number" && 0 === _kt_[0])
           {var _ku_=_kt_[2];
            if(typeof _ku_ !== "number" && 1 === _ku_[0])
             {var f$1=acc[2],size$1=_ku_[2],p$4=_kt_[1];
              strput_acc$0(ppf,p$4);
              return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
          var f$0=acc[2];
          strput_acc$0(ppf,_kt_);
          return pp_print_string(ppf,caml_call1(f$0,0));
         case 7:
          var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$1(1,c$0));
        case 2:strput_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_ki_=0;
      return make_printf
              (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               _ki_,
               fmt)}
    function ikfprintf$0(k,ppf,param)
     {var fmt=param[1];return make_iprintf(k,ppf,fmt)}
    function ifprintf$0(ppf,param)
     {var fmt=param[1],_kg_=0;
      return make_iprintf(function(_kh_){return 0},_kg_,fmt)}
    function fprintf$0(ppf)
     {function _kd_(_kf_){return 0}
      return function(_ke_){return kfprintf$0(_kd_,ppf,_ke_)}}
    function printf$0(fmt){return caml_call1(fprintf$0(std_formatter),fmt)}
    function eprintf$0(fmt){return caml_call1(fprintf$0(err_formatter),fmt)}
    function kdprintf(k,param)
     {var fmt=param[1],_kc_=0;
      return make_printf
              (function(acc)
                {return caml_call1
                         (k,function(ppf){return output_acc$0(ppf,acc)})},
               _kc_,
               fmt)}
    function dprintf(fmt){return kdprintf(function(i){return i},fmt)}
    function kprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function sprintf$0(fmt){return kprintf(id$0,fmt)}
    function kasprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function asprintf(fmt){return kasprintf(id$0,fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(std_formatter,0);return pp_print_flush(err_formatter,0)}
    at_exit(flush_standard_formatters);
    function pp_set_all_formatter_output_fu(state,f,g,h,i)
     {pp_set_formatter_output_functi(state,f,g);
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_all_formatter_output_fu(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function set_all_formatter_output_funct(_j__,_j$_,_ka_,_kb_)
     {return pp_set_all_formatter_output_fu(std_formatter,_j__,_j$_,_ka_,_kb_)}
    function get_all_formatter_output_funct(_j9_)
     {return pp_get_all_formatter_output_fu(std_formatter,_j9_)}
    function bprintf$0(b,param)
     {var fmt=param[1],ppf=formatter_of_buffer(b);
      function k(acc){output_acc$0(ppf,acc);return pp_flush_queue(ppf,0)}
      return make_printf(k,0,fmt)}
    function pp_set_formatter_tag_functions(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      function stringify(f,e,param)
       {if(param[1] === String_tag){var s=param[2];return caml_call1(f,s)}
        return e}
      state[24] = function(_j8_){return stringify(mot,cst$84,_j8_)};
      state[25] = function(_j7_){return stringify(mct,cst$85,_j7_)};
      var _j3_=0;
      state[26] = function(_j6_){return stringify(pot,_j3_,_j6_)};
      var _j4_=0;
      state[27] = function(_j5_){return stringify(pct,_j4_,_j5_)};
      return 0}
    function pp_get_formatter_tag_functions(fmt,param)
     {var funs=pp_get_formatter_stag_function(fmt,0);
      function mark_open_tag(s){return caml_call1(funs[1],[0,String_tag,s])}
      function mark_close_tag(s){return caml_call1(funs[2],[0,String_tag,s])}
      function print_open_tag(s){return caml_call1(funs[3],[0,String_tag,s])}
      function print_close_tag(s){return caml_call1(funs[4],[0,String_tag,s])}
      return [0,mark_open_tag,mark_close_tag,print_open_tag,print_close_tag]}
    function set_formatter_tag_functions(_j2_)
     {return pp_set_formatter_tag_functions(std_formatter,_j2_)}
    function get_formatter_tag_functions(_j1_)
     {return pp_get_formatter_tag_functions(std_formatter,_j1_)}
    var
     Stdlib_Format=
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string$0,
       pp_print_bytes,
       print_bytes$0,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int$0,
       pp_print_float,
       print_float$0,
       pp_print_char,
       print_char$0,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline$0,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       pp_print_either,
       fprintf$0,
       printf$0,
       eprintf$0,
       sprintf$0,
       asprintf,
       dprintf,
       ifprintf$0,
       kfprintf$0,
       kdprintf,
       ikfprintf$0,
       kprintf,
       kasprintf,
       bprintf$0,
       kprintf,
       set_all_formatter_output_funct,
       get_all_formatter_output_funct,
       pp_set_all_formatter_output_fu,
       pp_get_all_formatter_output_fu,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions];
    caml_register_global(818,Stdlib_Format,"Stdlib__Format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_j0_)
       {_j0_ = caml_wrap_exception(_j0_);
        if(_j0_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _j0_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _jZ_=ib[9];
      if(typeof _jZ_ === "number")
       return 0 === _jZ_?cst_unnamed_function:cst_unnamed_character_string;
      else
       {if(0 === _jZ_[0])return cst_unnamed_Stdlib_input_chann;
        var fname=_jZ_[1];
        return fname}}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$4(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$2(default_token_buffer_size),
              iname]}
    function from_string$1(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create$4(1,next)}
    var _cr_=0;
    function from_function$0(_jY_){return create$4(_cr_,_jY_)}
    var len=1024;
    function scan_close_at_end(ic)
     {caml_ml_close_channel(ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$4(iname,next)}
    var stdib=from_ic(scan_raise_at_end,[1,cst$86,stdin],stdin);
    function open_in_file(open_in,fname)
     {if(caml_string_notequal(fname,cst$87))
       {var ic=caml_call1(open_in,fname);
        return from_ic(scan_close_at_end,[1,fname,ic],ic)}
      return stdib}
    function from_file(_jX_){return open_in_file(open_text$0,_jX_)}
    function from_file_bin(_jW_){return open_in_file(open_bin$0,_jW_)}
    function from_channel$0(ic){return from_ic(scan_raise_at_end,[0,ic],ic)}
    function close_in(ib)
     {var _jV_=ib[9];
      if(typeof _jV_ === "number")
       return 0;
      else
       {if(0 === _jV_[0]){var ic=_jV_[1];return caml_ml_close_channel(ic)}
        var ic$0=_jV_[2];
        return caml_ml_close_channel(ic$0)}}
    var memo=[0,0];
    function memo_from_ic(scan_close_ic,ic)
     {try
       {var _jT_=assq(ic,memo[1]);return _jT_}
      catch(_jU_)
       {_jU_ = caml_wrap_exception(_jU_);
        if(_jU_ === Not_found)
         {var ib=from_ic(scan_close_ic,[0,ic],ic);
          memo[1] = [0,[0,ic,ib],memo[1]];
          return ib}
        throw _jU_}}
    function memo_from_channel(_jS_)
     {return memo_from_ic(scan_raise_at_end,_jS_)}
    var Scan_failure=[248,cst_Stdlib_Scanf_Scan_failure,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_cs_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_ct_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_fo)}
    function bad_hex_float(param)
     {return bad_input(cst_not_a_valid_float_in_hexad)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cv_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_jQ_=1 - ib[1];
         if(_jQ_)
          {var _jR_=c - 9 | 0,switch$0=0;
           if(4 < _jR_ >>> 0)
            {if(23 === _jR_)switch$0 = 1}
           else
            if(1 < _jR_ - 2 >>> 0)switch$0 = 1;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _jQ_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$3)
              ?caml_string_notequal(s,cst_true$3)
                ?bad_input(caml_call1(sprintf(_cw_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_cx_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=cat(cst_0b,token_string(ib));break;
        case 3:var tok=cat(cst_0o,token_string(ib));break;
        case 4:var tok=cat(cst_0u,token_string(ib));break;
        case 5:var tok=cat(cst_0x,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib);
      if(9 < c - 48 >>> 0)return bad_input(caml_call1(sprintf(_cy_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_cz_),c$0,basis))}
    function is_binary_digit(param){return 1 < param - 48 >>> 0?0:1}
    function scan_binary_int(_jO_,_jP_)
     {return scan_digit_plus(cst_binary,is_binary_digit,_jO_,_jP_)}
    function is_octal_digit(param){return 7 < param - 48 >>> 0?0:1}
    function scan_octal_int(_jM_,_jN_)
     {return scan_digit_plus(cst_octal,is_octal_digit,_jM_,_jN_)}
    function is_hexa_digit(param)
     {var _jL_=param - 48 | 0,switch$0=0;
      if(22 < _jL_ >>> 0)
       {if(! (5 < _jL_ - 49 >>> 0))switch$0 = 1}
      else
       if(6 < _jL_ - 10 >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_jJ_,_jK_)
     {return scan_digit_plus(cst_hexadecimal,is_hexa_digit,_jJ_,_jK_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           var switch$0=0;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             if(120 === c$0)switch$0 = 1}
           else
            if(88 === c$0)
             switch$0 = 1;
            else
             if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_unsigned_decimal_int(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      return ib[1]
              ?width
              :9 < c - 48 >>> 0
                ?width
                :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min$1(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {return 25 < c - 65 >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _jG_=len - 1 | 0,
       _jF_=0;
      if(! (_jG_ < 0))
       {var i=_jF_;
        for(;;)
         {var c=peek_char(ib),_jH_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _jH_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _jI_=i + 1 | 0;
          if(_jG_ !== i){var i=_jI_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _js_=0 === width?1:0,_jt_=_js_ || end_of_input(ib);
      if(_jt_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _ju_=0 === width$0?1:0,
       _jv_=_ju_ || end_of_input(ib);
      if(_jv_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _jw_=0 === width$1?1:0,
             _jx_=_jw_ || end_of_input(ib);
            if(_jx_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,cst_an)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _jA_=0 === width$3?1:0,
           _jB_=_jA_ || end_of_input(ib);
          if(_jB_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,cst_x$2);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_jC_=match - 46 | 0,switch$1=0;
            if(34 < _jC_ >>> 0)
             {if(66 === _jC_)switch$1 = 1}
            else
             if(32 < _jC_ - 1 >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min$1(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _jD_=0 === width$9?1:0,
                 _jE_=_jD_ || end_of_input(ib);
                if(_jE_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _jy_=0 === width$2?1:0,
         _jz_=_jy_ || end_of_input(ib);
        if(_jz_)bad_hex_float(0);
        return check_case_insensitive_string
                (width$2,ib,bad_hex_float,cst_nfinity)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _jo_=0 === width?1:0,_jp_=_jo_ || end_of_input(ib);
      if(_jp_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _jq_=0 === width$0?1:0,
       _jr_=_jq_ || end_of_input(ib);
      if(_jr_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min$1(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       if(30 < switcher - 1 >>> 0)return scan_exponent_part(width$0,ib);
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _ja_=0 === width?1:0,_jb_=_ja_ || end_of_input(ib);
      if(_jb_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _jc_=0 === width$0?1:0,
       _jd_=_jc_ || end_of_input(ib);
      if(_jd_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _je_=0 === width$1?1:0,
           _jf_=_je_ || end_of_input(ib);
          if(_jf_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _jg_=0 === width$2?1:0,
          _jh_=_jg_ || end_of_input(ib);
         if(_jh_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _ji_=0 === width$3?1:0,
          _jj_=_ji_ || end_of_input(ib);
         if(_jj_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _jk_=0 === width$4?1:0,
          _jl_=_jk_ || end_of_input(ib);
         if(_jl_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min$1(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          if(30 < switcher - 1 >>> 0)var width$7=width$4;else switch$0 = 1;
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _jm_=0 === width$9?1:0,
            _jn_=_jm_ || end_of_input(ib);
           if(_jn_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _i$_=c - 9 | 0,switch$0=0;
        if(4 < _i$_ >>> 0)
         {if(23 === _i$_)switch$0 = 1}
        else
         if(1 < _i$_ - 2 >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_cu_),message)):c}
    function check_next_char_for_char(_i9_,_i__)
     {return check_next_char(cst_a_Char,_i9_,_i__)}
    function check_next_char_for_string(_i7_,_i8_)
     {return check_next_char(cst_a_String,_i7_,_i8_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher=c0 - 92 | 0;
          if(! (28 < switcher >>> 0))
           switch(switcher)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_i6_=c - 48 | 0,switch$0=0;
                  if(22 < _i6_ >>> 0)
                   {if(! (5 < _i6_ - 49 >>> 0))switch$0 = 1}
                  else
                   if(6 < _i6_ - 10 >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _i2_=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _i2_ | 0,
               switch$1=0;
              if(0 <= c$0 && ! (255 < c$0))
               {var _i4_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _i4_=bad_input(caml_call2(sprintf(_cB_),c1,c2));
              return store_char(width - 2 | 0,ib,_i4_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib);
               return 9 < c - 48 >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && ! (255 < c)){var _i5_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _i5_=bad_input(caml_call3(sprintf(_cA_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_i5_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(switch$0)
       {var switch$3=0;
        if(110 <= c0)
         if(117 <= c0)
          switch$3 = 1;
         else
          switch(c0 - 110 | 0)
           {case 0:var _i3_=10;break;
            case 4:var _i3_=13;break;
            case 6:var _i3_=9;break;
            default:switch$3 = 1}
        else
         if(98 === c0)var _i3_=8;else switch$3 = 1;
        if(switch$3)var _i3_=c0;
        return store_char(width,ib,_i3_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _i0_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_i0_)}
              return caml_trampoline_return(skip_spaces,[0,_i0_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _i1_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_i1_)}
                return caml_trampoline_return(skip_spaces,[0,_i1_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_iW_=0 < i$0?1:0;
          if(_iW_)
           {var _iX_=1 - ib[1];
            if(_iX_)
             var _iY_=is_in_char_set(char_set,c),_iZ_=_iY_?c !== stp?1:0:_iY_;
            else
             var _iZ_=_iX_}
          else
           var _iZ_=_iW_;
          if(_iZ_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _iZ_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _iV_=1 - ib[1];
        if(_iV_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _iV_}
      return scan_chars(width,-1)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_cD_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _cE_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_iT_=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_iT_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_iT_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _iU_=fmt$0[1];
           if(0 === _iU_[0])
            {var
              rest$0=fmt$0[2],
              match=_iU_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_iU_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _iG_=fmt$0[1],_iH_=fmt$0[2];
           if(typeof _iH_ !== "number")
            switch(_iH_[0])
             {case 17:
               var
                rest$2=_iH_[2],
                fmting_lit=_iH_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_iG_,0,scan$0,token_string);
              case 18:
               var _iI_=_iH_[1];
               if(0 === _iI_[0])
                {var
                  rest$3=_iH_[2],
                  match$0=_iI_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_cF_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$3),
                          readers,
                          _iG_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$4=_iH_[2],
                match$1=_iI_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_cG_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$4),
                        readers,
                        _iG_,
                        0,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$0[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_iG_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$7=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$8=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$9=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           switch(fmt$0[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=
             function(param,_iS_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_cC_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$14;continue}
           return bad_input(cst_end_of_input_not_found);
          case 11:
           var rest$15=fmt$0[2],str$0=fmt$0[1];
           iter$4(function(_iR_){return check_char(ib,_iR_)},str$0);
           var fmt$0=rest$15;
           continue;
          case 12:
           var rest$16=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$16;
           continue;
          case 13:
           var rest$17=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _iJ_=format_of_string_fmtty(s,fmtty),fmt$3=_iJ_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,make_scanf(ib,rest$17,readers)];
          case 14:
           var rest$18=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$2=fmt_ebb_of_string(0,s$0),
              fmt$6=match$2[1],
              match$3=fmt_ebb_of_string(0,s$0),
              fmt$7=match$3[1],
              fmt$8=type_format(fmt$7,erase_rel(symm(fmtty$0))),
              _iL_=type_format(fmt$6,erase_rel(fmtty$0)),
              fmt$5=fmt$8,
              fmt$4=_iL_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _iK_=bad_input(msg$0),
              fmt$5=_iK_[2],
              fmt$4=_iK_[1]}
           return [0,
                   [0,fmt$4,s$0],
                   make_scanf(ib,concat_fmt(fmt$5,rest$18),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$19=fmt$0[2],
            formatting_lit=fmt$0[1],
            _iM_=string_of_formatting_lit(formatting_lit);
           iter$4(function(_iQ_){return check_char(ib,_iQ_)},_iM_);
           var fmt$0=rest$19;
           continue;
          case 18:
           var _iN_=fmt$0[1];
           if(0 === _iN_[0])
            {var rest$20=fmt$0[2],match$4=_iN_[1],fmt$9=match$4[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$10=concat_fmt(fmt$9,rest$20),fmt$0=fmt$10;
             continue}
           var rest$21=fmt$0[2],match$5=_iN_[1],fmt$11=match$5[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$12=concat_fmt(fmt$11,rest$21),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(cst_scanf_missing_reader);
          case 20:
           var _iO_=fmt$0[1],_iP_=fmt$0[3];
           if(typeof _iP_ !== "number" && 17 === _iP_[0])
            {var
              rest$23=_iP_[2],
              fmting_lit$0=_iP_[1],
              char_set$0=fmt$0[2],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_iO_);
             scan_chars_in_char_set(char_set$0,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$23];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$22=fmt$0[3],
            char_set=fmt$0[2],
            width=width_of_pad_opt(_iO_);
           scan_chars_in_char_set(char_set,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,rest$22,readers)];
          case 21:
           var
            rest$24=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$24,readers)];
          case 22:
           var rest$25=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$25,readers)];
          case 23:
           var
            rest$26=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$26),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(match$8){var arg_rest=match$8[2];return arg_rest}
           throw [0,Assert_failure,_cH_];
          default:return invalid_arg(cst_scanf_bad_conversion_custo)}}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)return invalid_arg(cst_scanf_bad_conversion);
          caml_call3(scan,max_int,max_int,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(pad[1])
           {var _iF_=pad[2];
            if(typeof prec === "number")
             {if(prec)return invalid_arg(cst_scanf_bad_conversion$0);
              caml_call3(scan,_iF_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            var p$0=prec[1];
            caml_call3(scan,_iF_,p$0,ib);
            var x$2=caml_call1(token,ib);
            return [0,x$2,make_scanf(ib,fmt,readers)]}
          return invalid_arg(cst_scanf_bad_conversion$1)}
        return invalid_arg(cst_scanf_bad_conversion$2)}}
    function kscanf(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _iE_=[0,make_scanf(ib,fmt,readers)],_iD_=_iE_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          var switch$0=0;
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var
             msg=exc[2],
             _iC_=
              invalid_arg
               (cat(msg,cat(cst_in_format,cat(escaped$1(str),cst$88))));
            switch$0 = 1}
          if(! switch$0)var _iC_=[1,exc];
          var _iD_=_iC_}
        if(0 === _iD_[0]){var args=_iD_[1];return apply(f,args)}
        var exc=_iD_[1];
        return caml_call2(ef,ib,exc)}
      return take_format_readers(k,fmt)}
    function bscanf(ib,fmt){return kscanf(ib,scanf_bad_input,fmt)}
    function ksscanf(s,ef,fmt){return kscanf(from_string$1(s),ef,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$1(s),scanf_bad_input,fmt)}
    function scanf(fmt){return kscanf(stdib,scanf_bad_input,fmt)}
    function bscanf_format(ib,format,f)
     {scan_caml_string(max_int,ib);
      var str=token_string(ib);
      try
       {var _iB_=format_of_string_format(str,format),fmt=_iB_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function sscanf_format(s,format,f)
     {return bscanf_format(from_string$1(s),format,f)}
    function format_from_string(s,fmt)
     {function _iA_(x){return x}
      return sscanf_format(cat(cst$90,cat(escaped$1(s),cst$89)),fmt,_iA_)}
    function unescaped(s)
     {function _iz_(x){return x}
      return caml_call1(sscanf(cat(cst$92,cat(s,cst$91)),_cI_),_iz_)}
    function kfscanf(ic,ef,fmt){return kscanf(memo_from_channel(ic),ef,fmt)}
    function fscanf(ic,fmt)
     {return kscanf(memo_from_channel(ic),scanf_bad_input,fmt)}
    var
     Stdlib_Scanf=
      [0,
       [0,
        stdib,
        from_file,
        from_file_bin,
        close_in,
        from_file,
        from_file_bin,
        from_string$1,
        from_function$0,
        from_channel$0,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdib],
       Scan_failure,
       bscanf,
       sscanf,
       scanf,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped,
       fscanf,
       kfscanf];
    caml_register_global(819,Stdlib_Scanf,"Stdlib__Scanf");
    function register(name,v){return caml_register_named_value(name,v)}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var Stdlib_Callback=[0,register,register_exception];
    caml_register_global(820,Stdlib_Callback,"Stdlib__Callback");
    function copy$7(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_iw_=caml_ml_string_length(s) - 1 | 0,_iv_=0;
      if(! (_iw_ < 0))
       {var i=_iv_;
        for(;;)
         {var _ix_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _ix_ | 0;
          var _iy_=i + 1 | 0;
          if(_iw_ !== i){var i=_iy_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    function compare$14(x,y){return caml_string_compare(x,y)}
    var Vars=caml_call1(Stdlib_Map[1],[0,compare$14]);
    function compare$15(x,y){return caml_string_compare(x,y)}
    var
     Meths=caml_call1(Stdlib_Map[1],[0,compare$15]),
     compare$16=caml_int_compare,
     Labs=caml_call1(Stdlib_Map[1],[0,compare$16]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _ip_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _ip_;
      var _ir_=len - 1 | 0,_iq_=0;
      if(! (_ir_ < 0))
       {var i=_iq_;
        for(;;)
         {var
           _it_=(i * 2 | 0) + 3 | 0,
           _is_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_it_)[1 + _it_] = _is_;
          var _iu_=i + 1 | 0;
          if(_ir_ !== i){var i=_iu_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_in_=old_size < new_size?1:0;
      if(_in_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _io_=0}
      else
       var _io_=_in_;
      return _io_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _il_=caml_call2(Meths[28],name,table[3]);return _il_}
      catch(_im_)
       {_im_ = caml_wrap_exception(_im_);
        if(_im_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _im_}}
    function get_method_labels(table,names)
     {return map$7(function(_ik_){return get_method_label(table,_ik_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      return caml_call2(Labs[28],label,table[4])
              ?(resize$1(table,label + 1 | 0),
                caml_check_bound(table[2],label)[1 + label]
                =
                element,
                0)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function get_method(table,label)
     {try
       {var _ii_=assoc(label,table[6]);return _ii_}
      catch(_ij_)
       {_ij_ = caml_wrap_exception(_ij_);
        if(_ij_ === Not_found)
         return caml_check_bound(table[2],label)[1 + label];
        throw _ij_}}
    function to_list$3(arr){return 0 === arr?0:to_list$1(arr)}
    function narrow(table,vars,virt_meths,concr_meths)
     {var
       vars$0=to_list$3(vars),
       virt_meths$0=to_list$3(virt_meths),
       concr_meths$0=to_list$3(concr_meths),
       virt_meth_labs=
        map$4
         (function(_ih_){return get_method_label(table,_ih_)},virt_meths$0),
       concr_meth_labs=
        map$4
         (function(_ig_){return get_method_label(table,_ig_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _h9_=Vars[1],_h__=table[7];
      function _h$_(lab,info,tvars)
       {return mem(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[13],_h$_,_h__,_h9_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      iter2$0
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _ic_=by_label[1];
          try
           {var _ie_=caml_call2(Labs[28],label,table[4]),_id_=_ie_}
          catch(_if_)
           {_if_ = caml_wrap_exception(_if_);
            if(_if_ !== Not_found)throw _if_;
            var _id_=1}
          by_label[1] = caml_call3(Labs[4],label,_id_,_ic_);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      iter2$0
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _ia_=0,_ib_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
        _ib_,
        _ia_);
      return 0}
    function widen(table)
     {var
       match=hd(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = tl(table[5]);
      table[7]
      =
      fold_left$0
       (function(s,v)
         {var _h8_=caml_call2(Vars[28],v,table[7]);
          return caml_call3(Vars[4],v,_h8_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _h7_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meths)?hm:[0,met,hm]},
        _h7_,
        saved_hidden_meths);
      return 0}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _h5_=caml_call2(Vars[28],name,table[7]);return _h5_}
      catch(_h6_)
       {_h6_ = caml_wrap_exception(_h6_);
        if(_h6_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,cst$93))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _h6_}}
    function to_array(arr){return caml_equal(arr,0)?[0]:arr}
    function new_methods_variables(table,meths,vals)
     {var
       meths$0=to_array(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _hX_=nmeths - 1 | 0,
       _hW_=0;
      if(! (_hX_ < 0))
       {var i$0=_hW_;
        for(;;)
         {var
           _h3_=
            get_method_label(table,caml_check_bound(meths$0,i$0)[1 + i$0]);
          caml_check_bound(res,i$0)[1 + i$0] = _h3_;
          var _h4_=i$0 + 1 | 0;
          if(_hX_ !== i$0){var i$0=_h4_;continue}
          break}}
      var _hZ_=nvals - 1 | 0,_hY_=0;
      if(! (_hZ_ < 0))
       {var i=_hY_;
        for(;;)
         {var
           _h1_=i + nmeths | 0,
           _h0_=new_variable(table,caml_check_bound(vals,i)[1 + i]);
          caml_check_bound(res,_h1_)[1 + _h1_] = _h0_;
          var _h2_=i + 1 | 0;
          if(_hZ_ !== i){var i=_h2_;continue}
          break}}
      return res}
    function get_variable(table,name)
     {try
       {var _hU_=caml_call2(Vars[28],name,table[7]);return _hU_}
      catch(_hV_)
       {_hV_ = caml_wrap_exception(_hV_);
        if(_hV_ === Not_found)throw [0,Assert_failure,_cJ_];
        throw _hV_}}
    function get_variables(table,names)
     {return map$7(function(_hT_){return get_variable(table,_hT_)},names)}
    function add_initializer(table,f){table[8] = [0,f,table[8]];return 0}
    function create_table(public_methods)
     {if(0 === public_methods)return new_table([0]);
      var
       tags=map$7(public_method_label,public_methods),
       table=new_table(tags);
      iteri$3
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function inherits(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      narrow(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      widen(cla);
      var
       _hO_=0,
       _hP_=to_array(concr_meths),
       _hQ_=
        [0,
         map$7
          (function(nm){return get_method(cla,get_method_label(cla,nm))},_hP_),
         _hO_],
       _hR_=to_array(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,
                 map$7(function(_hS_){return get_variable(cla,_hS_)},_hR_),
                 _hQ_]])}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function make_class_store(pub_meths,class_init,init_table)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function dummy_class(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function create_object(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function iter_f(obj,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],f=param$0[1];
          caml_call1(f,obj);
          var param$0=l;
          continue}
        return 0}}
    function run_initializers(obj,table)
     {var inits=table[8],_hN_=0 !== inits?1:0;
      return _hN_?iter_f(obj,inits):_hN_}
    function run_initializers_opt(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)iter_f(obj,inits);
      return obj}
    function create_object_and_run_initiali(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=create_object(table);
      run_initializers(obj,table);
      return obj}
    function get_data$0(param)
     {if(param)return param[2];throw [0,Assert_failure,_cN_]}
    function build_path(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_hJ_=0;
      if(! (n < 0))
       {var i=_hJ_;
        for(;;)
         {var _hL_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[1 + i],_hL_,0];
          var _hM_=i + 1 | 0;
          if(n !== i){var i=_hM_;continue}
          break}}
      var _hK_=r[1];
      if(tables){tables[2] = _hK_;return res}
      throw [0,Assert_failure,_cK_]}
    function lookup_tables(root,keys)
     {var tables$2=get_data$0(root);
      if(tables$2)
       {var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=tables$2;
        a:
        for(;;)
         {if(0 <= i)
           {var key=caml_check_bound(keys,i)[1 + i],tables$0=tables;
            for(;;)
             {if(tables$0)
               {if(tables$0[1] === key)
                 {var tables$1=get_data$0(tables$0);
                  if(tables$1)
                   {var i$0=i - 1 | 0,i=i$0,tables=tables$1;continue a}
                  throw [0,Assert_failure,_cP_]}
                if(tables$0)
                 {var _hI_=tables$0[3];
                  if(_hI_){var tables$0=_hI_;continue}
                  var v=[0,key,0,0];
                  if(tables$0)
                   {tables$0[3] = v;return build_path(i - 1 | 0,keys,v)}
                  throw [0,Assert_failure,_cL_]}
                throw [0,Assert_failure,_cO_]}
              throw [0,Assert_failure,_cM_]}}
          return tables}}
      return build_path(keys.length - 1 - 1 | 0,keys,root)}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if
       (0
        !==
        (n % 2 | 0)
        &&
        !
        ((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n))
       {var n$0=new_method(table);switch$0 = 1}
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _hC_=i[1],
           label=caml_check_bound(methods,_hC_)[1 + _hC_],
           next=
            function(param)
             {i[1]++;
              var _hH_=i[1];
              return caml_check_bound(methods,_hH_)[1 + _hH_]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[1 + e][1 + n]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[1 + n] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[1 + n])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[1 + e][1 + n])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[1 + n])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[1 + e][1 + n])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[1 + n],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[1 + e][1 + n],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _hF_=caml_call1(obj[1][1 + m],obj);
                     return caml_call2(obj[1][1 + n],obj,_hF_)}}
                 (n$15,m$1);
              break;
             case 20:
              var m$2=next(0),x$9=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,x)
                  {return function(obj)
                    {return caml_call1(caml_get_public_method(x,m,0),x)}}
                 (m$2,x$9);
              break;
             case 21:
              var m$3=next(0),n$16=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,n)
                  {return function(obj)
                    {var _hE_=obj[1 + n];
                     return caml_call1(caml_get_public_method(_hE_,m,0),_hE_)}}
                 (m$3,n$16);
              break;
             case 22:
              var m$4=next(0),e$4=next(0),n$17=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,e,n)
                  {return function(obj)
                    {var _hD_=obj[1 + e][1 + n];
                     return caml_call1(caml_get_public_method(_hD_,m,0),_hD_)}}
                 (m$4,e$4,n$17);
              break;
             default:
              var m$5=next(0),n$18=next(0);
              new_cache(table);
              var
               clo$0=
                function(m,n)
                  {return function(obj)
                    {var _hG_=caml_call1(obj[1][1 + n],obj);
                     return caml_call1(caml_get_public_method(_hG_,m,0),_hG_)}}
                 (m$5,n$18)}
          else
           var clo$0=clo;
          set_method(table,label,clo$0);
          i[1]++;
          continue}
        return 0}}
    function stats$0(param)
     {return [0,table_count[1],method_count[1],inst_var_count[1]]}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy$7,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params$0,
       stats$0];
    caml_register_global(821,CamlinternalOO,"CamlinternalOO");
    var Stdlib_Oo=[0,copy$7,public_method_label,public_method_label];
    caml_register_global(822,Stdlib_Oo,"Stdlib__Oo");
    function init_mod_block(loc,comps$0)
     {var
       length=comps$0.length - 1,
       modu=caml_obj_block(0,length),
       _hy_=length - 1 | 0,
       _hx_=0;
      if(! (_hy_ < 0))
       {var i=_hx_;
        for(;;)
         {var shape=caml_check_bound(comps$0,i)[1 + i];
          if(typeof shape === "number")
           switch(shape)
            {case 0:
              var
               fn$0=
                function(i)
                 {function fn(x)
                   {var fn$0=modu[1 + i];
                    if(fn === fn$0)throw [0,Undefined_recursive_module,loc];
                    return caml_call1(fn$0,x)}
                  return fn},
               fn=fn$0(i),
               init=fn;
              break;
             case 1:
              var l=[];
              runtime.caml_update_dummy
               (l,
                [246,
                 function(l,i)
                   {return function(_hA_)
                     {var l$0=modu[1 + i];
                      if(l === l$0)throw [0,Undefined_recursive_module,loc];
                      var _hB_=caml_obj_tag(l$0);
                      return 250 === _hB_
                              ?l$0[1]
                              :246 === _hB_?force_lazy_block(l$0):l$0}}
                  (l,i)]);
              var init=l;
              break;
             default:var init=dummy_class(loc)}
          else
           if(0 === shape[0])
            var comps=shape[1],init=init_mod_block(loc,comps);
           else
            var v=shape[1],init=v;
          modu[1 + i] = init;
          var _hz_=i + 1 | 0;
          if(_hy_ !== i){var i=_hz_;continue}
          break}}
      return modu}
    function init_mod(loc,shape)
     {if(typeof shape !== "number" && 0 === shape[0])
       {var comps=shape[1];return init_mod_block(loc,comps)}
      return failwith(cst_CamlinternalMod_init_mod_n)}
    function update_mod_block(comps$0,o,n)
     {if(0 === caml_obj_tag(n) && comps$0.length - 1 <= n.length - 1)
       {var _hv_=comps$0.length - 1 - 1 | 0,_hu_=0;
        if(! (_hv_ < 0))
         {var i=_hu_;
          for(;;)
           {var n$0=n[1 + i],shape=caml_check_bound(comps$0,i)[1 + i];
            if(typeof shape === "number")
             if(2 === shape)
              {var switch$0=0;
               if(0 === caml_obj_tag(n$0) && 4 === n$0.length - 1)
                {var cl=o[1 + i],j=0;
                 for(;;)
                  {cl[1 + j] = n$0[1 + j];
                   var _ht_=j + 1 | 0;
                   if(3 !== j){var j=_ht_;continue}
                   break}}
               else
                switch$0 = 1;
               if(switch$0)throw [0,Assert_failure,_cQ_]}
             else
              o[1 + i] = n$0;
            else
             if(0 === shape[0])
              {var comps=shape[1];update_mod_block(comps,o[1 + i],n$0)}
            var _hw_=i + 1 | 0;
            if(_hv_ !== i){var i=_hw_;continue}
            break}}
        return 0}
      throw [0,Assert_failure,_cR_]}
    function update_mod(shape,o,n)
     {if(typeof shape !== "number" && 0 === shape[0])
       {var comps=shape[1];return update_mod_block(comps,o,n)}
      return failwith(cst_CamlinternalMod_update_mod)}
    var CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(823,CamlinternalMod,"CamlinternalMod");
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var kwd_table=caml_call2(Stdlib_Hashtbl[1],0,17);
      iter$2
       (function(s){return caml_call3(Stdlib_Hashtbl[5],kwd_table,s,[0,s])},
        keywords);
      function ident_or_keyword(id)
       {try
         {var _hr_=caml_call2(Stdlib_Hashtbl[6],kwd_table,id);return _hr_}
        catch(_hs_)
         {_hs_ = caml_wrap_exception(_hs_);
          if(_hs_ === Not_found)return [1,id];
          throw _hs_}}
      function keyword_or_error(c)
       {var s=make$1(1,c);
        try
         {var _hp_=caml_call2(Stdlib_Hashtbl[6],kwd_table,s);return _hp_}
        catch(_hq_)
         {_hq_ = caml_wrap_exception(_hq_);
          if(_hq_ === Not_found)throw [0,Error,cat(cst_Illegal_character,s)];
          throw _hq_}}
      function comment(strm)
       {a:
        for(;;)
         {var match=peek$0(strm);
          if(match)
           {var switcher=match[1] - 40 | 0;
            if(! (2 < switcher >>> 0))
             switch(switcher)
              {case 0:
                junk(strm);
                var match$0=peek$0(strm);
                if(match$0)
                 {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                  junk(strm);
                  continue}
                throw Failure$0;
               case 1:break;
               default:
                junk(strm);
                for(;;)
                 {var match$1=peek$0(strm);
                  if(match$1)
                   {var _ho_=match$1[1];
                    if(41 === _ho_){junk(strm);return 0}
                    if(42 === _ho_){junk(strm);continue}
                    junk(strm);
                    continue a}
                  throw Failure$0}}
            junk(strm);
            continue}
          throw Failure$0}}
      function escape(strm)
       {var match=peek$0(strm);
        if(match)
         {var _hl_=match[1];
          if(58 <= _hl_)
           {var switcher=_hl_ - 110 | 0;
            if(! (6 < switcher >>> 0))
             switch(switcher)
              {case 0:junk(strm);return 10;
               case 4:junk(strm);return 13;
               case 6:junk(strm);return 9
               }}
          else
           if(48 <= _hl_)
            {junk(strm);
             var match$0=peek$0(strm);
             if(match$0)
              {var _hm_=match$0[1];
               if(! (9 < _hm_ - 48 >>> 0))
                {junk(strm);
                 var match$1=peek$0(strm);
                 if(match$1)
                  {var _hn_=match$1[1];
                   if(! (9 < _hn_ - 48 >>> 0))
                    {junk(strm);
                     return chr
                             ((((_hl_ - 48 | 0) * 100 | 0)
                               +
                               ((_hm_ - 48 | 0) * 10 | 0)
                               |
                               0)
                              +
                              (_hn_ - 48 | 0)
                              |
                              0)}}
                 throw [0,Error,cst$99]}}
             throw [0,Error,cst$98]}
          junk(strm);
          return _hl_}
        throw Failure$0}
      function end_exponent_part(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _hk_=match[1];
            if(! (9 < _hk_ - 48 >>> 0)){junk(strm);store(_hk_);continue}}
          return [0,[3,caml_float_of_string(get_string(0))]]}}
      function exponent_part(strm)
       {var match=peek$0(strm);
        if(match)
         {var _hj_=match[1],switch$0=0;
          if(43 !== _hj_ && 45 !== _hj_)switch$0 = 1;
          if(! switch$0)
           {junk(strm);store(_hj_);return end_exponent_part(strm)}}
        return end_exponent_part(strm)}
      function number(s)
       {for(;;)
         {var match=peek$0(s);
          if(match)
           {var _hg_=match[1];
            if(58 <= _hg_)
             {var switch$0=0;
              if(69 === _hg_ || 101 === _hg_)switch$0 = 1;
              if(switch$0){junk(s);store(69);return exponent_part(s)}}
            else
             {if(46 === _hg_)
               {junk(s);
                store(46);
                for(;;)
                 {var match$0=peek$0(s);
                  if(match$0)
                   {var _hh_=match$0[1],_hi_=_hh_ - 69 | 0;
                    if(32 < _hi_ >>> 0)
                     {if(! (9 < _hi_ + 21 >>> 0)){junk(s);store(_hh_);continue}}
                    else
                     if(30 < _hi_ - 1 >>> 0)
                      {junk(s);store(69);return exponent_part(s)}}
                  return [0,[3,caml_float_of_string(get_string(0))]]}}
              if(48 <= _hg_){junk(s);store(_hg_);continue}}}
          return [0,[2,caml_int_of_string(get_string(0))]]}}
      function ident2(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _he_=match[1],switch$0=0;
            if(94 <= _he_)
             {var _hf_=_he_ - 95 | 0;
              if(30 < _hf_ >>> 0)
               {if(! (32 <= _hf_))switch$0 = 1}
              else
               if(29 === _hf_)switch$0 = 1}
            else
             if(65 <= _he_)
              {if(92 === _he_)switch$0 = 1}
             else
              if(33 <= _he_)
               switch(_he_ - 33 | 0)
                {case 0:
                 case 2:
                 case 3:
                 case 4:
                 case 5:
                 case 9:
                 case 10:
                 case 12:
                 case 14:
                 case 25:
                 case 27:
                 case 28:
                 case 29:
                 case 30:
                 case 31:switch$0 = 1;break
                 }
            if(switch$0){junk(strm);store(_he_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function neg_number(s)
       {var match=peek$0(s);
        if(match)
         {var _hd_=match[1];
          if(! (9 < _hd_ - 48 >>> 0))
           {junk(s);reset_buffer(0);store(45);store(_hd_);return number(s)}}
        reset_buffer(0);
        store(45);
        return ident2(s)}
      function ident(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _hb_=match[1],switch$0=0;
            if(91 <= _hb_)
             {var _hc_=_hb_ - 95 | 0;
              if(27 < _hc_ >>> 0)
               {if(97 <= _hc_)switch$0 = 1}
              else
               if(1 !== _hc_)switch$0 = 1}
            else
             if(48 <= _hb_)
              {if(6 < _hb_ - 58 >>> 0)switch$0 = 1}
             else
              if(39 === _hb_)switch$0 = 1;
            if(switch$0){junk(strm);store(_hb_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function next_token$0(counter,strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _g3_=match[1],switch$0=0;
            if(124 <= _g3_)
             {if(127 <= _g3_)
               {if(192 <= _g3_)switch$0 = 1}
              else
               if(125 !== _g3_)switch$0 = 2}
            else
             {var _g4_=_g3_ - 65 | 0;
              if(57 < _g4_ >>> 0)
               {if(! (58 <= _g4_))
                 switch(_g4_ + 65 | 0)
                  {case 34:
                    junk(strm);
                    reset_buffer(0);
                    for(;;)
                     {var match$1=peek$0(strm);
                      if(match$1)
                       {var _g6_=match$1[1];
                        if(34 === _g6_){junk(strm);return [0,[4,get_string(0)]]}
                        if(92 === _g6_)
                         {junk(strm);
                          try
                           {var c$0=escape(strm)}
                          catch(_ha_)
                           {_ha_ = caml_wrap_exception(_ha_);
                            if(_ha_ === Failure$0)throw [0,Error,cst$96];
                            throw _ha_;
                            var _g9_=_ha_}
                          store(c$0);
                          continue}
                        junk(strm);
                        store(_g6_);
                        continue}
                      throw Failure$0}
                   case 39:
                    junk(strm);
                    try
                     {var match$2=peek$0(strm);
                      if(! match$2)throw Failure$0;
                      var _g7_=match$2[1];
                      if(92 === _g7_)
                       {junk(strm);
                        try
                         {var _g8_=escape(strm)}
                        catch(_g$_)
                         {_g$_ = caml_wrap_exception(_g$_);
                          if(_g$_ === Failure$0)throw [0,Error,cst$97];
                          throw _g$_}
                        var c=_g8_}
                      else
                       {junk(strm);var c=_g7_}}
                    catch(_g__)
                     {_g__ = caml_wrap_exception(_g__);
                      if(_g__ === Failure$0)throw [0,Error,cst$94];
                      throw _g__}
                    var match$0=peek$0(strm);
                    if(match$0 && 39 === match$0[1])
                     {junk(strm);return [0,[5,c]]}
                    throw [0,Error,cst$95];
                   case 40:
                    junk(strm);
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return maybe_comment(counter$0,strm)}
                    return caml_trampoline_return(maybe_comment,[0,strm]);
                   case 45:junk(strm);return neg_number(strm);
                   case 9:
                   case 10:
                   case 12:
                   case 13:
                   case 26:
                   case 32:junk(strm);continue;
                   case 48:
                   case 49:
                   case 50:
                   case 51:
                   case 52:
                   case 53:
                   case 54:
                   case 55:
                   case 56:
                   case 57:
                    junk(strm);reset_buffer(0);store(_g3_);return number(strm);
                   case 33:
                   case 35:
                   case 36:
                   case 37:
                   case 38:
                   case 42:
                   case 43:
                   case 47:
                   case 58:
                   case 60:
                   case 61:
                   case 62:
                   case 63:
                   case 64:switch$0 = 2;break
                   }}
              else
               {var _g5_=_g4_ - 26 | 0;
                if(5 < _g5_ >>> 0)
                 switch$0 = 1;
                else
                 switch(_g5_)
                  {case 4:switch$0 = 1;break;case 1:case 3:switch$0 = 2;break}}}
            switch(switch$0)
             {case 0:junk(strm);return [0,keyword_or_error(_g3_)];
              case 1:
               junk(strm);reset_buffer(0);store(_g3_);return ident(strm);
              default:
               junk(strm);reset_buffer(0);store(_g3_);return ident2(strm)}}
          return 0}}
      function maybe_comment(counter,strm)
       {var match=peek$0(strm);
        if(match && 42 === match[1])
         {junk(strm);
          comment(strm);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return next_token$0(counter$0,strm)}
          return caml_trampoline_return(next_token$0,[0,strm])}
        return [0,keyword_or_error(40)]}
      function next_token(strm){return caml_trampoline(next_token$0(0,strm))}
      return function(input)
       {return from(function(count){return next_token(input)})}}
    var Stdlib_Genlex=[0,make_lexer];
    caml_register_global(824,Stdlib_Genlex,"Stdlib__Genlex");
    function MakeSeeded$0(H)
     {var prng=[246,function(_g2_){return caml_call1(_ci_[2],0)}];
      function create(opt,initial_size)
       {if(opt)
         var sth=opt[1],random=sth;
        else
         var random=caml_call1(Stdlib_Hashtbl[17],0);
        var x=16;
        for(;;)
         {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
           {var x$0=x * 2 | 0,x=x$0;continue}
          if(random)
           var
            _g0_=caml_obj_tag(prng),
            _g1_=250 === _g0_?prng[1]:246 === _g0_?force_lazy_block(prng):prng,
            seed=caml_call1(_ci_[4],_g1_);
          else
           var seed=0;
          return [0,0,caml_make_vect(x,0),seed,x]}}
      function clear(h)
       {h[1] = 0;
        var len=h[2].length - 1,_gY_=len - 1 | 0,_gX_=0;
        if(! (_gY_ < 0))
         {var i=_gX_;
          for(;;)
           {caml_check_bound(h[2],i)[1 + i] = 0;
            var _gZ_=i + 1 | 0;
            if(_gY_ !== i){var i=_gZ_;continue}
            break}}
        return 0}
      function reset(h)
       {var len=h[2].length - 1;
        return len === h[4]
                ?clear(h)
                :(h[1] = 0,h[2] = caml_make_vect(h[4],0),0)}
      function copy(init)
       {var _gU_=init[4],_gV_=init[3],_gW_=copy$1(init[2]);
        return [0,init[1],_gW_,_gV_,_gU_]}
      function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
      function clean(h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hkey=param$0[1],rest=param$0[3],c=param$0[2];
              if(caml_call1(H[7],c))
               {var rest$0=param$0[3],c$0=param$0[2];
                return [0,hkey,c$0,do_bucket(rest$0)]}
              h[1] = h[1] - 1 | 0;
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_gR_=d.length - 1 - 1 | 0,_gQ_=0;
        if(! (_gR_ < 0))
         {var i=_gQ_;
          for(;;)
           {var _gS_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _gS_;
            var _gT_=i + 1 | 0;
            if(_gR_ !== i){var i=_gT_;continue}
            break}}
        return 0}
      function resize(h)
       {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
        clean(h);
        var
         _gJ_=nsize < max_array_length?1:0,
         _gK_=_gJ_?(osize >>> 1 | 0) <= h[1]?1:0:_gJ_;
        if(_gK_)
         {var ndata=caml_make_vect(nsize,0);
          h[2] = ndata;
          var
           insert_bucket=
            function(param)
             {if(param)
               {var rest=param[3],data=param[2],hkey=param[1];
                insert_bucket(rest);
                var
                 nidx=key_index(h,hkey),
                 _gP_=[0,hkey,data,caml_check_bound(ndata,nidx)[1 + nidx]];
                caml_check_bound(ndata,nidx)[1 + nidx] = _gP_;
                return 0}
              return 0},
           _gM_=osize - 1 | 0,
           _gL_=0;
          if(! (_gM_ < 0))
           {var i=_gL_;
            for(;;)
             {insert_bucket(caml_check_bound(odata,i)[1 + i]);
              var _gO_=i + 1 | 0;
              if(_gM_ !== i){var i=_gO_;continue}
              break}}
          var _gN_=0}
        else
         var _gN_=_gK_;
        return _gN_}
      function add(h,key,info)
       {var
         hkey=caml_call2(H[2],h[3],key),
         i=key_index(h,hkey),
         container=caml_call2(H[1],key,info),
         bucket=[0,hkey,container,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _gI_=h[2].length - 1 << 1 < h[1]?1:0;
        return _gI_?resize(h):_gI_}
      function remove(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function remove_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],next=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:h[1] = h[1] - 1 | 0;return next;
                  case 1:return [0,hk,c,remove_bucket(next)];
                  default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
              var next$0=param$0[3],c$0=param$0[2];
              return [0,hk,c$0,remove_bucket(next$0)]}
            return 0}}
        var
         i=key_index(h,hkey),
         _gH_=remove_bucket(caml_check_bound(h[2],i)[1 + i]);
        caml_check_bound(h[2],i)[1 + i] = _gH_;
        return 0}
      function find(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _gG_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_gG_)[1 + _gG_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var match$0=caml_call1(H[4],c);
                 if(match$0){var d=match$0[1];return d}
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param$0=param[3],param=param$0;
            continue}
          throw Not_found}}
      function find_opt(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _gF_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_gF_)[1 + _gF_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var d=caml_call1(H[4],c);
                 if(d)return d;
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param$0=param[3],param=param$0;
            continue}
          return 0}}
      function find_all(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],rest=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:
                   var match$0=caml_call1(H[4],c);
                   if(match$0)
                    {var d=match$0[1];return [0,d,find_in_bucket(rest)]}
                   var param$0=rest;
                   continue;
                  case 1:var param$0=rest;continue;
                  default:var param$0=rest;continue}}
              var param$1=param$0[3],param$0=param$1;
              continue}
            return 0}}
        var _gE_=key_index(h,hkey);
        return find_in_bucket(caml_check_bound(h[2],_gE_)[1 + _gE_])}
      function replace(h,key,info)
       {var hkey=caml_call2(H[2],h[3],key);
        function replace_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],next=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                if(match){var param$0=next;continue}
                return caml_call3(H[6],c,key,info)}
              var param$1=param$0[3],param$0=param$1;
              continue}
            throw Not_found}}
        var i=key_index(h,hkey),l=caml_check_bound(h[2],i)[1 + i];
        try
         {var _gC_=replace_bucket(l);return _gC_}
        catch(_gD_)
         {_gD_ = caml_wrap_exception(_gD_);
          if(_gD_ === Not_found)
           {var container=caml_call2(H[1],key,info);
            caml_check_bound(h[2],i)[1 + i] = [0,hkey,container,l];
            h[1] = h[1] + 1 | 0;
            var _gB_=h[2].length - 1 << 1 < h[1]?1:0;
            return _gB_?resize(h):_gB_}
          throw _gD_}}
      function mem(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _gA_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_gA_)[1 + _gA_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hk === hkey)
             {var match=caml_call2(H[3],c,key);
              if(match){var param=rest;continue}
              return 1}
            var param$0=param[3],param=param$0;
            continue}
          return 0}}
      function iter$0(f,h)
       {var d$0=h[2],_gy_=d$0.length - 1 - 1 | 0,_gx_=0;
        if(! (_gy_ < 0))
         {var i=_gx_;
          a:
          for(;;)
           {var param$0=caml_check_bound(d$0,i)[1 + i],param=param$0;
            for(;;)
             {if(param)
               {var
                 rest=param[3],
                 c=param[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1];caml_call2(f,k,d);switch$0 = 1}
                var param=rest;
                continue}
              var _gz_=i + 1 | 0;
              if(_gy_ !== i){var i=_gz_;continue a}
              break}
            break}}
        return 0}
      function fold(f,h,init)
       {var d$0=h[2],accu$1=[0,init],_gu_=d$0.length - 1 - 1 | 0,_gt_=0;
        if(! (_gu_ < 0))
         {var i=_gt_;
          a:
          for(;;)
           {var
             _gv_=accu$1[1],
             b$0=caml_check_bound(d$0,i)[1 + i],
             b=b$0,
             accu=_gv_;
            for(;;)
             {if(b)
               {var
                 rest=b[3],
                 c=b[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1],accu$0=caml_call3(f,k,d,accu);
                  switch$0 = 1}
                if(! switch$0)var accu$0=accu;
                var b=rest,accu=accu$0;
                continue}
              accu$1[1] = accu;
              var _gw_=i + 1 | 0;
              if(_gu_ !== i){var i=_gw_;continue a}
              break}
            break}}
        return accu$1[1]}
      function filter_map_inplace(f,h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               rest=param$0[3],
               c=param$0[2],
               hk=param$0[1],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var d=match$0[1],k=match[1],match$1=caml_call2(f,k,d);
                if(match$1)
                 {var new_d=match$1[1];
                  caml_call3(H[6],c,k,new_d);
                  return [0,hk,c,do_bucket(rest)]}
                var param$0=rest;
                continue}
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_gq_=d.length - 1 - 1 | 0,_gp_=0;
        if(! (_gq_ < 0))
         {var i=_gp_;
          for(;;)
           {var _gr_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _gr_;
            var _gs_=i + 1 | 0;
            if(_gq_ !== i){var i=_gs_;continue}
            break}}
        return 0}
      function length(h){return h[1]}
      function bucket_length(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             param$1=param$0[3],
             accu$1=accu$0 + 1 | 0,
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function stats(h)
       {var
         _gl_=h[2],
         _gm_=0,
         mbl=
          fold_left$3
           (function(m,b){return max$1(m,bucket_length(0,b))},_gm_,_gl_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _gn_=h[2];
        iter$5
         (function(b)
           {var
             l=bucket_length(0,b),
             _go_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
            caml_check_bound(histo,l)[1 + l] = _go_;
            return 0},
          _gn_);
        return [0,h[1],h[2].length - 1,mbl,histo]}
      function bucket_length_alive(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var rest=param$0[3],c=param$0[2];
            if(caml_call1(H[7],c))
             {var accu$1=accu$0 + 1 | 0,accu$0=accu$1,param$0=rest;continue}
            var param$1=param$0[3],param$0=param$1;
            continue}
          return accu$0}}
      function stats_alive(h)
       {var
         size=[0,0],
         _gh_=h[2],
         _gi_=0,
         mbl=
          fold_left$3
           (function(m,b){return max$1(m,bucket_length_alive(0,b))},_gi_,_gh_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _gj_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length_alive(0,b);
            size[1] = size[1] + l | 0;
            var _gk_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
            caml_check_bound(histo,l)[1 + l] = _gk_;
            return 0},
          _gj_);
        return [0,size[1],h[2].length - 1,mbl,histo]}
      function to_seq(tbl)
       {var tbl_data=tbl[2];
        function aux(i,buck,param)
         {var i$0=i,buck$0=buck;
          for(;;)
           {if(buck$0)
             {var
               next=buck$0[3],
               c=buck$0[2],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var data=match$0[1],key=match[1];
                return [0,
                        [0,key,data],
                        function(_gg_){return aux(i$0,next,_gg_)}]}
              var buck$0=next;
              continue}
            if(i$0 === tbl_data.length - 1)return 0;
            var
             buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
             i$1=i$0 + 1 | 0,
             i$0=i$1,
             buck$0=buck$1;
            continue}}
        var _gd_=0,_ge_=0;
        return function(_gf_){return aux(_ge_,_gd_,_gf_)}}
      function to_seq_keys(m)
       {var _f$_=to_seq(m);
        function _ga_(_gc_){return _gc_[1]}
        return function(_gb_){return map$1(_ga_,_f$_,_gb_)}}
      function to_seq_values(m)
       {var _f7_=to_seq(m);
        function _f8_(_f__){return _f__[2]}
        return function(_f9_){return map$1(_f8_,_f7_,_f9_)}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$0,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$5(param){return caml_call1(_q_[1],1)}
    function get_key$0(t){return caml_call2(_q_[3],t,0)}
    function get_key_copy$0(t){return caml_call2(_q_[4],t,0)}
    function set_key$0(t,k){return caml_call3(_q_[5],t,0,k)}
    function unset_key$0(t){return caml_call2(_q_[6],t,0)}
    function check_key$0(t){return caml_call2(_q_[7],t,0)}
    function blit_key$0(t1,t2){return caml_call5(_q_[8],t1,0,t2,0,1)}
    function get_data$1(t){return caml_call1(_q_[9],t)}
    function get_data_copy(t){return caml_call1(_q_[10],t)}
    function set_data(t,d){return caml_call2(_q_[11],t,d)}
    function unset_data(t){return caml_call1(_q_[12],t)}
    function check_data(t){return caml_call1(_q_[13],t)}
    function blit_data(t1,t2){return caml_call2(_q_[14],t1,t2)}
    function make$4(key,data)
     {var eph=create$5(0);set_data(eph,data);set_key$0(eph,key);return eph}
    function query(eph,key)
     {var match=get_key$0(eph);
      if(match){var k=match[1];return k === key?get_data$1(eph):0}
      return 0}
    function MakeSeeded$1(H)
     {function create(k,d)
       {var c=create$5(0);set_data(c,d);set_key$0(c,k);return c}
      var hash=H[2];
      function equal(c,k)
       {var match=get_key$0(c);
        if(match){var k$0=match[1];return caml_call2(H[1],k,k$0)?0:1}
        return 2}
      function set_key_data(c,k,d)
       {unset_data(c);set_key$0(c,k);return set_data(c,d)}
      return MakeSeeded$0
              ([0,
                create,
                hash,
                equal,
                get_data$1,
                get_key$0,
                set_key_data,
                check_key$0])}
    function Make$2(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$1([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _f6_=include[1];
      function create(sz){return caml_call2(_f6_,_cS_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function make$5(param){return [0,0]}
    function add$1(b,k,d){var _f5_=b[1];b[1] = [0,make$4(k,d),_f5_];return 0}
    function test_key(k,e)
     {var match=get_key$0(e);
      if(match){var x=match[1];if(x === k)return 1}
      return 0}
    function remove$0(b,k)
     {var l=b[1],acc=0;
      for(;;)
       {if(l)
         {var h=l[1],t=l[2];
          if(test_key(k,h)){b[1] = rev_append(acc,t);return 0}
          var l$0=l[2],acc$0=[0,h,acc],l=l$0,acc=acc$0;
          continue}
        return 0}}
    function find$2(b,k)
     {var
       _f3_=b[1],
       match=find_opt(function(_f4_){return test_key(k,_f4_)},_f3_);
      if(match){var e=match[1];return get_data$1(e)}
      return 0}
    function length$7(b){return length$1(b[1])}
    function clear$3(b){b[1] = 0;return 0}
    function create$6(param){return caml_call1(_q_[1],2)}
    function get_key1(t){return caml_call2(_q_[3],t,0)}
    function get_key1_copy(t){return caml_call2(_q_[4],t,0)}
    function set_key1(t,k){return caml_call3(_q_[5],t,0,k)}
    function unset_key1(t){return caml_call2(_q_[6],t,0)}
    function check_key1(t){return caml_call2(_q_[7],t,0)}
    function get_key2(t){return caml_call2(_q_[3],t,1)}
    function get_key2_copy(t){return caml_call2(_q_[4],t,1)}
    function set_key2(t,k){return caml_call3(_q_[5],t,1,k)}
    function unset_key2(t){return caml_call2(_q_[6],t,1)}
    function check_key2(t){return caml_call2(_q_[7],t,1)}
    function blit_key1(t1,t2){return caml_call5(_q_[8],t1,0,t2,0,1)}
    function blit_key2(t1,t2){return caml_call5(_q_[8],t1,1,t2,1,1)}
    function blit_key12(t1,t2){return caml_call5(_q_[8],t1,0,t2,0,2)}
    function get_data$2(t){return caml_call1(_q_[9],t)}
    function get_data_copy$0(t){return caml_call1(_q_[10],t)}
    function set_data$0(t,d){return caml_call2(_q_[11],t,d)}
    function unset_data$0(t){return caml_call1(_q_[12],t)}
    function check_data$0(t){return caml_call1(_q_[13],t)}
    function blit_data$0(t1,t2){return caml_call2(_q_[14],t1,t2)}
    function make$6(key1,key2,data)
     {var eph=create$6(0);
      set_data$0(eph,data);
      set_key1(eph,key1);
      set_key2(eph,key2);
      return eph}
    function query$0(eph,key1,key2)
     {var match=get_key1(eph);
      if(match)
       {var k=match[1];
        if(k === key1)
         {var match$0=get_key2(eph);
          if(match$0)
           {var k$0=match$0[1];return k$0 === key2?get_data$2(eph):0}
          return 0}
        return 0}
      return 0}
    function MakeSeeded$2(H1,H2)
     {function create(param,d)
       {var k2=param[2],k1=param[1],c=create$6(0);
        set_data$0(c,d);
        set_key1(c,k1);
        set_key2(c,k2);
        return c}
      function hash(seed,param)
       {var
         k2=param[2],
         k1=param[1],
         _f2_=caml_call2(H2[2],seed,k2) * 65599 | 0;
        return caml_call2(H1[2],seed,k1) + _f2_ | 0}
      function equal(c,param)
       {var k2=param[2],k1=param[1],match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2$0=match$0[1],k1$0=match[1];
          if(caml_call2(H1[1],k1,k1$0) && caml_call2(H2[1],k2,k2$0))return 0;
          return 1}
        return 2}
      function get_key(c)
       {var match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2=match$0[1],k1=match[1];return [0,[0,k1,k2]]}
        return 0}
      function set_key_data(c,param,d)
       {var k2=param[2],k1=param[1];
        unset_data$0(c);
        set_key1(c,k1);
        set_key2(c,k2);
        return set_data$0(c,d)}
      function check_key(c)
       {var _f1_=check_key1(c);return _f1_?check_key2(c):_f1_}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$2,get_key,set_key_data,check_key])}
    function Make$3(H1,H2)
     {var equal=H2[1];
      function hash(seed,x){return caml_call1(H2[2],x)}
      var equal$0=H1[1],_fZ_=[0,equal,hash];
      function hash$0(seed,x){return caml_call1(H1[2],x)}
      var
       include=MakeSeeded$2([0,equal$0,hash$0],_fZ_),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _f0_=include[1];
      function create(sz){return caml_call2(_f0_,_cT_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function make$7(param){return [0,0]}
    function add$2(b,k1,k2,d)
     {var _fY_=b[1];b[1] = [0,make$6(k1,k2,d),_fY_];return 0}
    function test_keys(k1,k2,e)
     {var match=get_key1(e),match$0=get_key2(e);
      if(match && match$0)
       {var x2=match$0[1],x1=match[1];if(x1 === k1 && x2 === k2)return 1}
      return 0}
    function remove$1(b,k1,k2)
     {var l=b[1],acc=0;
      for(;;)
       {if(l)
         {var h=l[1],t=l[2];
          if(test_keys(k1,k2,h)){b[1] = rev_append(acc,t);return 0}
          var l$0=l[2],acc$0=[0,h,acc],l=l$0,acc=acc$0;
          continue}
        return 0}}
    function find$3(b,k1,k2)
     {var
       _fW_=b[1],
       match=find_opt(function(_fX_){return test_keys(k1,k2,_fX_)},_fW_);
      if(match){var e=match[1];return get_data$2(e)}
      return 0}
    function length$8(b){return length$1(b[1])}
    function clear$4(b){b[1] = 0;return 0}
    function create$7(n){return caml_call1(_q_[1],n)}
    function length$9(k){return caml_call1(_q_[2],k)}
    function get_key$1(t,n){return caml_call2(_q_[3],t,n)}
    function get_key_copy$1(t,n){return caml_call2(_q_[4],t,n)}
    function set_key$1(t,n,k){return caml_call3(_q_[5],t,n,k)}
    function unset_key$1(t,n){return caml_call2(_q_[6],t,n)}
    function check_key$1(t,n){return caml_call2(_q_[7],t,n)}
    function blit_key$1(t1,o1,t2,o2,l)
     {return caml_call5(_q_[8],t1,o1,t2,o2,l)}
    function get_data$3(t){return caml_call1(_q_[9],t)}
    function get_data_copy$1(t){return caml_call1(_q_[10],t)}
    function set_data$1(t,d){return caml_call2(_q_[11],t,d)}
    function unset_data$1(t){return caml_call1(_q_[12],t)}
    function check_data$1(t){return caml_call1(_q_[13],t)}
    function blit_data$1(t1,t2){return caml_call2(_q_[14],t1,t2)}
    function make$8(keys,data)
     {var l=keys.length - 1,eph=create$7(l);
      set_data$1(eph,data);
      var _fU_=l - 1 | 0,_fT_=0;
      if(! (_fU_ < 0))
       {var i=_fT_;
        for(;;)
         {set_key$1(eph,i,caml_check_bound(keys,i)[1 + i]);
          var _fV_=i + 1 | 0;
          if(_fU_ !== i){var i=_fV_;continue}
          break}}
      return eph}
    function query$1(eph,keys)
     {var l=length$9(eph);
      try
       {if(l !== keys.length - 1)throw Exit;
        var _fP_=l - 1 | 0,_fO_=0;
        if(! (_fP_ < 0))
         {var i=_fO_;
          for(;;)
           {var match=get_key$1(eph,i);
            if(! match)throw Exit;
            var k=match[1];
            if(k !== caml_check_bound(keys,i)[1 + i])throw Exit;
            var _fR_=i + 1 | 0;
            if(_fP_ !== i){var i=_fR_;continue}
            break}}
        var _fQ_=get_data$3(eph);
        return _fQ_}
      catch(_fS_)
       {_fS_ = caml_wrap_exception(_fS_);if(_fS_ === Exit)return 0;throw _fS_}}
    function MakeSeeded$3(H)
     {function create(k,d)
       {var c=create$7(k.length - 1);
        set_data$1(c,d);
        var _fM_=k.length - 1 - 1 | 0,_fL_=0;
        if(! (_fM_ < 0))
         {var i=_fL_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _fN_=i + 1 | 0;
            if(_fM_ !== i){var i=_fN_;continue}
            break}}
        return c}
      function hash(seed,k)
       {var h=[0,0],_fH_=k.length - 1 - 1 | 0,_fG_=0;
        if(! (_fH_ < 0))
         {var i=_fG_;
          for(;;)
           {var _fI_=h[1],_fJ_=caml_check_bound(k,i)[1 + i];
            h[1] = (caml_call2(H[2],seed,_fJ_) * 65599 | 0) + _fI_ | 0;
            var _fK_=i + 1 | 0;
            if(_fH_ !== i){var i=_fK_;continue}
            break}}
        return h[1]}
      function equal(c,k)
       {var len=k.length - 1,len$0=length$9(c);
        if(len !== len$0)return 1;
        var i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 <= i)
           {var match=get_key$1(c,i);
            if(match)
             {var ki=match[1],_fF_=caml_check_bound(k,i)[1 + i];
              if(caml_call2(H[1],_fF_,ki)){var i$0=i - 1 | 0,i=i$0;continue}
              return 1}
            return 2}
          return 0}}
      function get_key(c)
       {var len=length$9(c);
        if(0 === len)return [0,[0]];
        var match=get_key$1(c,0);
        if(match)
         {var k0=match[1],a=caml_make_vect(len,k0),i$1=len - 1 | 0,i=i$1;
          for(;;)
           {if(1 <= i)
             {var match$0=get_key$1(c,i);
              if(match$0)
               {var ki=match$0[1];
                caml_check_bound(a,i)[1 + i] = ki;
                var i$0=i - 1 | 0,i=i$0;
                continue}
              return 0}
            return [0,a]}}
        return 0}
      function set_key_data(c,k,d)
       {unset_data$1(c);
        var _fD_=k.length - 1 - 1 | 0,_fC_=0;
        if(! (_fD_ < 0))
         {var i=_fC_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _fE_=i + 1 | 0;
            if(_fD_ !== i){var i=_fE_;continue}
            break}}
        return set_data$1(c,d)}
      function check_key(c)
       {var i$1=length$9(c) - 1 | 0,i=i$1;
        for(;;)
         {var _fz_=i < 0?1:0;
          if(_fz_)
           var _fA_=_fz_;
          else
           {var _fB_=check_key$1(c,i);
            if(_fB_){var i$0=i - 1 | 0,i=i$0;continue}
            var _fA_=_fB_}
          return _fA_}}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$3,get_key,set_key_data,check_key])}
    function Make$4(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$3([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _fy_=include[1];
      function create(sz){return caml_call2(_fy_,_cU_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function make$9(param){return [0,0]}
    function add$3(b,k,d){var _fx_=b[1];b[1] = [0,make$8(k,d),_fx_];return 0}
    function test_keys$0(k,e)
     {try
       {if(length$9(e) !== k.length - 1)throw Exit;
        var _ft_=k.length - 1 - 1 | 0,_fs_=0;
        if(! (_ft_ < 0))
         {var i=_fs_;
          for(;;)
           {var match=get_key$1(e,i),switch$0=0;
            if(match)
             {var x=match[1];
              if(x === caml_check_bound(k,i)[1 + i])
               {var _fv_=i + 1 | 0;
                if(_ft_ !== i){var i=_fv_;continue}
                switch$0 = 1}}
            if(! switch$0)throw Exit;
            break}}
        var _fu_=1;
        return _fu_}
      catch(_fw_)
       {_fw_ = caml_wrap_exception(_fw_);if(_fw_ === Exit)return 0;throw _fw_}}
    function remove$2(b,k)
     {var l=b[1],acc=0;
      for(;;)
       {if(l)
         {var h=l[1],t=l[2];
          if(test_keys$0(k,h)){b[1] = rev_append(acc,t);return 0}
          var l$0=l[2],acc$0=[0,h,acc],l=l$0,acc=acc$0;
          continue}
        return 0}}
    function find$4(b,k)
     {var
       _fq_=b[1],
       match=find_opt(function(_fr_){return test_keys$0(k,_fr_)},_fq_);
      if(match){var e=match[1];return get_data$3(e)}
      return 0}
    function length$10(b){return length$1(b[1])}
    function clear$5(b){b[1] = 0;return 0}
    var
     Stdlib_Ephemeron=
      [0,
       [0,
        create$5,
        get_key$0,
        get_key_copy$0,
        set_key$0,
        unset_key$0,
        check_key$0,
        blit_key$0,
        get_data$1,
        get_data_copy,
        set_data,
        unset_data,
        check_data,
        blit_data,
        make$4,
        query,
        Make$2,
        MakeSeeded$1,
        [0,make$5,add$1,remove$0,find$2,length$7,clear$3]],
       [0,
        create$6,
        get_key1,
        get_key1_copy,
        set_key1,
        unset_key1,
        check_key1,
        get_key2,
        get_key2_copy,
        set_key2,
        unset_key2,
        check_key2,
        blit_key1,
        blit_key2,
        blit_key12,
        get_data$2,
        get_data_copy$0,
        set_data$0,
        unset_data$0,
        check_data$0,
        blit_data$0,
        make$6,
        query$0,
        Make$3,
        MakeSeeded$2,
        [0,make$7,add$2,remove$1,find$3,length$8,clear$4]],
       [0,
        create$7,
        get_key$1,
        get_key_copy$1,
        set_key$1,
        unset_key$1,
        check_key$1,
        blit_key$1,
        get_data$3,
        get_data_copy$1,
        set_data$1,
        unset_data$1,
        check_data$1,
        blit_data$1,
        make$8,
        query$1,
        Make$4,
        MakeSeeded$3,
        [0,make$9,add$3,remove$2,find$4,length$10,clear$5]],
       [0,
        function(_fp_)
         {return MakeSeeded$0
                  ([0,_fp_[3],_fp_[1],_fp_[2],_fp_[5],_fp_[4],_fp_[6],_fp_[7]])}]];
    caml_register_global(825,Stdlib_Ephemeron,"Stdlib__Ephemeron");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$100))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return sub$0(name,0,p)}}
        return sub$0(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$101))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return sub$0(name,0,n$3 + 1 | 0)}
                  return sub$0(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return sub$0(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _fn_=caml_ml_string_length(n) < 1?1:0,
       _fo_=_fn_ || (47 !== caml_string_get(n,0)?1:0);
      return _fo_}
    function is_implicit(n)
     {var _fi_=is_relative(n);
      if(_fi_)
       {var
         _fj_=caml_ml_string_length(n) < 2?1:0,
         _fk_=_fj_ || caml_string_notequal(sub$0(n,0,2),cst$103);
        if(_fk_)
         var
          _fl_=caml_ml_string_length(n) < 3?1:0,
          _fm_=_fl_ || caml_string_notequal(sub$0(n,0,3),cst$102);
        else
         var _fm_=_fk_}
      else
       var _fm_=_fi_;
      return _fm_}
    function check_suffix(name,suff){return ends_with$0(suff,name)}
    function chop_suffix_opt(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var r=sub$0(filename,len_f - len_s | 0,len_s);
        return caml_string_equal(r,suffix)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _c3_=caml_sys_getenv(cst_TMPDIR),_cV_=_c3_}
    catch(_fh_)
     {_fh_ = caml_wrap_exception(_fh_);
      if(_fh_ !== Not_found)throw _fh_;
      var _cV_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,39);
      var _ff_=l - 1 | 0,_fe_=0;
      if(! (_ff_ < 0))
       {var i=_fe_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _fg_=i + 1 | 0;
          if(_ff_ !== i){var i=_fg_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function quote_command(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _e__=caml_equal(stderr,stdout)?cst_2_1:cat(cst_2,quote(f)),
        _e$_=_e__;
      else
       var _e$_=cst$109;
      if(stdout)
       var f$0=stdout[1],_fa_=cat(cst$104,quote(f$0));
      else
       var _fa_=cst$108;
      var _fb_=cat(_fa_,_e$_);
      if(stdin)
       var f$1=stdin[1],_fc_=cat(cst$105,quote(f$1));
      else
       var _fc_=cst$107;
      var _fd_=cat(_fc_,_fb_);
      return cat(concat$1(cst$106,map$4(quote,[0,cmd,args])),_fd_)}
    function basename(_e9_)
     {return generic_basename(is_dir_sep,current_dir_name,_e9_)}
    function dirname(_e8_)
     {return generic_dirname(is_dir_sep,current_dir_name,_e8_)}
    var
     Unix=
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       _cV_,
       quote,
       quote_command,
       basename,
       dirname];
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_e5_=47 === c?1:0;
      if(_e5_)
       var _e6_=_e5_;
      else
       var _e7_=92 === c?1:0,_e6_=_e7_ || (58 === c?1:0);
      return _e6_}
    function is_relative$0(n)
     {var
       _eZ_=caml_ml_string_length(n) < 1?1:0,
       _e0_=_eZ_ || (47 !== caml_string_get(n,0)?1:0);
      if(_e0_)
       {var
         _e1_=caml_ml_string_length(n) < 1?1:0,
         _e2_=_e1_ || (92 !== caml_string_get(n,0)?1:0);
        if(_e2_)
         var
          _e3_=caml_ml_string_length(n) < 2?1:0,
          _e4_=_e3_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _e4_=_e2_}
      else
       var _e4_=_e0_;
      return _e4_}
    function is_implicit$0(n)
     {var _eQ_=is_relative$0(n);
      if(_eQ_)
       {var
         _eR_=caml_ml_string_length(n) < 2?1:0,
         _eS_=_eR_ || caml_string_notequal(sub$0(n,0,2),cst$113);
        if(_eS_)
         {var
           _eT_=caml_ml_string_length(n) < 2?1:0,
           _eU_=_eT_ || caml_string_notequal(sub$0(n,0,2),cst$112);
          if(_eU_)
           {var
             _eV_=caml_ml_string_length(n) < 3?1:0,
             _eW_=_eV_ || caml_string_notequal(sub$0(n,0,3),cst$111);
            if(_eW_)
             var
              _eX_=caml_ml_string_length(n) < 3?1:0,
              _eY_=_eX_ || caml_string_notequal(sub$0(n,0,3),cst$110);
            else
             var _eY_=_eW_}
          else
           var _eY_=_eU_}
        else
         var _eY_=_eS_}
      else
       var _eY_=_eQ_;
      return _eY_}
    function check_suffix$0(name,suff)
     {var _eN_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_eN_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _eO_=lowercase_ascii$1(suff),
        _eP_=caml_string_equal(lowercase_ascii$1(s),_eO_);
      else
       var _eP_=_eN_;
      return _eP_}
    function chop_suffix_opt$0(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var
         r=sub$0(filename,len_f - len_s | 0,len_s),
         _eM_=lowercase_ascii$1(suffix);
        return caml_string_equal(lowercase_ascii$1(r),_eM_)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _c2_=caml_sys_getenv(cst_TEMP),temp_dir_name=_c2_}
    catch(_eL_)
     {_eL_ = caml_wrap_exception(_eL_);
      if(_eL_ !== Not_found)throw _eL_;
      var temp_dir_name=cst$114}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _eJ_=1;
        if(! (n < 1))
         {var j=_eJ_;
          for(;;)
           {add_char(b,92);
            var _eK_=j + 1 | 0;
            if(n !== j){var j=_eK_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _eH_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_eH_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_eH_,i$0])}
          if(92 === c)
           {var _eI_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_eI_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_eI_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _eG_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_eG_)}
            return caml_trampoline_return(loop$0,[0,_eG_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function quote_cmd_filename(f)
     {if(! contains$0(f,34) && ! contains$0(f,37))
       return contains$0(f,32)?cat(cst$116,cat(f,cst$115)):f;
      return failwith(cat(cst_Filename_quote_command_bad,f))}
    function quote_command$0(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _ex_=
         caml_equal(stderr,stdout)
          ?cst_2_1$0
          :cat(cst_2$0,quote_cmd_filename(f)),
        _ey_=_ex_;
      else
       var _ey_=cst$125;
      var _ez_=[0,_ey_,_cW_];
      if(stdout)
       var f$0=stdout[1],_eA_=cat(cst$117,quote_cmd_filename(f$0));
      else
       var _eA_=cst$124;
      var _eB_=[0,_eA_,_ez_];
      if(stdin)
       var f$1=stdin[1],_eC_=cat(cst$118,quote_cmd_filename(f$1));
      else
       var _eC_=cst$123;
      var
       s=concat$1(cst$119,map$4(quote$0,args)),
       b=create$2(caml_ml_string_length(s) + 20 | 0),
       _eD_=[0,_eC_,_eB_];
      iter$4
       (function(c)
         {var switch$0=0;
          if(62 <= c)
           {var _eF_=c - 63 | 0;
            if(60 < _eF_ >>> 0)
             {if(! (62 <= _eF_))switch$0 = 1}
            else
             if(31 === _eF_)switch$0 = 1}
          else
           if(42 <= c)
            {if(60 === c)switch$0 = 1}
           else
            if(33 <= c)
             switch(c - 33 | 0)
              {case 2:case 3:case 6:break;default:switch$0 = 1}
          return switch$0?(add_char(b,94),add_char(b,c)):add_char(b,c)},
        s);
      var _eE_=[0,cst$120,[0,contents(b),_eD_]];
      return concat$1(cst$122,[0,cst$121,[0,quote_cmd_filename(cmd),_eE_]])}
    function drive_and_path(s)
     {var _et_=2 <= caml_ml_string_length(s)?1:0;
      if(_et_)
       {var param=caml_string_get(s,0),switch$0=0;
        if(91 <= param)
         {if(! (25 < param - 97 >>> 0))switch$0 = 1}
        else
         if(65 <= param)switch$0 = 1;
        var _eu_=switch$0?1:0,_ev_=_eu_?58 === caml_string_get(s,1)?1:0:_eu_}
      else
       var _ev_=_et_;
      if(_ev_)
       {var _ew_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,sub$0(s,0,2),_ew_]}
      return [0,cst$126,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return cat(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    var
     Win32=
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
    function basename$1(_es_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_es_)}
    function dirname$1(_er_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_er_)}
    var
     Cygwin=
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       _cV_,
       quote,
       quote_command,
       basename$1,
       dirname$1],
     Sysdeps=
      caml_string_notequal(os_type,cst_Cygwin)
       ?caml_string_notequal(os_type,cst_Win32)?Unix:Win32
       :Cygwin,
     null$3=Sysdeps[1],
     current_dir_name$2=Sysdeps[2],
     parent_dir_name$2=Sysdeps[3],
     dir_sep$2=Sysdeps[4],
     is_dir_sep$1=Sysdeps[5],
     is_relative$1=Sysdeps[6],
     is_implicit$1=Sysdeps[7],
     check_suffix$1=Sysdeps[8],
     chop_suffix_opt$1=Sysdeps[9],
     temp_dir_name$0=Sysdeps[10],
     quote$1=Sysdeps[11],
     quote_command$1=Sysdeps[12],
     basename$2=Sysdeps[13],
     dirname$2=Sysdeps[14];
    function concat$4(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l && ! is_dir_sep$1(dirname,l - 1 | 0))
       return cat(dirname,cat(dir_sep$2,filename));
      return cat(dirname,filename)}
    function chop_suffix(name,suff)
     {return check_suffix$1(name,suff)
              ?sub$0
                (name,
                 0,
                 caml_ml_string_length(name) - caml_ml_string_length(suff) | 0)
              :invalid_arg(cst_Filename_chop_suffix)}
    function extension_len(name)
     {var i$4=caml_ml_string_length(name) - 1 | 0,i$1=i$4;
      for(;;)
       {if(0 <= i$1 && ! is_dir_sep$1(name,i$1))
         {if(46 === caml_string_get(name,i$1))
           {var i$2=i$1 - 1 | 0,i=i$2;
            for(;;)
             {if(0 <= i && ! is_dir_sep$1(name,i))
               {if(46 === caml_string_get(name,i))
                 {var i$0=i - 1 | 0,i=i$0;continue}
                return caml_ml_string_length(name) - i$1 | 0}
              return 0}}
          var i$3=i$1 - 1 | 0,i$1=i$3;
          continue}
        return 0}}
    function extension(name)
     {var l=extension_len(name);
      return 0 === l?cst$127:sub$0(name,caml_ml_string_length(name) - l | 0,l)}
    function chop_extension(name)
     {var l=extension_len(name);
      return 0 === l
              ?invalid_arg(cst_Filename_chop_extension)
              :sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    function remove_extension(name)
     {var l=extension_len(name);
      return 0 === l?name:sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    var prng$0=[246,function(_eq_){return caml_call1(_ci_[2],0)}];
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       _eo_=caml_obj_tag(prng$0),
       _ep_=
        250 === _eo_?prng$0[1]:246 === _eo_?force_lazy_block(prng$0):prng$0,
       rnd=caml_call1(_ci_[4],_ep_) & 16777215;
      return concat$4(temp_dir,caml_call3(sprintf(_cX_),prefix,rnd,suffix))}
    var current_temp_dir_name=[0,temp_dir_name$0];
    function set_temp_dir_name(s){current_temp_dir_name[1] = s;return 0}
    function get_temp_dir_name(param){return current_temp_dir_name[1]}
    function temp_file(opt,prefix,suffix)
     {if(opt)
       var sth=opt[1],temp_dir=sth;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_cY_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    function open_temp_file(opt,_em_,_el_,prefix,suffix)
     {if(opt)var sth=opt[1],mode=sth;else var mode=_cZ_;
      if(_em_)var sth$0=_em_[1],perms=sth$0;else var perms=384;
      if(_el_)
       var sth$1=_el_[1],temp_dir=sth$1;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {var _en_=[0,name,open_gen([0,1,[0,3,[0,5,mode]]],perms,name)];
            return _en_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    var
     Stdlib_Filename=
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat$4,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       null$3,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       temp_dir_name$0,
       quote$1,
       quote_command$1];
    caml_register_global(826,Stdlib_Filename,"Stdlib__Filename");
    function add$4(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function sub$4(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function neg(x){return [254,- x[1],- x[2]]}
    function conj(x){return [254,x[1],- x[2]]}
    function mul(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function div(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function inv(x){return div(one$4,x)}
    function norm2(x){return x[1] * x[1] + x[2] * x[2]}
    function norm(x)
     {var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(r == 0.)return i;
      if(i == 0.)return r;
      if(i <= r){var q=i / r;return r * Math.sqrt(1. + q * q)}
      var q$0=r / i;
      return i * Math.sqrt(1. + q$0 * q$0)}
    function arg(x){return Math.atan2(x[2],x[1])}
    function polar(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function sqrt(x)
     {if(x[1] == 0. && x[2] == 0.)return _c0_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1. + Math.sqrt(1. + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1. + q$0 * q$0)));
      if(0. <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0. <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function exp(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function log(x)
     {var _ek_=Math.atan2(x[2],x[1]);return [254,Math.log(norm(x)),_ek_]}
    function pow(x,y){return exp(mul(y,log(x)))}
    var
     Stdlib_Complex=
      [0,
       zero$4,
       one$4,
       i,
       neg,
       conj,
       add$4,
       sub$4,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
    caml_register_global(827,Stdlib_Complex,"Stdlib__Complex");
    var
     Stdlib_ArrayLabels=
      [0,
       make_float,
       init$3,
       create_matrix,
       create_matrix,
       append$1,
       concat$2,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$3,
       map$7,
       mapi$3,
       fold_left$3,
       fold_left_map$0,
       fold_right$2,
       iter2$1,
       map2$1,
       for_all$3,
       exists$3,
       for_all2$1,
       exists2$1,
       mem$0,
       memq$0,
       find_opt$0,
       find_map$1,
       split$0,
       combine$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(828,Stdlib_ArrayLabels,"Stdlib__ArrayLabels");
    var
     Stdlib_ListLabels=
      [0,
       length$1,
       compare_lengths,
       compare_length_with,
       cons$0,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init$0,
       append,
       rev_append,
       flatten,
       flatten,
       equal$6,
       compare$6,
       iter$2,
       iteri$0,
       map$4,
       mapi$0,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left_map,
       fold_left$0,
       fold_right,
       iter2$0,
       map2$0,
       rev_map2,
       fold_left2$0,
       fold_right2,
       for_all$0,
       exists$0,
       for_all2$0,
       exists2$0,
       mem,
       memq,
       find$0,
       find_opt,
       find_map$0,
       find_all,
       find_all,
       filteri,
       partition$0,
       partition_map$0,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(829,Stdlib_ListLabels,"Stdlib__ListLabels");
    var
     Stdlib_BytesLabels=
      [0,
       make$0,
       init$1,
       empty$0,
       copy,
       to_bytes,
       of_bytes,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat$0,
       cat$0,
       iter$3,
       iteri$1,
       map$5,
       mapi$1,
       fold_left$1,
       fold_right$0,
       for_all$1,
       exists$1,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$8,
       equal$8,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le];
    caml_register_global(830,Stdlib_BytesLabels,"Stdlib__BytesLabels");
    var
     Stdlib_StringLabels=
      [0,
       make$1,
       init$2,
       empty$1,
       of_bytes,
       to_bytes,
       concat$1,
       cat,
       equal$9,
       compare$9,
       starts_with$0,
       ends_with$0,
       contains_from$0,
       rcontains_from$0,
       contains$0,
       sub$0,
       split_on_char$0,
       map$6,
       mapi$2,
       fold_left$2,
       fold_right$1,
       for_all$2,
       exists$2,
       trim$0,
       escaped$1,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       iter$4,
       iteri$2,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       to_seq$3,
       to_seqi$0,
       of_seq$1,
       get_utf_8_uchar$0,
       is_valid_utf_8$0,
       get_utf_16be_uchar$0,
       is_valid_utf_16be$0,
       get_utf_16le_uchar$0,
       is_valid_utf_16le$0,
       blit$0,
       copy$0,
       fill,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       get_uint8$0,
       get_int8$0,
       get_uint16_ne$0,
       get_uint16_be$0,
       get_uint16_le$0,
       get_int16_ne$0,
       get_int16_be$0,
       get_int16_le$0,
       get_int32_ne$0,
       get_int32_be$0,
       get_int32_le$0,
       get_int64_ne$0,
       get_int64_be$0,
       get_int64_le$0];
    caml_register_global(831,Stdlib_StringLabels,"Stdlib__StringLabels");
    var Stdlib_MoreLabels=[0,Stdlib_Hashtbl,Stdlib_Map,Stdlib_Set];
    caml_register_global(832,Stdlib_MoreLabels,"Stdlib__MoreLabels");
    var Stdlib_StdLabels=[0];
    caml_register_global(833,Stdlib_StdLabels,"Stdlib__StdLabels");
    var
     float32=0,
     float64=1,
     int8_signed=2,
     int8_unsigned=3,
     int16_signed=4,
     int16_unsigned=5,
     int32$1=6,
     int64$1=7,
     int$2=8,
     nativeint$1=9,
     complex32=10,
     complex64=11,
     char$0=12;
    function kind_size_in_bytes(param)
     {switch(param)
       {case 0:return 4;
        case 1:return 8;
        case 2:return 1;
        case 3:return 1;
        case 4:return 2;
        case 5:return 2;
        case 6:return 4;
        case 7:return 8;
        case 8:return 4;
        case 9:return 4;
        case 10:return 8;
        case 11:return 16;
        default:return 1}}
    var c_layout=0,fortran_layout=1;
    function cloop(arr,idx,f,col,max)
     {if(col === idx.length - 1)
       return caml_ba_set_generic(arr,idx,caml_call1(f,idx));
      var _ei_=caml_check_bound(max,col)[1 + col] - 1 | 0,_eh_=0;
      if(! (_ei_ < 0))
       {var j=_eh_;
        for(;;)
         {caml_check_bound(idx,col)[1 + col] = j;
          cloop(arr,idx,f,col + 1 | 0,max);
          var _ej_=j + 1 | 0;
          if(_ei_ !== j){var j=_ej_;continue}
          break}}
      return 0}
    function floop(arr,idx,f,col,max)
     {if(0 <= col)
       {var _ef_=caml_check_bound(max,col)[1 + col],_ee_=1;
        if(! (_ef_ < 1))
         {var j=_ee_;
          for(;;)
           {caml_check_bound(idx,col)[1 + col] = j;
            floop(arr,idx,f,col - 1 | 0,max);
            var _eg_=j + 1 | 0;
            if(_ef_ !== j){var j=_eg_;continue}
            break}}
        return 0}
      return caml_ba_set_generic(arr,idx,caml_call1(f,idx))}
    function init$6(kind,layout,dims,f)
     {var arr=caml_ba_create(kind,layout,dims),dlen=dims.length - 1;
      return 0 === dlen
              ?arr
              :layout
                ?(floop(arr,caml_make_vect(dlen,1),f,dlen - 1 | 0,dims),arr)
                :(cloop(arr,caml_make_vect(dlen,0),f,0,dims),arr)}
    function dims(a)
     {var n=caml_ba_num_dims(a),d=caml_make_vect(n,0),_eb_=n - 1 | 0,_ea_=0;
      if(! (_eb_ < 0))
       {var i=_ea_;
        for(;;)
         {var _ec_=runtime.caml_ba_dim(a,i);
          caml_check_bound(d,i)[1 + i] = _ec_;
          var _ed_=i + 1 | 0;
          if(_eb_ !== i){var i=_ed_;continue}
          break}}
      return d}
    function size_in_bytes(arr)
     {var _d$_=fold_left$3(caml_mul,1,dims(arr));
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_d$_)}
    function create$8(kind,layout){return caml_ba_create(kind,layout,[0])}
    function get$3(arr){return runtime.caml_ba_get_generic(arr,[0])}
    function set$2(arr)
     {var _d9_=[0];
      return function(_d__){return caml_ba_set_generic(arr,_d9_,_d__)}}
    function size_in_bytes$0(arr)
     {return kind_size_in_bytes(caml_ba_kind(arr))}
    function of_value(kind,layout,v)
     {var a=create$8(kind,layout);caml_call1(set$2(a),v);return a}
    function create$9(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function size_in_bytes$1(arr)
     {var _d8_=caml_ba_dim_1(arr);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_d8_)}
    function slice(a,n)
     {var match=runtime.caml_ba_layout(a);
      return match?caml_ba_slice(a,[0,n]):caml_ba_slice(a,[0,n])}
    function init$7(kind,layout,dim,f)
     {var arr=create$9(kind,layout,dim);
      if(layout)
       {var _d6_=1;
        if(! (dim < 1))
         {var i$0=_d6_;
          for(;;)
           {caml_ba_set_1(arr,i$0,caml_call1(f,i$0));
            var _d7_=i$0 + 1 | 0;
            if(dim !== i$0){var i$0=_d7_;continue}
            break}}
        return arr}
      var _d4_=dim - 1 | 0,_d3_=0;
      if(! (_d4_ < 0))
       {var i=_d3_;
        for(;;)
         {caml_ba_set_1(arr,i,caml_call1(f,i));
          var _d5_=i + 1 | 0;
          if(_d4_ !== i){var i=_d5_;continue}
          break}}
      return arr}
    function of_array(kind,layout,data)
     {var
       ba=create$9(kind,layout,data.length - 1),
       ofs=layout?1:0,
       _d1_=data.length - 1 - 1 | 0,
       _d0_=0;
      if(! (_d1_ < 0))
       {var i=_d0_;
        for(;;)
         {caml_ba_set_1(ba,i + ofs | 0,caml_check_bound(data,i)[1 + i]);
          var _d2_=i + 1 | 0;
          if(_d1_ !== i){var i=_d2_;continue}
          break}}
      return ba}
    function create$10(kind,layout,dim1,dim2)
     {return caml_ba_create(kind,layout,[0,dim1,dim2])}
    function size_in_bytes$2(arr)
     {var _dY_=caml_ba_dim_2(arr),_dZ_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_dZ_),_dY_)}
    function slice_left(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right(a,n){return caml_ba_slice(a,[0,n])}
    function init$8(kind,layout,dim1,dim2,f)
     {var arr=create$10(kind,layout,dim1,dim2);
      if(layout)
       {var _dU_=1;
        if(! (dim2 < 1))
         {var j$0=_dU_;
          for(;;)
           {var _dV_=1;
            if(! (dim1 < 1))
             {var i$0=_dV_;
              for(;;)
               {caml_ba_set_2(arr,i$0,j$0,caml_call2(f,i$0,j$0));
                var _dX_=i$0 + 1 | 0;
                if(dim1 !== i$0){var i$0=_dX_;continue}
                break}}
            var _dW_=j$0 + 1 | 0;
            if(dim2 !== j$0){var j$0=_dW_;continue}
            break}}
        return arr}
      var _dP_=dim1 - 1 | 0,_dO_=0;
      if(! (_dP_ < 0))
       {var i=_dO_;
        for(;;)
         {var _dR_=dim2 - 1 | 0,_dQ_=0;
          if(! (_dR_ < 0))
           {var j=_dQ_;
            for(;;)
             {caml_ba_set_2(arr,i,j,caml_call2(f,i,j));
              var _dT_=j + 1 | 0;
              if(_dR_ !== j){var j=_dT_;continue}
              break}}
          var _dS_=i + 1 | 0;
          if(_dP_ !== i){var i=_dS_;continue}
          break}}
      return arr}
    function of_array$0(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       ba=create$10(kind,layout,dim1,dim2),
       ofs=layout?1:0,
       _dJ_=dim1 - 1 | 0,
       _dI_=0;
      if(! (_dJ_ < 0))
       {var i=_dI_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array2_of_array_n);
          var _dL_=dim2 - 1 | 0,_dK_=0;
          if(! (_dL_ < 0))
           {var j=_dK_;
            for(;;)
             {caml_ba_set_2
               (ba,i + ofs | 0,j + ofs | 0,caml_check_bound(row,j)[1 + j]);
              var _dN_=j + 1 | 0;
              if(_dL_ !== j){var j=_dN_;continue}
              break}}
          var _dM_=i + 1 | 0;
          if(_dJ_ !== i){var i=_dM_;continue}
          break}}
      return ba}
    function create$11(kind,layout,dim1,dim2,dim3)
     {return caml_ba_create(kind,layout,[0,dim1,dim2,dim3])}
    function size_in_bytes$3(arr)
     {var
       _dF_=runtime.caml_ba_dim_3(arr),
       _dG_=caml_ba_dim_2(arr),
       _dH_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul
                (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_dH_),_dG_),
               _dF_)}
    function slice_left_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_right_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_left_2(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right_2(a,n){return caml_ba_slice(a,[0,n])}
    function init$9(kind,layout,dim1,dim2,dim3,f)
     {var arr=create$11(kind,layout,dim1,dim2,dim3);
      if(layout)
       {var _dz_=1;
        if(! (dim3 < 1))
         {var k$0=_dz_;
          for(;;)
           {var _dA_=1;
            if(! (dim2 < 1))
             {var j$0=_dA_;
              for(;;)
               {var _dC_=1;
                if(! (dim1 < 1))
                 {var i$0=_dC_;
                  for(;;)
                   {caml_ba_set_3(arr,i$0,j$0,k$0,caml_call3(f,i$0,j$0,k$0));
                    var _dE_=i$0 + 1 | 0;
                    if(dim1 !== i$0){var i$0=_dE_;continue}
                    break}}
                var _dD_=j$0 + 1 | 0;
                if(dim2 !== j$0){var j$0=_dD_;continue}
                break}}
            var _dB_=k$0 + 1 | 0;
            if(dim3 !== k$0){var k$0=_dB_;continue}
            break}}
        return arr}
      var _dr_=dim1 - 1 | 0,_dq_=0;
      if(! (_dr_ < 0))
       {var i=_dq_;
        for(;;)
         {var _dt_=dim2 - 1 | 0,_ds_=0;
          if(! (_dt_ < 0))
           {var j=_ds_;
            for(;;)
             {var _dw_=dim3 - 1 | 0,_dv_=0;
              if(! (_dw_ < 0))
               {var k=_dv_;
                for(;;)
                 {caml_ba_set_3(arr,i,j,k,caml_call3(f,i,j,k));
                  var _dy_=k + 1 | 0;
                  if(_dw_ !== k){var k=_dy_;continue}
                  break}}
              var _dx_=j + 1 | 0;
              if(_dt_ !== j){var j=_dx_;continue}
              break}}
          var _du_=i + 1 | 0;
          if(_dr_ !== i){var i=_du_;continue}
          break}}
      return arr}
    function of_array$1(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       dim3=
        0 === dim2
         ?0
         :caml_check_bound(caml_check_bound(data,0)[1],0)[1].length - 1,
       ba=create$11(kind,layout,dim1,dim2,dim3),
       ofs=layout?1:0,
       _di_=dim1 - 1 | 0,
       _dh_=0;
      if(! (_di_ < 0))
       {var i=_dh_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array3_of_array_n);
          var _dk_=dim2 - 1 | 0,_dj_=0;
          if(! (_dk_ < 0))
           {var j=_dj_;
            for(;;)
             {var col=caml_check_bound(row,j)[1 + j];
              if(col.length - 1 !== dim3)
               invalid_arg(cst_Bigarray_Array3_of_array_n$0);
              var _dn_=dim3 - 1 | 0,_dm_=0;
              if(! (_dn_ < 0))
               {var k=_dm_;
                for(;;)
                 {caml_ba_set_3
                   (ba,
                    i + ofs | 0,
                    j + ofs | 0,
                    k + ofs | 0,
                    caml_check_bound(col,k)[1 + k]);
                  var _dp_=k + 1 | 0;
                  if(_dn_ !== k){var k=_dp_;continue}
                  break}}
              var _do_=j + 1 | 0;
              if(_dk_ !== j){var j=_do_;continue}
              break}}
          var _dl_=i + 1 | 0;
          if(_di_ !== i){var i=_dl_;continue}
          break}}
      return ba}
    function array0_of_genarray(a)
     {return 0 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array0_of_genarra)}
    function array1_of_genarray(a)
     {return 1 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array1_of_genarra)}
    function array2_of_genarray(a)
     {return 2 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array2_of_genarra)}
    function array3_of_genarray(a)
     {return 3 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array3_of_genarra)}
    function reshape_0(a){return caml_ba_reshape(a,[0])}
    function reshape_1(a,dim1){return caml_ba_reshape(a,[0,dim1])}
    function reshape_2(a,dim1,dim2){return caml_ba_reshape(a,[0,dim1,dim2])}
    function reshape_3(a,dim1,dim2,dim3)
     {return caml_ba_reshape(a,[0,dim1,dim2,dim3])}
    var
     Stdlib_Bigarray=
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$2,
       int32$1,
       int64$1,
       nativeint$1,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       [0,init$6,dims,size_in_bytes],
       [0,
        create$8,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get$3,
        set$2,
        of_value],
       [0,
        create$9,
        init$7,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$10,
        init$8,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$11,
        init$9,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
    caml_register_global(834,Stdlib_Bigarray,"Stdlib__Bigarray");
    function with_open(openfun,s,f)
     {var ic=caml_call1(openfun,s);
      function _dg_(param){return caml_call1(f,ic)}
      return protect(function(param){return close_noerr$0(ic)},_dg_)}
    function with_open_bin(s,f){return with_open(open_bin$0,s,f)}
    function with_open_text(s,f){return with_open(open_text$0,s,f)}
    function with_open_gen(flags,perm,s,f)
     {return with_open(function(_df_){return open_gen$0(flags,perm,_df_)},s,f)}
    var seek=_m_[4],pos=_m_[5],length$11=_m_[6];
    function input_char$0(ic)
     {try
       {var c=caml_ml_input_char(ic)}
      catch(_de_)
       {_de_ = caml_wrap_exception(_de_);
        if(_de_ === End_of_file)return 0;
        throw _de_}
      return [0,c]}
    function input_byte$0(ic)
     {try
       {var n=caml_ml_input_char(ic)}
      catch(_dd_)
       {_dd_ = caml_wrap_exception(_dd_);
        if(_dd_ === End_of_file)return 0;
        throw _dd_}
      return [0,n]}
    function input_line$0(ic)
     {try
       {var s=input_line(ic)}
      catch(_dc_)
       {_dc_ = caml_wrap_exception(_dc_);
        if(_dc_ === End_of_file)return 0;
        throw _dc_}
      return [0,s]}
    function really_input$0(ic,buf,pos,len)
     {try
       {really_input(ic,buf,pos,len);return _c1_}
      catch(_db_)
       {_db_ = caml_wrap_exception(_db_);
        if(_db_ === End_of_file)return 0;
        throw _db_}}
    function really_input_string$0(ic,len)
     {try
       {var s=really_input_string(ic,len)}
      catch(_da_)
       {_da_ = caml_wrap_exception(_da_);
        if(_da_ === End_of_file)return 0;
        throw _da_}
      return [0,s]}
    function read_upto(ic,buf,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 !== len$0)
         {var r=input(ic,buf,ofs$0,len$0);
          if(0 !== r)
           {var
             len$1=len$0 - r | 0,
             ofs$1=ofs$0 + r | 0,
             ofs$0=ofs$1,
             len$0=len$1;
            continue}}
        return ofs$0 - ofs | 0}}
    function ensure(buf,ofs,n)
     {var len=caml_ml_bytes_length(buf);
      if((ofs + n | 0) <= len)return buf;
      var new_len=[0,len];
      for(;;)
       {if(new_len[1] < (ofs + n | 0))
         {new_len[1] = (2 * new_len[1] | 0) + 1 | 0;continue}
        var
         new_len$0=new_len[1],
         new_len$1=
          new_len$0 <= max_string_length
           ?new_len$0
           :ofs < max_string_length
             ?max_string_length
             :failwith(cst_In_channel_input_all_chann),
         new_buf=caml_create_bytes(new_len$1);
        blit(buf,0,new_buf,0,ofs);
        return new_buf}}
    function input_all(ic)
     {var chunk_size=65536;
      try
       {var
         _c8_=caml_ml_pos_in(ic),
         _c9_=caml_ml_channel_size(ic) - _c8_ | 0,
         initial_size=_c9_}
      catch(_c$_)
       {_c$_ = caml_wrap_exception(_c$_);
        if(_c$_[1] !== Sys_error)throw _c$_;
        var initial_size=-1}
      var
       initial_size$0=0 <= initial_size?initial_size:chunk_size,
       initial_size$1=
        initial_size$0 <= max_string_length?initial_size$0:max_string_length,
       buf=caml_create_bytes(initial_size$1),
       nread=read_upto(ic,buf,0,initial_size$1);
      if(nread < initial_size$1)return sub_string(buf,0,nread);
      try
       {var c=caml_ml_input_char(ic)}
      catch(_c__)
       {_c__ = caml_wrap_exception(_c__);
        if(_c__ === End_of_file)return caml_string_of_bytes(buf);
        throw _c__}
      function loop(buf,ofs)
       {var buf$0=buf,ofs$0=ofs;
        for(;;)
         {var
           buf$1=ensure(buf$0,ofs$0,chunk_size),
           rem=caml_ml_bytes_length(buf$1) - ofs$0 | 0,
           r=read_upto(ic,buf$1,ofs$0,rem);
          if(r < rem)return sub_string(buf$1,0,ofs$0 + r | 0);
          var ofs$1=ofs$0 + rem | 0,buf$0=buf$1,ofs$0=ofs$1;
          continue}}
      var buf$0=ensure(buf,nread,65537);
      caml_bytes_set(buf$0,nread,c);
      return loop(buf$0,nread + 1 | 0)}
    var
     Stdlib_In_channel=
      [0,
       stdin,
       open_bin$0,
       open_text$0,
       open_gen$0,
       with_open_bin,
       with_open_text,
       with_open_gen,
       seek,
       pos,
       length$11,
       close$0,
       close_noerr$0,
       input_char$0,
       input_byte$0,
       input_line$0,
       input,
       really_input$0,
       really_input_string$0,
       input_all,
       set_binary_mode];
    caml_register_global(835,Stdlib_In_channel,"Stdlib__In_channel");
    function with_open$0(openfun,s,f)
     {var oc=caml_call1(openfun,s);
      function _c7_(param){return caml_call1(f,oc)}
      return protect(function(param){return close_noerr(oc)},_c7_)}
    function with_open_bin$0(s,f){return with_open$0(open_bin,s,f)}
    function with_open_text$0(s,f){return with_open$0(open_text,s,f)}
    function with_open_gen$0(flags,perm,s,f)
     {return with_open$0(function(_c6_){return open_gen(flags,perm,_c6_)},s,f)}
    var
     seek$0=_m_[1],
     pos$0=_m_[2],
     length$12=_m_[3],
     Stdlib_Out_channel=
      [0,
       stdout,
       stderr,
       open_bin,
       open_text,
       open_gen,
       with_open_bin$0,
       with_open_text$0,
       with_open_gen$0,
       seek$0,
       pos$0,
       length$12,
       close,
       close_noerr,
       flush,
       flush_all,
       output_char,
       output_byte,
       output_string,
       output_bytes,
       output,
       output_substring,
       set_binary_mode$0,
       runtime.caml_ml_set_buffered,
       runtime.caml_ml_is_buffered];
    caml_register_global(836,Stdlib_Out_channel,"Stdlib__Out_channel");
    return}
  (globalThis));


//# 1 "../../src/.alg.objs/alg.cma.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_compare=runtime.caml_int_compare,
     caml_make_vect=runtime.caml_make_vect,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mul=runtime.caml_mul,
     caml_register_global=runtime.caml_register_global,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    function caml_call12(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
     {return f.length == 12
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11])}
    function caml_call14(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
     {return f.length == 14
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13])}
    function caml_call16
     (f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)
     {return f.length == 16
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15])}
    function caml_call22
     (f,
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21)
     {return f.length == 22
              ?f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17,
                 a18,
                 a19,
                 a20,
                 a21)
              :runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16,
                  a17,
                  a18,
                  a19,
                  a20,
                  a21])}
    function caml_call24
     (f,
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21,
      a22,
      a23)
     {return f.length == 24
              ?f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17,
                 a18,
                 a19,
                 a20,
                 a21,
                 a22,
                 a23)
              :runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16,
                  a17,
                  a18,
                  a19,
                  a20,
                  a21,
                  a22,
                  a23])}
    function caml_call26
     (f,
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25)
     {return f.length == 26
              ?f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17,
                 a18,
                 a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25)
              :runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16,
                  a17,
                  a18,
                  a19,
                  a20,
                  a21,
                  a22,
                  a23,
                  a24,
                  a25])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$12=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes(""),
     cst$9=caml_string_of_jsbytes(","),
     cst$7=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes("}"),
     cst$11=caml_string_of_jsbytes("{"),
     cst$3=caml_string_of_jsbytes(")"),
     cst$4=caml_string_of_jsbytes(","),
     cst$5=caml_string_of_jsbytes(","),
     cst$6=caml_string_of_jsbytes("("),
     cst$0=caml_string_of_jsbytes(")"),
     cst$1=caml_string_of_jsbytes(","),
     cst$2=caml_string_of_jsbytes("("),
     cst=caml_string_of_jsbytes("*"),
     cst$25=caml_string_of_jsbytes("\xe2\x81\xb0"),
     cst$26=caml_string_of_jsbytes("\xc2\xb9"),
     cst$27=caml_string_of_jsbytes("\xc2\xb2"),
     cst$28=caml_string_of_jsbytes("\xc2\xb3"),
     cst$29=caml_string_of_jsbytes("\xe2\x81\xb4"),
     cst$30=caml_string_of_jsbytes("\xe2\x81\xb5"),
     cst$31=caml_string_of_jsbytes("\xe2\x81\xb6"),
     cst$32=caml_string_of_jsbytes("\xe2\x81\xb7"),
     cst$33=caml_string_of_jsbytes("\xe2\x81\xb8"),
     cst$34=caml_string_of_jsbytes("\xe2\x81\xb9"),
     cst$24=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("\xe2\x82\x80"),
     cst$15=caml_string_of_jsbytes("\xe2\x82\x81"),
     cst$16=caml_string_of_jsbytes("\xe2\x82\x82"),
     cst$17=caml_string_of_jsbytes("\xe2\x82\x83"),
     cst$18=caml_string_of_jsbytes("\xe2\x82\x84"),
     cst$19=caml_string_of_jsbytes("\xe2\x82\x85"),
     cst$20=caml_string_of_jsbytes("\xe2\x82\x86"),
     cst$21=caml_string_of_jsbytes("\xe2\x82\x87"),
     cst$22=caml_string_of_jsbytes("\xe2\x82\x88"),
     cst$23=caml_string_of_jsbytes("\xe2\x82\x89"),
     cst$13=caml_string_of_jsbytes(""),
     cst_List_sub=caml_string_of_jsbytes("List.sub"),
     cst$35=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst$39=caml_string_of_jsbytes(""),
     cst_X=caml_string_of_jsbytes("X^"),
     cst$38=caml_string_of_jsbytes("+"),
     cst$37=caml_string_of_jsbytes(""),
     cst_T=caml_string_of_jsbytes("T"),
     cst_F=caml_string_of_jsbytes("F"),
     cst$41=caml_string_of_jsbytes(")"),
     cst$42=caml_string_of_jsbytes(")/("),
     cst$43=caml_string_of_jsbytes("("),
     cst$40=caml_string_of_jsbytes("."),
     cst_Cannot_invert=caml_string_of_jsbytes("Cannot invert "),
     cst$50=caml_string_of_jsbytes(""),
     cst$49=caml_string_of_jsbytes(""),
     cst$46=caml_string_of_jsbytes("]"),
     cst$47=caml_string_of_jsbytes("|"),
     cst$48=caml_string_of_jsbytes("["),
     cst$44=caml_string_of_jsbytes("\xce\xb5"),
     cst$45=caml_string_of_jsbytes(""),
     cst$51=caml_string_of_jsbytes(""),
     cst$53=caml_string_of_jsbytes(" "),
     cst$52=caml_string_of_jsbytes("\n"),
     cst$72=caml_string_of_jsbytes(""),
     cst$73=caml_string_of_jsbytes("+"),
     cst$74=caml_string_of_jsbytes(""),
     cst$75=caml_string_of_jsbytes(")"),
     cst$76=caml_string_of_jsbytes("("),
     cst$77=caml_string_of_jsbytes("*"),
     cst$71=caml_string_of_jsbytes(""),
     cst$68=caml_string_of_jsbytes(""),
     cst$69=caml_string_of_jsbytes("\n"),
     cst$70=caml_string_of_jsbytes(":\n"),
     cst_d=caml_string_of_jsbytes("d"),
     cst$65=caml_string_of_jsbytes(""),
     cst$66=caml_string_of_jsbytes(""),
     cst$67=caml_string_of_jsbytes(" "),
     cst$64=caml_string_of_jsbytes(""),
     cst$62=caml_string_of_jsbytes("\n"),
     cst$63=caml_string_of_jsbytes(" -> "),
     cst$61=caml_string_of_jsbytes(""),
     cst$55=caml_string_of_jsbytes(""),
     cst$56=caml_string_of_jsbytes("+"),
     cst$57=caml_string_of_jsbytes(""),
     cst$58=caml_string_of_jsbytes("*"),
     cst$59=caml_string_of_jsbytes(")"),
     cst$60=caml_string_of_jsbytes("("),
     cst_0=caml_string_of_jsbytes("0"),
     cst$54=caml_string_of_jsbytes(""),
     cst_TODO_Module_FreeLeft_compa=
      caml_string_of_jsbytes("TODO: Module.FreeLeft.compare"),
     cst_not_in_the_kernel=caml_string_of_jsbytes(" not in the kernel.\n%!"),
     cst$79=caml_string_of_jsbytes(" -> "),
     cst$78=caml_string_of_jsbytes(" >"),
     cst$80=caml_string_of_jsbytes(" , "),
     cst$81=caml_string_of_jsbytes(" | "),
     cst$82=caml_string_of_jsbytes(" "),
     cst$83=caml_string_of_jsbytes("< "),
     cst_Alg_Algebra_Pres_K_X_Augme=
      caml_string_of_jsbytes("Alg.Algebra.Pres(K)(X).Augmentation.Invalid"),
     cst_tex=caml_string_of_jsbytes(".tex"),
     cst_ocaml_alg=caml_string_of_jsbytes("ocaml-alg"),
     partial=[2,0,0],
     partial$0=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,0,[11,caml_string_of_jsbytes("]\\\\\n&&"),[2,0,0]]]]],
     partial$1=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,0,[11,caml_string_of_jsbytes("]\\\\\n&&"),[2,0,0]]]]]]]]],
     partial$2=[11,caml_string_of_jsbytes("]\\\\\n&&"),[2,0,0]],
     partial$3=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n&&"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),[2,0,partial$2]]]]]]]]]]],
     partial$4=
      [11,
       caml_string_of_jsbytes("]\\\\\n&&"),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,0,[11,caml_string_of_jsbytes("]\\\\\n&&"),[2,0,0]]]]]],
     partial$5=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n&&"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),[2,0,partial$4]]]]]]]]]]],
     partial$6=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[r,"),
        [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,0]]]]],
     partial$7=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[rr,"),
            [2,0,[11,caml_string_of_jsbytes("']&&"),[2,0,0]]]]]]]]],
     partial$8=[11,caml_string_of_jsbytes("']&&&"),[2,0,0]],
     partial$9=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[r,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[rrr,"),[2,0,partial$8]]]]]]]]]]],
     partial$10=
      [11,
       caml_string_of_jsbytes("]\\\\\n"),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[r,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[r,"),
             [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,0]]]]]]]]]],
     partial$11=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n&&"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),[2,0,partial$10]]]]]]]]]]],
     partial$12=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("]\\\\\n"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("\\ar[r,"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("']&"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("\\ar[r,"),
              [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,0]]]]]]]]]]],
     partial$13=
      [11,
       caml_string_of_jsbytes("]\\\\\n&&"),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("]\\\\\n&&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[d,"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("]\\\\\n&&"),
               [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),partial$12]]]]]]]]]]],
     partial$14=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n&&"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),[2,0,partial$13]]]]]]]]]]],
     partial$15=
      [11,
       caml_string_of_jsbytes("\\ar[r,"),
       [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,0]]]],
     partial$16=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("]\\\\\n&&"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("\\ar[d,"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("]\\\\\n"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("\\ar[r,"),
              [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,partial$15]]]]]]]]]]],
     partial$17=
      [11,
       caml_string_of_jsbytes("]\\\\\n&&"),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("]\\\\\n&&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[d,"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("]\\\\\n&&"),
               [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),partial$16]]]]]]]]]]],
     partial$18=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n&&"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),[2,0,partial$17]]]]]]]]]]],
     partial$19=
      [11,
       caml_string_of_jsbytes("\\ar[r,"),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("']&"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("\\ar[r,"),
           [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,0]]]]]]]],
     partial$20=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("]\\\\\n&&"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("\\ar[d,"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("]\\\\\n&&"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("\\ar[d,"),
              [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),[2,0,partial$19]]]]]]]]]]],
     partial$21=
      [11,
       caml_string_of_jsbytes("]\\\\\n&&"),
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("]\\\\\n&&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[d,"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("]\\\\\n&&"),
               [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),partial$20]]]]]]]]]]],
     partial$22=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes("]\\\\\n&&"),
          [2,
           0,
           [11,
            caml_string_of_jsbytes("\\ar[d,"),
            [2,
             0,
             [11,
              caml_string_of_jsbytes("]\\\\\n&&"),
              [2,0,[11,caml_string_of_jsbytes("\\ar[d,"),[2,0,partial$21]]]]]]]]]]],
     partial$23=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),0]]]],
     partial$24=
      [2,
       0,
       [11,
        caml_string_of_jsbytes("\\ar[d,"),
        [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),0]]]],
     cst$113=caml_string_of_jsbytes(""),
     cst$116=caml_string_of_jsbytes("<-,"),
     cst$114=caml_string_of_jsbytes('}"'),
     cst$115=caml_string_of_jsbytes('"{'),
     cst$111=caml_string_of_jsbytes(""),
     cst$112=caml_string_of_jsbytes("\n"),
     cst$110=caml_string_of_jsbytes("\n"),
     cst$106=caml_string_of_jsbytes("."),
     cst$107=caml_string_of_jsbytes(")"),
     cst$108=caml_string_of_jsbytes("("),
     cst$109=caml_string_of_jsbytes("-"),
     cst_K=caml_string_of_jsbytes("K"),
     cst$104=caml_string_of_jsbytes("-> "),
     cst$105=caml_string_of_jsbytes(" -"),
     cst$99=caml_string_of_jsbytes(","),
     cst$100=caml_string_of_jsbytes(")"),
     cst$101=caml_string_of_jsbytes("("),
     cst$102=caml_string_of_jsbytes("-> "),
     cst$103=caml_string_of_jsbytes(" -"),
     cst$98=caml_string_of_jsbytes("\n"),
     cst$96=caml_string_of_jsbytes(" -> "),
     cst$97=caml_string_of_jsbytes(" : "),
     cst$95=caml_string_of_jsbytes("-"),
     cst$93=caml_string_of_jsbytes(""),
     cst$94=caml_string_of_jsbytes("+"),
     cst_1=caml_string_of_jsbytes("1"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst$92=caml_string_of_jsbytes(""),
     cst_Not_inversible=caml_string_of_jsbytes("Not inversible."),
     cst$89=caml_string_of_jsbytes("/"),
     cst$88=caml_string_of_jsbytes("]"),
     cst$90=caml_string_of_jsbytes(","),
     cst$91=caml_string_of_jsbytes("["),
     cst$87=caml_string_of_jsbytes(""),
     cst_x=caml_string_of_jsbytes("x"),
     cst$84=caml_string_of_jsbytes(")"),
     cst$85=caml_string_of_jsbytes(","),
     cst$86=caml_string_of_jsbytes("("),
     cst_Alg_Term_Not_unifiable=
      caml_string_of_jsbytes("Alg.Term.Not_unifiable"),
     cst_Alg_Term_RS_Not_confluent=
      caml_string_of_jsbytes("Alg.Term.RS.Not_confluent"),
     cst_z=caml_string_of_jsbytes("z"),
     cst_z$0=caml_string_of_jsbytes("z^"),
     cst$118=caml_string_of_jsbytes(""),
     cst$119=caml_string_of_jsbytes("+"),
     cst$117=caml_string_of_jsbytes("+..."),
     cst_Cannot_implement_this=
      caml_string_of_jsbytes("Cannot implement this."),
     cst_TODO=caml_string_of_jsbytes("TODO"),
     cst$120=caml_string_of_jsbytes("]"),
     cst$121=caml_string_of_jsbytes("|"),
     cst$122=caml_string_of_jsbytes("["),
     cst$123=caml_string_of_jsbytes("]"),
     cst$124=caml_string_of_jsbytes("["),
     empty$3=[0,0,0],
     cst$125=caml_string_of_jsbytes(" -> "),
     cst$126=caml_string_of_jsbytes(" : "),
     cst$128=caml_string_of_jsbytes("->"),
     cst$129=caml_string_of_jsbytes(":"),
     cst$127=caml_string_of_jsbytes(" , "),
     cst$130=caml_string_of_jsbytes(" , "),
     cst$131=caml_string_of_jsbytes("\n"),
     empty$4=[0,0,0],
     cst_f=caml_string_of_jsbytes("f"),
     cst_x$0=caml_string_of_jsbytes("x"),
     cst$132=caml_string_of_jsbytes("="),
     cst$133=caml_string_of_jsbytes(" , "),
     cst$134=caml_string_of_jsbytes("\n"),
     cst_id=caml_string_of_jsbytes("id"),
     cst$135=caml_string_of_jsbytes(")"),
     cst$136=caml_string_of_jsbytes("("),
     cst_0$1=caml_string_of_jsbytes("0"),
     cst_1$0=caml_string_of_jsbytes("1"),
     cst$137=caml_string_of_jsbytes("+"),
     cst$138=caml_string_of_jsbytes("."),
     cst$139=caml_string_of_jsbytes("*"),
     Stdlib_List=global_data.Stdlib__List,
     Stdlib_Map=global_data.Stdlib__Map,
     Stdlib_String=global_data.Stdlib__String,
     Stdlib=global_data.Stdlib,
     Stdlib_Set=global_data.Stdlib__Set,
     Assert_failure=global_data.Assert_failure,
     Stdlib_Array=global_data.Stdlib__Array,
     Stdlib_Queue=global_data.Stdlib__Queue,
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib_Filename=global_data.Stdlib__Filename,
     Stdlib_Weak=global_data.Stdlib__Weak,
     Alg=[0];
    caml_register_global(295,Alg,"Alg");
    var
     _b_=[0,caml_string_of_jsbytes("src/extlib.ml"),78,16],
     _a_=[0,caml_string_of_jsbytes("src/extlib.ml"),62,16],
     _c_=[0,caml_string_of_jsbytes("src/field.ml"),83,6],
     _g_=[0,caml_string_of_jsbytes("src/monoid.ml"),517,13],
     _f_=[0,caml_string_of_jsbytes("src/monoid.ml"),288,24],
     _e_=[0,caml_string_of_jsbytes("src/monoid.ml"),178,57],
     _d_=[0,caml_string_of_jsbytes("src/monoid.ml"),51,11],
     _i_=[0,caml_string_of_jsbytes("src/matrix.ml"),60,6],
     _h_=[0,caml_string_of_jsbytes("src/matrix.ml"),54,6],
     _k_=
      [0,
       [11,caml_string_of_jsbytes("invalid: "),[4,0,0,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("invalid: %d\n%!")],
     _l_=
      [0,
       [11,
        caml_string_of_jsbytes("d("),
        [2,0,[11,caml_string_of_jsbytes(") = "),[2,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("d(%s) = %s\n%!")],
     _m_=
      [0,
       [11,
        caml_string_of_jsbytes("d^2("),
        [2,0,[11,caml_string_of_jsbytes(") = "),[2,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("d^2(%s) = %s\n%!")],
     _j_=[0,caml_string_of_jsbytes("src/module.ml"),235,8],
     _p_=[0,caml_string_of_jsbytes("src/algebra.ml"),330,16],
     _o_=[0,caml_string_of_jsbytes("src/algebra.ml"),295,30],
     _t_=[0,caml_string_of_jsbytes("src/algebra.ml"),296,8],
     _q_=
      [0,
       [11,
        caml_string_of_jsbytes("failed (non-reducible): "),
        [2,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("failed (non-reducible): %s\n%!")],
     _r_=
      [0,
       [11,caml_string_of_jsbytes("leading: "),[2,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("leading: %s\n%!")],
     _s_=[0,caml_string_of_jsbytes("src/algebra.ml"),361,14],
     _n_=[0,caml_string_of_jsbytes("src/algebra.ml"),199,6],
     _aS_=
      [0,
       [11,
        caml_string_of_jsbytes("\nelim rule: ["),
        [2,0,[11,caml_string_of_jsbytes("] => "),[2,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("\nelim rule: [%s] => %s\n%!")],
     _aR_=[0,caml_string_of_jsbytes("src/term.ml"),1423,6],
     _aP_=
      [0,
       [11,
        caml_string_of_jsbytes("cd "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" && pdflatex "),
          [2,
           0,
           [11,
            caml_string_of_jsbytes(" && evince `basename "),
            [2,0,[11,caml_string_of_jsbytes(" .tex`.pdf"),0]]]]]]],
       caml_string_of_jsbytes
        ("cd %s && pdflatex %s && evince `basename %s .tex`.pdf")],
     _aQ_=[0,caml_string_of_jsbytes("src/term.ml"),1409,6],
     _ay_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,bend right,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[d,bend left,"),
           [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),[2,0,0]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[d,bend right,%s']\\ar[d,bend left,%s]\\\\\n%s")],
     _az_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[dr,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[d,"),
               [2,0,[11,caml_string_of_jsbytes("]\\\\\n&"),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[dr,%s']\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&%s")],
     _aA_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[drr,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$0]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[drr,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s")],
     _aB_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[ddrr,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$1]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[ddrr,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s")],
     _aC_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[dddrr,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$3]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[dddrr,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s")],
     _aD_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[ddddrr,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$5]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[ddddrr,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s")],
     _aE_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[d,"),
               [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),partial$6]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[d,%s']\\ar[r,%s]&%s\\ar[d,%s]\\\\\n%s\\ar[r,%s']&%s")],
     _aF_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$7]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[d,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n%s\\ar[rr,%s']&&%s")],
     _aG_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$9]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[d,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n%s\\ar[rrr,%s']&&&%s")],
     _aH_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[ddd,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$11]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[ddd,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n%s\\ar[r,%s']&%s\\ar[r,%s']&%s")],
     _aI_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[dddddd,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$14]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[dddddd,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n%s\\ar[r,%s']&%s\\ar[r,%s']&%s")],
     _aJ_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[ddddddd,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$18]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[ddddddd,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n%s\\ar[r,%s']&%s\\ar[r,%s']&%s")],
     _aK_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[dddddddd,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$22]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[dddddddd,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n&&%s\\ar[d,%s]\\\\\n%s\\ar[r,%s']&%s\\ar[r,%s']&%s")],
     _am_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$23]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[d,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n")],
     _ao_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']&&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[d,"),
             [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),0]]]]]]]],
       caml_string_of_jsbytes("%s\\ar[d,%s']&&%s\\ar[d,%s]\\\\\n")],
     _an_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[rr,"),
         [2,0,[11,caml_string_of_jsbytes("']&&"),[2,0,0]]]]],
       caml_string_of_jsbytes("%s\\ar[rr,%s']&&%s")],
     _ap_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']\\ar[r,"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("]&"),
             [2,
              0,
              [11,
               caml_string_of_jsbytes("\\ar[r,"),
               [2,0,[11,caml_string_of_jsbytes("]&"),partial$24]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s\\ar[d,%s']\\ar[r,%s]&%s\\ar[r,%s]&%s\\ar[d,%s]\\\\\n")],
     _ar_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[d,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']&&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[d,"),
             [2,0,[11,caml_string_of_jsbytes("]\\\\\n"),0]]]]]]]],
       caml_string_of_jsbytes("%s\\ar[d,%s']&&%s\\ar[d,%s]\\\\\n")],
     _aq_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("\\ar[r,"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("']&"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("\\ar[r,"),
             [2,0,[11,caml_string_of_jsbytes("']&"),[2,0,0]]]]]]]]],
       caml_string_of_jsbytes("%s\\ar[r,%s']&%s\\ar[r,%s']&%s")],
     _as_=
      [0,
       [11,
        caml_string_of_jsbytes("TODO: "),
        [4,0,0,0,[11,caml_string_of_jsbytes(", "),[4,0,0,0,[12,10,0]]]]],
       caml_string_of_jsbytes("TODO: %d, %d\n")],
     _at_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _au_=
      [0,
       [11,caml_string_of_jsbytes("zzlen: "),[4,0,0,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("zzlen: %d\n%!")],
     _av_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ax_=
      [0,
       [11,
        caml_string_of_jsbytes("\\ar[r,"),
        [2,0,[11,caml_string_of_jsbytes("]&"),[2,0,0]]]],
       caml_string_of_jsbytes("\\ar[r,%s]&%s")],
     _aw_=
      [0,[11,caml_string_of_jsbytes("\\\\"),0],caml_string_of_jsbytes("\\\\")],
     _ak_=
      [0,
       [11,
        caml_string_of_jsbytes("print "),
        [2,0,[11,caml_string_of_jsbytes(": "),[2,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("print %s: %s\n%!")],
     _al_=
      [0,
       [11,
        caml_string_of_jsbytes("split: "),
        [2,0,[11,caml_string_of_jsbytes(" / "),[2,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("split: %s / %s\n%!")],
     _aL_=
      [0,
       [11,
        caml_string_of_jsbytes("\\noindent\n\\subsection*{"),
        [2,0,[11,caml_string_of_jsbytes("}\n"),0]]],
       caml_string_of_jsbytes("\\noindent\n\\subsection*{%s}\n")],
     _aM_=
      [0,
       [11,caml_string_of_jsbytes("\\[\n\\begin{tikzcd}\n"),0],
       caml_string_of_jsbytes("\\[\n\\begin{tikzcd}\n")],
     _aN_=
      [0,
       [11,caml_string_of_jsbytes("\n\\end{tikzcd}\n\\]\n\n"),0],
       caml_string_of_jsbytes("\n\\end{tikzcd}\n\\]\n\n")],
     _ah_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" &: "),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(" \\to "),
           [2,0,[11,caml_string_of_jsbytes("\\\\"),0]]]]]],
       caml_string_of_jsbytes("%s &: %s \\to %s\\\\")],
     _ag_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("\\documentclass[a4paper,9pt]{extarticle}\n\\usepackage[utf8x]{inputenc}\n\\usepackage{amsmath}\n\\usepackage{tikz-cd}\n\\usepackage[margin=1cm,includefoot]{geometry}\n\\title{Coherent presentation}\n\\author{ocaml-alg}\n\n\\begin{document}\n\\maketitle\n\n"),
        0],
       caml_string_of_jsbytes
        ("\\documentclass[a4paper,9pt]{extarticle}\n\\usepackage[utf8x]{inputenc}\n\\usepackage{amsmath}\n\\usepackage{tikz-cd}\n\\usepackage[margin=1cm,includefoot]{geometry}\n\\title{Coherent presentation}\n\\author{ocaml-alg}\n\n\\begin{document}\n\\maketitle\n\n")],
     _ai_=
      [0,
       [11,
        caml_string_of_jsbytes("\\section{Rules}\n\n\\begin{align*}\n"),
        [2,0,[11,caml_string_of_jsbytes("\n\\end{align*}\n\n"),0]]],
       caml_string_of_jsbytes
        ("\\section{Rules}\n\n\\begin{align*}\n%s\n\\end{align*}\n\n")],
     _aj_=
      [0,
       [11,caml_string_of_jsbytes("\\section{Coherence}\n\n"),0],
       caml_string_of_jsbytes("\\section{Coherence}\n\n")],
     _aO_=
      [0,
       [11,caml_string_of_jsbytes("\\end{document}\n"),0],
       caml_string_of_jsbytes("\\end{document}\n")],
     _af_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": "),[2,0,[12,10,0]]]],
       caml_string_of_jsbytes("%s: %s\n")],
     _ae_=[0,caml_string_of_jsbytes("src/term.ml"),1122,6],
     _ad_=[0,caml_string_of_jsbytes("src/term.ml"),1123,6],
     _ac_=[0,caml_string_of_jsbytes("src/term.ml"),1112,6],
     _O_=[0,1],
     _P_=[0,1],
     _R_=[0,caml_string_of_jsbytes("src/term.ml"),900,14],
     _Z_=[0,caml_string_of_jsbytes("src/term.ml"),1045,13],
     _$_=[0,caml_string_of_jsbytes("src/term.ml"),1055,13],
     ___=[0,caml_string_of_jsbytes("src/term.ml"),1052,13],
     _ab_=[0,caml_string_of_jsbytes("src/term.ml"),1082,84],
     _aa_=[0,caml_string_of_jsbytes("src/term.ml"),1067,15],
     _S_=[0,caml_string_of_jsbytes("src/term.ml"),1007,10],
     _T_=[0,caml_string_of_jsbytes("src/term.ml"),1008,10],
     _V_=[0,caml_string_of_jsbytes("src/term.ml"),1013,18],
     _U_=[0,caml_string_of_jsbytes("src/term.ml"),1014,15],
     _Y_=[0,caml_string_of_jsbytes("src/term.ml"),1003,6],
     _X_=[0,caml_string_of_jsbytes("src/term.ml"),1017,6],
     _W_=[0,caml_string_of_jsbytes("src/term.ml"),1018,6],
     _Q_=[0,caml_string_of_jsbytes("src/term.ml"),891,6],
     _N_=
      [0,
       [11,
        caml_string_of_jsbytes("not confluent:\n"),
        [2,0,[12,10,[2,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("not confluent:\n%s\n%s\n%!")],
     _M_=
      [0,
       [11,
        caml_string_of_jsbytes("add "),
        [2,
         0,
         [12,
          10,
          [2,0,[12,10,[2,0,[11,caml_string_of_jsbytes("\n\n"),[10,0]]]]]]]],
       caml_string_of_jsbytes("add %s\n%s\n%s\n\n%!")],
     _L_=[0,caml_string_of_jsbytes("src/term.ml"),748,12],
     _I_=[0,caml_string_of_jsbytes("src/term.ml"),676,9],
     _K_=[0,caml_string_of_jsbytes("src/term.ml"),719,31],
     _J_=[0,caml_string_of_jsbytes("src/term.ml"),709,21],
     _H_=[0,caml_string_of_jsbytes("src/term.ml"),662,6],
     _G_=[0,caml_string_of_jsbytes("src/term.ml"),553,6],
     _F_=[0,caml_string_of_jsbytes("src/term.ml"),554,6],
     _E_=[0,caml_string_of_jsbytes("src/term.ml"),546,6],
     _D_=[0,caml_string_of_jsbytes("src/term.ml"),543,20],
     _C_=[0,caml_string_of_jsbytes("src/term.ml"),448,14],
     _B_=[0,caml_string_of_jsbytes("src/term.ml"),383,2],
     _x_=[0,caml_string_of_jsbytes("src/term.ml"),137,16],
     _y_=[0,caml_string_of_jsbytes("src/term.ml"),138,16],
     _w_=[0,caml_string_of_jsbytes("src/term.ml"),95,6],
     _v_=[0,caml_string_of_jsbytes("src/term.ml"),85,2],
     _u_=
      [0,
       caml_string_of_jsbytes("x"),
       caml_string_of_jsbytes("y"),
       caml_string_of_jsbytes("z"),
       caml_string_of_jsbytes("t"),
       caml_string_of_jsbytes("u"),
       caml_string_of_jsbytes("v"),
       caml_string_of_jsbytes("w")],
     _aT_=[0,caml_string_of_jsbytes("src/series.ml"),74,4],
     _aU_=[0,caml_string_of_jsbytes("src/series.ml"),90,4],
     _aV_=[0,caml_string_of_jsbytes("src/precategory.ml"),59,22],
     _aW_=[0,caml_string_of_jsbytes("src/precategory.ml"),98,6],
     _aY_=[0,caml_string_of_jsbytes("src/hypergraph.ml"),82,4],
     _aX_=[0,caml_string_of_jsbytes("src/hypergraph.ml"),78,4],
     _a6_=[0,caml_string_of_jsbytes("src/globular.ml"),77,4],
     _a5_=[0,caml_string_of_jsbytes("src/globular.ml"),78,4],
     _a4_=[0,caml_string_of_jsbytes("src/globular.ml"),80,4],
     _a3_=[0,caml_string_of_jsbytes("src/globular.ml"),68,4],
     _a2_=[0,caml_string_of_jsbytes("src/globular.ml"),60,4],
     _a1_=[0,caml_string_of_jsbytes("src/globular.ml"),62,4],
     _a0_=[0,caml_string_of_jsbytes("src/globular.ml"),34,4],
     _aZ_=[0,caml_string_of_jsbytes("src/globular.ml"),30,4],
     _a9_=[0,caml_string_of_jsbytes("src/category.ml"),52,4],
     _a8_=[0,caml_string_of_jsbytes("src/category.ml"),53,4],
     _a7_=[0,caml_string_of_jsbytes("src/category.ml"),27,4];
    function namer(eq)
     {var n=[0,0],names=[0,0];
      return function(e)
       {var _vp_=names[1];
        function _vq_(param){var e$0=param[1];return caml_call2(eq,e,e$0)}
        if(1 - caml_call2(Stdlib_List[33],_vq_,_vp_))
         {names[1] = [0,[0,e,n[1]],names[1]];n[1]++}
        var _vr_=names[1];
        function _vs_(param){var e$0=param[1];return caml_call2(eq,e,e$0)}
        return caml_call2(Stdlib_List[38],_vs_,_vr_)[2]}}
    var Alg_Utils=[0,namer];
    caml_register_global(297,Alg_Utils,"Alg__Utils");
    function eq(c,d){return c === d?1:0}
    function to_string(c){return caml_call2(Stdlib_String[1],1,c)}
    var compare=caml_int_compare;
    function leq(c,d){return c <= d?1:0}
    function geq(c,d){return d <= c?1:0}
    var
     Char=[0,eq,to_string,compare,leq,geq],
     CharAlphabet=[0,Char[1],Char[2],Char[3]];
    function eq$0(s,t){return caml_string_equal(s,t)}
    function to_string$0(s){return s}
    function compare$0(s,t){return runtime.caml_string_compare(s,t)}
    var String=[0,eq$0,to_string$0,compare$0];
    function eq$1(i,j){return i === j?1:0}
    var to_string$1=Stdlib[33],compare$1=caml_int_compare;
    function leq$0(i,j){return i <= j?1:0}
    function geq$0(i,j){return j <= i?1:0}
    var
     Int=[0,eq$1,to_string$1,compare$1,leq$0,geq$0],
     IntAlphabet=[0,Int[1],Int[2],Int[3]];
    function eq$2(param,_vo_){return 1}
    function compare$2(param,_vn_){return 0}
    function to_string$2(param){return cst}
    var Unit=[0,eq$2,to_string$2,compare$2];
    function Prod(A,B)
     {function eq(param,_vl_)
       {var
         b=_vl_[2],
         a=_vl_[1],
         b$0=param[2],
         a$0=param[1],
         _vm_=caml_call2(A[1],a$0,a);
        return _vm_?caml_call2(B[1],b$0,b):_vm_}
      function compare(param,_vk_)
       {var
         b=_vk_[2],
         a=_vk_[1],
         b$0=param[2],
         a$0=param[1],
         c=caml_call2(A[3],a$0,a);
        return 0 === c?caml_call2(B[3],b$0,b):c}
      function to_string(param)
       {var
         b=param[2],
         a=param[1],
         _vf_=caml_call1(B[2],b),
         _vg_=caml_call2(Stdlib[28],_vf_,cst$0),
         _vh_=caml_call2(Stdlib[28],cst$1,_vg_),
         _vi_=caml_call1(A[2],a),
         _vj_=caml_call2(Stdlib[28],_vi_,_vh_);
        return caml_call2(Stdlib[28],cst$2,_vj_)}
      return [0,eq,to_string,compare]}
    function Prod3(A,B,C)
     {function eq(param,_vb_)
       {var
         c=_vb_[3],
         b=_vb_[2],
         a=_vb_[1],
         c$0=param[3],
         b$0=param[2],
         a$0=param[1],
         _vc_=caml_call2(A[1],a$0,a);
        if(_vc_)
         {var _vd_=caml_call2(B[1],b$0,b);
          if(_vd_)return caml_call2(C[1],c$0,c);
          var _ve_=_vd_}
        else
         var _ve_=_vc_;
        return _ve_}
      function compare(param,_va_)
       {var
         c=_va_[3],
         b=_va_[2],
         a=_va_[1],
         c$0=param[3],
         b$0=param[2],
         a$0=param[1],
         comp=caml_call2(A[3],a$0,a);
        if(0 === comp)
         {var comp$0=caml_call2(B[3],b$0,b);
          return 0 === comp$0?caml_call2(C[3],c$0,c):comp$0}
        return comp}
      function to_string(param)
       {var
         c=param[3],
         b=param[2],
         a=param[1],
         _u4_=caml_call1(C[2],c),
         _u5_=caml_call2(Stdlib[28],_u4_,cst$3),
         _u6_=caml_call2(Stdlib[28],cst$4,_u5_),
         _u7_=caml_call1(B[2],b),
         _u8_=caml_call2(Stdlib[28],_u7_,_u6_),
         _u9_=caml_call2(Stdlib[28],cst$5,_u8_),
         _u__=caml_call1(A[2],a),
         _u$_=caml_call2(Stdlib[28],_u__,_u9_);
        return caml_call2(Stdlib[28],cst$6,_u$_)}
      return [0,eq,to_string,compare]}
    function Pow(A)
     {var S=caml_call1(Stdlib_Set[1],[0,A[3]]);
      function eq(u,v){return caml_call2(S[12],u,v)}
      function compare(u,v){return caml_call2(S[11],u,v)}
      function to_string(u)
       {function _u0_(x,s)
         {if(caml_string_equal(s,cst$8))return caml_call1(A[2],x);
          var _u2_=caml_call1(A[2],x),_u3_=caml_call2(Stdlib[28],cst$9,_u2_);
          return caml_call2(Stdlib[28],s,_u3_)}
        var
         s=caml_call3(S[16],_u0_,u,cst$7),
         _u1_=caml_call2(Stdlib[28],s,cst$10);
        return caml_call2(Stdlib[28],cst$11,_u1_)}
      var empty=S[1];
      function of_list(l){return caml_call1(S[37],l)}
      function add(u,x){return caml_call2(S[4],x,u)}
      function mem(u,x){return caml_call2(S[3],x,u)}
      function iter(f,u){return caml_call2(S[14],f,u)}
      return [0,S,eq,compare,to_string,empty,of_list,add,mem,iter]}
    function PowAlphabet(_uY_)
     {var _uZ_=Pow(_uY_);return [0,_uZ_[2],_uZ_[4],_uZ_[3]]}
    function List(A)
     {function eq(u,v)
       {try
         {var
           _uV_=function(x,y){return caml_call2(A[1],x,y)},
           _uW_=caml_call3(Stdlib_List[34],_uV_,u,v);
          return _uW_}
        catch(_uX_)
         {_uX_ = caml_wrap_exception(_uX_);
          if(_uX_[1] === Stdlib[6])return 0;
          throw _uX_}}
      function to_string(u)
       {var _uU_=caml_call2(Stdlib_List[19],A[2],u);
        return caml_call2(Stdlib_String[6],cst$12,_uU_)}
      function compare(u,v)
       {var u$0=u,v$0=v;
        for(;;)
         {if(u$0)
           {if(v$0)
             {var
               v$1=v$0[2],
               y=v$0[1],
               u$1=u$0[2],
               x=u$0[1],
               c=caml_call2(A[3],x,y);
              if(0 === c){var u$0=u$1,v$0=v$1;continue}
              return c}
            return 1}
          return v$0?-1:0}}
      return [0,eq,to_string,compare]}
    function ListAlphabet(_uT_){return List(_uT_)}
    function Map(A,B)
     {var M=caml_call1(Stdlib_Map[1],[0,A[3]]),empty=M[1];
      function app(f,x){return caml_call2(M[28],x,f)}
      function add(f,x,v){return caml_call3(M[4],x,v,f)}
      function mem(f,x){return caml_call2(M[3],x,f)}
      var iter=M[12];
      return [0,M,empty,app,add,mem,iter]}
    var
     Alg_Alphabet=
      [0,
       Char,
       CharAlphabet,
       String,
       Int,
       IntAlphabet,
       Unit,
       Prod,
       Prod3,
       Pow,
       PowAlphabet,
       List,
       ListAlphabet,
       Map];
    caml_register_global(302,Alg_Alphabet,"Alg__Alphabet");
    function pair(x,y){return [0,x,y]}
    function unpair(f,param)
     {var y=param[2],x=param[1];return caml_call2(f,x,y)}
    function modulo(x,y)
     {var ans=runtime.caml_mod(x,y);return 0 <= ans?ans:ans + y | 0}
    var
     Int$0=[0,modulo],
     length=Stdlib_List[1],
     compare_lengths=Stdlib_List[2],
     compare_length_with=Stdlib_List[3],
     cons=Stdlib_List[4],
     hd=Stdlib_List[5],
     tl=Stdlib_List[6],
     nth=Stdlib_List[7],
     nth_opt=Stdlib_List[8],
     rev=Stdlib_List[9],
     init=Stdlib_List[10],
     append=Stdlib_List[11],
     rev_append=Stdlib_List[12],
     concat=Stdlib_List[13],
     flatten=Stdlib_List[14],
     equal=Stdlib_List[15],
     compare$3=Stdlib_List[16],
     iter=Stdlib_List[17],
     iteri=Stdlib_List[18],
     map=Stdlib_List[19],
     mapi=Stdlib_List[20],
     rev_map=Stdlib_List[21],
     filter_map=Stdlib_List[22],
     concat_map=Stdlib_List[23],
     fold_left_map=Stdlib_List[24],
     fold_left=Stdlib_List[25],
     fold_right=Stdlib_List[26],
     iter2=Stdlib_List[27],
     map2=Stdlib_List[28],
     rev_map2=Stdlib_List[29],
     fold_left2=Stdlib_List[30],
     fold_right2=Stdlib_List[31],
     for_all=Stdlib_List[32],
     exists=Stdlib_List[33],
     for_all2=Stdlib_List[34],
     exists2=Stdlib_List[35],
     mem=Stdlib_List[36],
     memq=Stdlib_List[37],
     find=Stdlib_List[38],
     find_opt=Stdlib_List[39],
     find_map=Stdlib_List[40],
     filter=Stdlib_List[41],
     find_all=Stdlib_List[42],
     filteri=Stdlib_List[43],
     partition=Stdlib_List[44],
     partition_map=Stdlib_List[45],
     assoc=Stdlib_List[46],
     assoc_opt=Stdlib_List[47],
     assq=Stdlib_List[48],
     assq_opt=Stdlib_List[49],
     mem_assoc=Stdlib_List[50],
     mem_assq=Stdlib_List[51],
     remove_assoc=Stdlib_List[52],
     remove_assq=Stdlib_List[53],
     split=Stdlib_List[54],
     combine=Stdlib_List[55],
     sort=Stdlib_List[56],
     stable_sort=Stdlib_List[57],
     fast_sort=Stdlib_List[58],
     sort_uniq=Stdlib_List[59],
     merge=Stdlib_List[60],
     to_seq=Stdlib_List[61],
     of_seq=Stdlib_List[62];
    function index(p,param)
     {var n=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return n;
          var n$0=n + 1 | 0,n=n$0,param$0=l;
          continue}
        throw Stdlib[8]}}
    function replace_nth(param,n,x)
     {function k$1(_uS_){return _uS_}
      var n$0=n,k=k$1,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],y=param$0[1];
          if(0 === n$0)return k([0,x,l]);
          var
           k$2=function(k,y){function k$0(l){return k([0,y,l])}return k$0},
           k$0=k$2(k,y),
           n$1=n$0 - 1 | 0,
           n$0=n$1,
           k=k$0,
           param$0=l;
          continue}
        throw Stdlib[8]}}
    function replace_assoc(k,v,l)
     {function _uR_(param)
       {var v$0=param[2],k$0=param[1];
        return caml_equal(k,k$0)?[0,k,v]:[0,k$0,v$0]}
      return caml_call2(Stdlib_List[19],_uR_,l)}
    function sub(l,ofs,len)
     {var l$0=l,ofs$0=ofs;
      for(;;)
       {if(0 === ofs$0 && 0 === len)return 0;
        if(l$0)
         {var l$1=l$0[2],x=l$0[1];
          if(0 === ofs$0)return [0,x,sub(l$1,ofs$0,len - 1 | 0)];
          var ofs$1=ofs$0 - 1 | 0,l$0=l$1,ofs$0=ofs$1;
          continue}
        return caml_call1(Stdlib[1],cst_List_sub)}}
    var
     List$0=
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       concat,
       flatten,
       equal,
       compare$3,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       filter,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       sort,
       stable_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq,
       index,
       replace_nth,
       replace_assoc,
       sub],
     make=Stdlib_String[1],
     init$0=Stdlib_String[2],
     empty=Stdlib_String[3],
     of_bytes=Stdlib_String[4],
     to_bytes=Stdlib_String[5],
     concat$0=Stdlib_String[6],
     cat=Stdlib_String[7],
     equal$0=Stdlib_String[8],
     compare$4=Stdlib_String[9],
     starts_with=Stdlib_String[10],
     ends_with=Stdlib_String[11],
     contains_from=Stdlib_String[12],
     rcontains_from=Stdlib_String[13],
     contains=Stdlib_String[14],
     sub$0=Stdlib_String[15],
     split_on_char=Stdlib_String[16],
     map$0=Stdlib_String[17],
     mapi$0=Stdlib_String[18],
     fold_left$0=Stdlib_String[19],
     fold_right$0=Stdlib_String[20],
     for_all$0=Stdlib_String[21],
     exists$0=Stdlib_String[22],
     trim=Stdlib_String[23],
     escaped=Stdlib_String[24],
     uppercase_ascii=Stdlib_String[25],
     lowercase_ascii=Stdlib_String[26],
     capitalize_ascii=Stdlib_String[27],
     uncapitalize_ascii=Stdlib_String[28],
     iter$0=Stdlib_String[29],
     iteri$0=Stdlib_String[30],
     index_from=Stdlib_String[31],
     index_from_opt=Stdlib_String[32],
     rindex_from=Stdlib_String[33],
     rindex_from_opt=Stdlib_String[34],
     index$0=Stdlib_String[35],
     index_opt=Stdlib_String[36],
     rindex=Stdlib_String[37],
     rindex_opt=Stdlib_String[38],
     to_seq$0=Stdlib_String[39],
     to_seqi=Stdlib_String[40],
     of_seq$0=Stdlib_String[41],
     get_utf_8_uchar=Stdlib_String[42],
     is_valid_utf_8=Stdlib_String[43],
     get_utf_16be_uchar=Stdlib_String[44],
     is_valid_utf_16be=Stdlib_String[45],
     get_utf_16le_uchar=Stdlib_String[46],
     is_valid_utf_16le=Stdlib_String[47],
     blit=Stdlib_String[48],
     copy=Stdlib_String[49],
     fill=Stdlib_String[50],
     uppercase=Stdlib_String[51],
     lowercase=Stdlib_String[52],
     capitalize=Stdlib_String[53],
     uncapitalize=Stdlib_String[54],
     get_uint8=Stdlib_String[55],
     get_int8=Stdlib_String[56],
     get_uint16_ne=Stdlib_String[57],
     get_uint16_be=Stdlib_String[58],
     get_uint16_le=Stdlib_String[59],
     get_int16_ne=Stdlib_String[60],
     get_int16_be=Stdlib_String[61],
     get_int16_le=Stdlib_String[62],
     get_int32_ne=Stdlib_String[63],
     get_int32_be=Stdlib_String[64],
     get_int32_le=Stdlib_String[65],
     get_int64_ne=Stdlib_String[66],
     get_int64_be=Stdlib_String[67],
     get_int64_le=Stdlib_String[68];
    function subscript(s)
     {function _uQ_(s,param)
       {var switcher=param - 48 | 0;
        if(9 < switcher >>> 0)throw [0,Assert_failure,_a_];
        switch(switcher)
         {case 0:return cst$14;
          case 1:return cst$15;
          case 2:return cst$16;
          case 3:return cst$17;
          case 4:return cst$18;
          case 5:return cst$19;
          case 6:return cst$20;
          case 7:return cst$21;
          case 8:return cst$22;
          default:return cst$23}}
      return caml_call3(Stdlib_String[19],_uQ_,cst$13,s)}
    function superscript(s)
     {function _uP_(s,param)
       {var switcher=param - 48 | 0;
        if(9 < switcher >>> 0)throw [0,Assert_failure,_b_];
        switch(switcher)
         {case 0:return cst$25;
          case 1:return cst$26;
          case 2:return cst$27;
          case 3:return cst$28;
          case 4:return cst$29;
          case 5:return cst$30;
          case 6:return cst$31;
          case 7:return cst$32;
          case 8:return cst$33;
          default:return cst$34}}
      return caml_call3(Stdlib_String[19],_uP_,cst$24,s)}
    function find$0(p,s)
     {var ans=[0,-1];
      try
       {var _uM_=caml_ml_string_length(s) - 1 | 0,_uL_=0;
        if(! (_uM_ < 0))
         {var i=_uL_;
          for(;;)
           {if(caml_call1(p,caml_string_get(s,i))){ans[1] = i;throw Stdlib[3]}
            var _uN_=i + 1 | 0;
            if(_uM_ !== i){var i=_uN_;continue}
            break}}
        throw Stdlib[8]}
      catch(_uO_)
       {_uO_ = caml_wrap_exception(_uO_);
        if(_uO_ === Stdlib[3])return ans[1];
        throw _uO_}}
    function split_on_predicate(p,s)
     {try
       {var
         n=find$0(p,s),
         _uI_=
          split_on_predicate
           (p,
            caml_call3
             (Stdlib_String[15],
              s,
              n + 1 | 0,
              caml_ml_string_length(s) - (n + 1 | 0) | 0)),
         _uJ_=[0,caml_call3(Stdlib_String[15],s,0,n),_uI_];
        return _uJ_}
      catch(_uK_)
       {_uK_ = caml_wrap_exception(_uK_);
        if(_uK_ === Stdlib[8])return [0,s,0];
        throw _uK_}}
    var
     String$0=
      [0,
       make,
       init$0,
       empty,
       of_bytes,
       to_bytes,
       concat$0,
       cat,
       equal$0,
       compare$4,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub$0,
       split_on_char,
       map$0,
       mapi$0,
       fold_left$0,
       fold_right$0,
       for_all$0,
       exists$0,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter$0,
       iteri$0,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index$0,
       index_opt,
       rindex,
       rindex_opt,
       to_seq$0,
       to_seqi,
       of_seq$0,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       subscript,
       superscript,
       find$0,
       split_on_predicate],
     Alg_Extlib=[0,pair,unpair,Int$0,List$0,String$0];
    caml_register_global(304,Alg_Extlib,"Alg__Extlib");
    function eq$3(x,y){return x === y?1:0}
    function add(x,y)
     {var x$0=x || y;
      if(x$0)var y$0=x?y:x,_uH_=1 - y$0;else var _uH_=x$0;
      return _uH_}
    var zero=0;
    function neg(x){return x}
    function mul(x,y){var y$0=x?y:x;return y$0}
    var one=1;
    function to_string$3(x){return x?cst_T:cst_F}
    var include=[0,eq$3,add,zero,neg,mul,one,to_string$3];
    function eq$4(x,y){return x === y?1:0}
    function add$0(_uG_,_uF_){return _uG_ + _uF_ | 0}
    var zero$0=0;
    function neg$0(x){return - x | 0}
    var
     mul$0=caml_mul,
     to_string$4=Stdlib[33],
     include$0=[0,eq$4,add$0,zero$0,neg$0,mul$0,1,to_string$4];
    function eq$5(x,y){return x == y?1:0}
    function add$1(_uE_,_uD_){return _uE_ + _uD_}
    var zero$1=0.;
    function neg$1(x){return - x}
    function mul$1(_uC_,_uB_){return _uC_ * _uB_}
    var
     to_string$5=Stdlib[35],
     include$1=[0,eq$5,add$1,zero$1,neg$1,mul$1,1.,to_string$5];
    function Polynomial(R)
     {function length(p){return p.length - 1}
      function degree(p)
       {var ans=[0,0];
        try
         {var _uw_=p.length - 1 - 1 | 0;
          if(! (_uw_ < 0))
           {var i=_uw_;
            for(;;)
             {var _uy_=caml_check_bound(p,i)[1 + i];
              if(1 - caml_call2(R[1],R[3],_uy_)){ans[1] = i;throw Stdlib[3]}
              var _uz_=i - 1 | 0;
              if(0 !== i){var i=_uz_;continue}
              break}}
          var _ux_=Stdlib[20];
          return _ux_}
        catch(_uA_)
         {_uA_ = caml_wrap_exception(_uA_);
          if(_uA_ === Stdlib[3])return ans[1];
          throw _uA_}}
      function eq(p,q)
       {var dp=degree(p),dq=degree(q);
        try
         {if(dp !== dq)throw Stdlib[3];
          var _uq_=dp - 1 | 0,_up_=0;
          if(! (_uq_ < 0))
           {var i=_up_;
            for(;;)
             {var
               _us_=caml_check_bound(q,i)[1 + i],
               _ut_=caml_check_bound(p,i)[1 + i];
              if(1 - caml_call2(R[1],_ut_,_us_))throw Stdlib[3];
              var _uu_=i + 1 | 0;
              if(_uq_ !== i){var i=_uu_;continue}
              break}}
          var _ur_=1;
          return _ur_}
        catch(_uv_)
         {_uv_ = caml_wrap_exception(_uv_);
          if(_uv_ === Stdlib[3])return 0;
          throw _uv_}}
      function compact(p)
       {function _un_(i){return caml_check_bound(p,i)[1 + i]}
        var _uo_=degree(p);
        return caml_call2(Stdlib_Array[2],_uo_,_un_)}
      function coeff(p,i)
       {return i < p.length - 1?caml_check_bound(p,i)[1 + i]:R[3]}
      function init(n,f){return caml_call2(Stdlib_Array[2],n,f)}
      function add(p,q)
       {var p$0=p,q$0=q;
        for(;;)
         {var pl=p$0.length - 1,ql=q$0.length - 1;
          if(ql < pl){var _uk_=q$0,q$0=p$0,p$0=_uk_;continue}
          return init
                  (ql,
                   function(i)
                    {if(i < pl)
                      {var
                        _ul_=caml_check_bound(q$0,i)[1 + i],
                        _um_=caml_check_bound(p$0,i)[1 + i];
                       return caml_call2(R[2],_um_,_ul_)}
                     return caml_check_bound(q$0,i)[1 + i]})}}
      var zero=[0];
      function cmul(a,p)
       {var _uj_=caml_call1(R[5],a);
        return caml_call2(Stdlib_Array[15],_uj_,p)}
      function neg(p){return cmul(caml_call1(R[4],R[6]),p)}
      function sub(p,q){return add(p,neg(q))}
      function mul(p,q)
       {function _uc_(n)
         {var ans=[0,R[3]],_ue_=0;
          if(! (n < 0))
           {var i=_ue_;
            for(;;)
             {var
               _uf_=coeff(q,n - i | 0),
               _ug_=coeff(p,i),
               _uh_=caml_call2(R[5],_ug_,_uf_);
              ans[1] = caml_call2(R[2],ans[1],_uh_);
              var _ui_=i + 1 | 0;
              if(n !== i){var i=_ui_;continue}
              break}}
          return ans[1]}
        var _ud_=degree(q);
        return init(degree(p) + _ud_ | 0,_uc_)}
      var one=[0,R[6]];
      function to_string(p)
       {var ans=[0,cst$35],_t4_=p.length - 1 - 1 | 0,_t3_=0;
        if(! (_t4_ < 0))
         {var i=_t3_;
          for(;;)
           {var _t5_=caml_check_bound(p,i)[1 + i];
            if(caml_call2(R[1],R[3],_t5_))
             var _t6_=cst$36;
            else
             {if(0 === i)
               var _t__=cst$39;
              else
               var
                _ub_=caml_call1(Stdlib[33],i),
                _t__=caml_call2(Stdlib[28],cst_X,_ub_);
              var
               _t$_=caml_check_bound(p,i)[1 + i],
               _ua_=caml_call1(R[7],_t$_),
               _t6_=caml_call2(Stdlib[28],_ua_,_t__)}
            var
             _t7_=0 === i?cst$37:cst$38,
             _t8_=caml_call2(Stdlib[28],_t7_,_t6_);
            ans[1] = caml_call2(Stdlib[28],ans[1],_t8_);
            var _t9_=i + 1 | 0;
            if(_t4_ !== i){var i=_t9_;continue}
            break}}
        return ans[1]}
      function monomial(c,n)
       {var ans=caml_make_vect(n + 1 | 0,R[3]);
        caml_check_bound(ans,n)[1 + n] = c;
        return ans}
      return [0,
              length,
              degree,
              eq,
              compact,
              coeff,
              init,
              add,
              zero,
              cmul,
              neg,
              sub,
              mul,
              one,
              to_string,
              monomial]}
    function PolynomialRing(_t1_)
     {var _t2_=Polynomial(_t1_);
      return [0,_t2_[3],_t2_[7],_t2_[8],_t2_[10],_t2_[12],_t2_[13],_t2_[14]]}
    function Op(R)
     {var
       eq=R[1],
       add=R[2],
       zero=R[3],
       neg=R[4],
       one=R[6],
       to_string=R[7],
       _t0_=R[5];
      function mul(x,y){return caml_call2(_t0_,y,x)}
      return [0,eq,add,zero,neg,mul,one,to_string]}
    var Alg_Ring=[0,include,include$0,include$1,Polynomial,PolynomialRing,Op];
    caml_register_global(306,Alg_Ring,"Alg__Ring");
    var
     eq$6=include[1],
     add$2=include[2],
     zero$2=include[3],
     neg$2=include[4],
     mul$2=include[5],
     one$0=include[6],
     to_string$6=include[7];
    function inv(x){return x}
    var
     Bool=[0,eq$6,add$2,zero$2,neg$2,mul$2,one$0,to_string$6,inv],
     eq$7=include$1[1],
     add$3=include$1[2],
     zero$3=include$1[3],
     neg$3=include$1[4],
     mul$3=include$1[5],
     one$1=include$1[6],
     to_string$7=include$1[7];
    function inv$0(x){return 1. / x}
    var
     Float=[0,eq$7,add$3,zero$3,neg$3,mul$3,one$1,to_string$7,inv$0],
     eq$8=include$0[1],
     add$4=include$0[2],
     zero$4=include$0[3],
     neg$4=include$0[4],
     mul$4=include$0[5],
     one$2=include$0[6],
     to_string$8=include$0[7];
    function inv$1(x)
     {if(caml_call2(eq$8,one$2,x))return one$2;
      if(caml_call2(eq$8,caml_call1(neg$4,one$2),x))
       return caml_call1(neg$4,one$2);
      var
       _tX_=caml_call1(Stdlib[33],x),
       _tY_=caml_call2(Stdlib[28],_tX_,cst$40),
       _tZ_=caml_call2(Stdlib[28],cst_Cannot_invert,_tY_);
      return caml_call1(Stdlib[2],_tZ_)}
    var Int$1=[0,eq$8,add$4,zero$4,neg$4,mul$4,one$2,to_string$8,inv$1];
    function Fractions(R)
     {function gcd(a,b)
       {var a$0=a,b$0=b;
        for(;;)
         {if(caml_call2(R[1],R[3],b$0))return a$0;
          var _tW_=caml_call2(R[8],a$0,b$0)[2],a$0=b$0,b$0=_tW_;
          continue}}
      function canonize(param)
       {var
         b=param[2],
         a=param[1],
         d=gcd(a,b),
         match=caml_call2(R[8],a,d),
         a$0=match[1],
         match$0=caml_call2(R[8],a$0,d),
         b$0=match$0[1];
        return [0,a$0,b$0]}
      function eq(param,_tP_)
       {var
         d=_tP_[2],
         c=_tP_[1],
         b=param[2],
         a=param[1],
         match=canonize([0,a,b]),
         b$0=match[2],
         a$0=match[1],
         match$0=canonize([0,c,d]),
         d$0=match$0[2],
         c$0=match$0[1],
         _tQ_=caml_call2(R[1],a$0,c$0),
         _tR_=_tQ_?caml_call2(R[1],b$0,d$0):_tQ_;
        if(_tR_)
         var _tS_=_tR_;
        else
         {var _tT_=caml_call1(R[4],a$0),_tU_=caml_call2(R[1],_tT_,c$0);
          if(_tU_)
           {var _tV_=caml_call1(R[4],b$0);return caml_call2(R[1],_tV_,d$0)}
          var _tS_=_tU_}
        return _tS_}
      function add(param,_tL_)
       {var
         d=_tL_[2],
         c=_tL_[1],
         b=param[2],
         a=param[1],
         _tM_=caml_call2(R[5],c,d),
         _tN_=caml_call2(R[5],b,c),
         _tO_=caml_call2(R[5],a,d);
        return [0,caml_call2(R[2],_tO_,_tN_),_tM_]}
      var zero=[0,R[3],R[6]];
      function neg(param)
       {var b=param[2],a=param[1];return [0,caml_call1(R[4],a),b]}
      function mul(param,_tJ_)
       {var d=_tJ_[2],c=_tJ_[1],a=param[1],_tK_=caml_call2(R[5],c,d);
        return [0,caml_call2(R[5],a,c),_tK_]}
      var one=[0,R[6],R[6]];
      function inv(param){var b=param[2],a=param[1];return [0,b,a]}
      function to_string(param)
       {var
         b=param[2],
         a=param[1],
         _tE_=caml_call1(R[7],b),
         _tF_=caml_call2(Stdlib[28],_tE_,cst$41),
         _tG_=caml_call2(Stdlib[28],cst$42,_tF_),
         _tH_=caml_call1(R[7],a),
         _tI_=caml_call2(Stdlib[28],_tH_,_tG_);
        return caml_call2(Stdlib[28],cst$43,_tI_)}
      return [0,gcd,canonize,eq,add,zero,neg,mul,one,inv,to_string]}
    function FractionsField(_tC_)
     {var _tD_=Fractions(_tC_);
      return [0,
              _tD_[3],
              _tD_[4],
              _tD_[5],
              _tD_[6],
              _tD_[7],
              _tD_[8],
              _tD_[10],
              _tD_[9]]}
    function RationalFractions(F)
     {function Polynomial$0(F)
       {var
         include=Polynomial([0,F[1],F[2],F[3],F[4],F[5],F[6],F[7]]),
         degree=include[2],
         eq=include[3],
         add=include[7],
         zero=include[8],
         neg=include[10],
         sub=include[11],
         mul=include[12],
         one=include[13],
         to_string=include[14],
         monomial=include[15];
        function div(a,b)
         {var db=caml_call1(degree,b);
          if(0 <= db)
           {var q=[0,zero],r=[0,a],dr=[0,caml_call1(degree,r[1])];
            for(;;)
             {if(db <= dr[1])
               {var
                 _tw_=dr[1] - db | 0,
                 _tx_=caml_check_bound(b,db)[1 + db],
                 _ty_=caml_call1(F[8],_tx_),
                 _tz_=dr[1],
                 _tA_=caml_check_bound(r[1],_tz_)[1 + _tz_],
                 t=caml_call2(monomial,caml_call2(F[5],_tA_,_ty_),_tw_);
                q[1] = caml_call2(add,q[1],t);
                var _tB_=caml_call2(mul,t,b);
                r[1] = caml_call2(sub,r[1],_tB_);
                dr[1] = caml_call1(degree,r[1]);
                continue}
              return [0,q[1],r[1]]}}
          throw [0,Assert_failure,_c_]}
        return [0,eq,add,zero,neg,mul,one,to_string,div]}
      var
       include=Fractions(Polynomial$0(F)),
       gcd=include[1],
       canonize=include[2],
       eq=include[3],
       add=include[4],
       zero=include[5],
       neg=include[6],
       mul=include[7],
       one=include[8],
       inv=include[9],
       to_string=include[10];
      return [0,
              Polynomial$0,
              gcd,
              canonize,
              eq,
              add,
              zero,
              neg,
              mul,
              one,
              inv,
              to_string]}
    function RationalFractionsField(_tu_)
     {var _tv_=RationalFractions(_tu_);
      return [0,
              _tv_[4],
              _tv_[5],
              _tv_[6],
              _tv_[7],
              _tv_[8],
              _tv_[9],
              _tv_[11],
              _tv_[10]]}
    function Ring(F)
     {var
       eq=F[1],
       add=F[2],
       zero=F[3],
       neg=F[4],
       mul=F[5],
       one=F[6],
       to_string=F[7];
      return [0,eq,add,zero,neg,mul,one,to_string]}
    var
     Alg_Field=
      [0,
       Bool,
       Float,
       Int$1,
       Fractions,
       FractionsField,
       RationalFractions,
       RationalFractionsField,
       Ring];
    caml_register_global(307,Alg_Field,"Alg__Field");
    function ToAdditive(M)
     {if(M[7])
       {var eq=M[1],compare=M[6],add=M[2],zero=M[3],to_string=M[5];
        return [0,eq,compare,add,zero,to_string]}
      throw [0,Assert_failure,_d_]}
    function simple_pow(one,mul,u,n)
     {var ans=[0,one],_ts_=1;
      if(! (n < 1))
       {var for$0=_ts_;
        for(;;)
         {ans[1] = caml_call2(mul,ans[1],u);
          var _tt_=for$0 + 1 | 0;
          if(n !== for$0){var for$0=_tt_;continue}
          break}}
      return ans[1]}
    function Free(X)
     {var is_commutative=0;
      function mul(u,v){return caml_call2(Stdlib_Array[5],u,v)}
      var one=[0];
      function pow(u,n){return simple_pow(one,mul,u,n)}
      function inj(a){return [0,a]}
      function length(u){return u.length - 1}
      function sub(u,o,l){return caml_call3(Stdlib_Array[7],u,o,l)}
      function weq(u,v)
       {var ul=u.length - 1,vl=v.length - 1;
        if(ul !== vl)return 0;
        try
         {var _tm_=ul - 1 | 0,_tl_=0;
          if(! (_tm_ < 0))
           {var i=_tl_;
            for(;;)
             {var
               _to_=caml_check_bound(v,i)[1 + i],
               _tp_=caml_check_bound(u,i)[1 + i];
              if(1 - caml_call2(X[1],_tp_,_to_))throw Stdlib[3];
              var _tq_=i + 1 | 0;
              if(_tm_ !== i){var i=_tq_;continue}
              break}}
          var _tn_=1;
          return _tn_}
        catch(_tr_)
         {_tr_ = caml_wrap_exception(_tr_);
          if(_tr_ === Stdlib[3])return 0;
          throw _tr_}}
      function wc(u,v)
       {var ul=u.length - 1,vl=v.length - 1,ans=[0,0];
        try
         {var _tf_=caml_call2(Stdlib[16],ul,vl) - 1 | 0,_te_=0;
          if(! (_tf_ < 0))
           {var i=_te_;
            for(;;)
             {var
               _th_=caml_check_bound(v,i)[1 + i],
               _ti_=caml_check_bound(u,i)[1 + i],
               c=caml_call2(X[3],_ti_,_th_);
              if(0 !== c){ans[1] = c;throw Stdlib[3]}
              var _tj_=i + 1 | 0;
              if(_tf_ !== i){var i=_tj_;continue}
              break}}
          var _tg_=ul - vl | 0;
          return _tg_}
        catch(_tk_)
         {_tk_ = caml_wrap_exception(_tk_);
          if(_tk_ === Stdlib[3])return ans[1];
          throw _tk_}}
      function peq(u,uoff,v,voff,len)
       {try
         {var _s8_=len - 1 | 0,_s7_=0;
          if(! (_s8_ < 0))
           {var i=_s7_;
            for(;;)
             {var
               _s__=voff + i | 0,
               _ta_=uoff + i | 0,
               _s$_=caml_check_bound(v,_s__)[1 + _s__],
               _tb_=caml_check_bound(u,_ta_)[1 + _ta_];
              if(1 - caml_call2(X[1],_tb_,_s$_))throw Stdlib[3];
              var _tc_=i + 1 | 0;
              if(_s8_ !== i){var i=_tc_;continue}
              break}}
          var _s9_=1;
          return _s9_}
        catch(_td_)
         {_td_ = caml_wrap_exception(_td_);
          if(_td_ === Stdlib[3])return 0;
          throw _td_}}
      function to_string(u)
       {if(weq(one,u))return cst$44;
        var
         u$0=caml_call1(Stdlib_Array[11],u),
         u$1=caml_call2(List$0[19],X[2],u$0);
        return caml_call2(String$0[6],cst$45,u$1)}
      function Map(M)
       {var E=caml_call1(Stdlib_Map[1],[0,X[3]]);
        function of_list(l)
         {var _s6_=caml_call1(List$0[61],l);return caml_call1(E[40],_s6_)}
        function app(f,x){return caml_call2(E[28],x,f)}
        function bind(f,u)
         {var _s3_=M[3];
          function _s4_(y,x){var _s5_=app(f,x);return caml_call2(M[2],y,_s5_)}
          return caml_call3(Stdlib_Array[17],_s4_,_s3_,u)}
        return [0,E,of_list,app,bind]}
      function included(u,v)
       {var ul=u.length - 1,vl=v.length - 1;
        try
         {var _sZ_=vl - ul | 0,_sY_=0;
          if(! (_sZ_ < 0))
           {var i=_sY_;
            for(;;)
             {if(peq(u,0,v,i,ul))throw Stdlib[3];
              var _s1_=i + 1 | 0;
              if(_sZ_ !== i){var i=_s1_;continue}
              break}}
          var _s0_=0;
          return _s0_}
        catch(_s2_)
         {_s2_ = caml_wrap_exception(_s2_);
          if(_s2_ === Stdlib[3])return 1;
          throw _s2_}}
      function unifier(opt,u,v)
       {if(opt)var sth=opt[1],i=sth;else var i=0;
        var ul=u.length - 1,vl=v.length - 1,ans=[0,0];
        try
         {var _sV_=ul - 1 | 0;
          if(! (_sV_ < i))
           {var i$0=i;
            for(;;)
             {if(peq(u,i$0,v,0,caml_call2(Stdlib[16],ul - i$0 | 0,vl)))
               {ans[1] = [0,i$0];throw Stdlib[3]}
              var _sW_=i$0 + 1 | 0;
              if(_sV_ !== i$0){var i$0=_sW_;continue}
              break}}
          throw Stdlib[8]}
        catch(_sX_)
         {_sX_ = caml_wrap_exception(_sX_);
          if(_sX_ === Stdlib[3])
           {var _sU_=ans[1];
            if(_sU_){var ans$0=_sU_[1];return ans$0}
            throw [0,Assert_failure,_e_]}
          throw _sX_}}
      function ordered_unifiers(u,v)
       {var ans=[0,0],i=[0,0];
        try
         {for(;;)
           {var j=unifier([0,i[1]],u,v);
            ans[1] = [0,j,ans[1]];
            i[1] = j + 1 | 0;
            continue}}
        catch(_sT_)
         {_sT_ = caml_wrap_exception(_sT_);
          if(_sT_ === Stdlib[8])return ans[1];
          throw _sT_}}
      function ordered_unifiers_bicontext(u,v)
       {var lu=u.length - 1,lv=v.length - 1,l=ordered_unifiers(u,v);
        function _sQ_(i)
         {if((i + lv | 0) <= lu)
           {var _sR_=sub(u,i + lv | 0,lu - (i + lv | 0) | 0);
            return [0,[0,one,one],[0,sub(u,0,i),_sR_]]}
          var _sS_=[0,sub(u,0,i),one];
          return [0,[0,one,sub(v,lu - i | 0,lv - (lu - i | 0) | 0)],_sS_]}
        return caml_call2(List$0[19],_sQ_,l)}
      function unifiers_bicontext(u,v)
       {var
         l=ordered_unifiers_bicontext(u,v),
         l$0=ordered_unifiers_bicontext(v,u);
        function _sP_(param){var d=param[2],c=param[1];return [0,d,c]}
        var l$1=caml_call2(List$0[19],_sP_,l$0);
        return caml_call2(Stdlib[37],l,l$1)}
      function lexicographic(leq,u,v)
       {var ul=u.length - 1,vl=v.length - 1,ans=[0,1];
        try
         {var _sI_=caml_call2(Stdlib[16],ul,vl) - 1 | 0,_sH_=0;
          if(! (_sI_ < 0))
           {var i=_sH_;
            for(;;)
             {var _sK_=caml_check_bound(v,i)[1 + i];
              if(! caml_call2(leq,caml_check_bound(u,i)[1 + i],_sK_))
               {ans[1] = 0;throw Stdlib[3]}
              var
               _sL_=caml_check_bound(v,i)[1 + i],
               _sM_=caml_check_bound(u,i)[1 + i];
              if(1 - caml_call2(X[1],_sM_,_sL_))throw Stdlib[3];
              var _sN_=i + 1 | 0;
              if(_sI_ !== i){var i=_sN_;continue}
              break}}
          var _sJ_=ul <= vl?1:0;
          return _sJ_}
        catch(_sO_)
         {_sO_ = caml_wrap_exception(_sO_);
          if(_sO_ === Stdlib[3])return ans[1];
          throw _sO_}}
      function deglex(leq,u,v)
       {var ul=u.length - 1,vl=v.length - 1;
        return ul < vl?1:vl < ul?0:lexicographic(leq,u,v)}
      var Order=[0,lexicographic,deglex],empty=0;
      function singleton(a){return [0,[0,a],0]}
      function singletons(l){return caml_call2(List$0[19],singleton,l)}
      function hd(l){return caml_call1(List$0[5],l)}
      function tl(l){return caml_call1(List$0[6],l)}
      function eq(c,d)
       {var c$0=c,d$0=d;
        for(;;)
         {if(c$0)
           {if(d$0)
             {var d$1=d$0[2],v=d$0[1],c$1=c$0[2],u=c$0[1],_sG_=weq(u,v);
              if(_sG_){var c$0=c$1,d$0=d$1;continue}
              return _sG_}
            return 0}
          return d$0?0:1}}
      function compare(c,d)
       {var c$0=c,d$0=d;
        for(;;)
         {if(c$0)
           {if(d$0)
             {var d$1=d$0[2],v=d$0[1],c$1=c$0[2],u=c$0[1],cmp=wc(u,v);
              if(0 === cmp){var c$0=c$1,d$0=d$1;continue}
              return cmp}
            return 1}
          return d$0?-1:0}}
      function extend(l,cc)
       {function _sx_(c$0)
         {if(c$0)
           {var _sz_=c$0[1],len=_sz_.length - 1;
            if(len)
             {var
               c=c$0[2],
               ul=_sz_.length - 1,
               ans=[0,0],
               f=
                function(l1,v,l2)
                 {var
                   vl=v.length - 1,
                   _sA_=caml_call2(Stdlib[17],ul - vl | 0,0),
                   _sB_=ul - 1 | 0;
                  if(! (_sB_ < _sA_))
                   {var i=_sA_;
                    for(;;)
                     {try
                       {if(1 - peq(_sz_,i,v,0,ul - i | 0))throw Stdlib[3];
                        var
                         i$0=ul - i | 0,
                         v$0=sub(v,i$0,vl - i$0 | 0),
                         w=mul(_sz_,v$0),
                         f$0=
                          function(w)
                           {function f(u)
                             {var _sF_=included(u,w);if(_sF_)throw Stdlib[3];return _sF_}
                            return f},
                         f=f$0(w);
                        caml_call2(List$0[17],f,l1);
                        caml_call2(List$0[17],f,l2);
                        if(included(v,sub(w,0,w.length - 1 - 1 | 0)))
                         throw Stdlib[3];
                        ans[1] = [0,[0,v$0,[0,_sz_,c]],ans[1]]}
                      catch(_sE_)
                       {_sE_ = caml_wrap_exception(_sE_);
                        if(_sE_ !== Stdlib[3])throw _sE_;
                        var _sD_=_sE_}
                      var _sC_=i + 1 | 0;
                      if(_sB_ !== i){var i=_sC_;continue}
                      break}}
                  return 0},
               h=0,
               param=l;
              for(;;)
               {if(param)
                 {var t=param[2],x=param[1];
                  f(h,x,t);
                  var h$0=[0,x,h],h=h$0,param=t;
                  continue}
                return ans[1]}}}
          throw [0,Assert_failure,_f_]}
        var _sy_=caml_call2(List$0[19],_sx_,cc);
        return caml_call1(List$0[13],_sy_)}
      function eval$0(l)
       {var _sw_=caml_call1(List$0[9],l);
        return caml_call3(List$0[25],mul,one,_sw_)}
      function length$0(l){return caml_call1(List$0[1],l)}
      function to_string$0(c)
       {var
         _ss_=caml_call1(List$0[9],c),
         _st_=caml_call2(List$0[19],to_string,_ss_),
         _su_=caml_call2(String$0[6],cst$47,_st_),
         _sv_=caml_call2(Stdlib[28],_su_,cst$46);
        return caml_call2(Stdlib[28],cst$48,_sv_)}
      var
       Anick=
        [0,
         empty,
         singleton,
         singletons,
         hd,
         tl,
         weq,
         eq,
         compare,
         extend,
         eval$0,
         length$0,
         to_string$0];
      return [0,
              is_commutative,
              mul,
              one,
              pow,
              inj,
              length,
              sub,
              weq,
              wc,
              peq,
              to_string,
              Map,
              included,
              unifier,
              ordered_unifiers,
              ordered_unifiers_bicontext,
              unifiers_bicontext,
              Order,
              Anick]}
    function FreeMonoid(_sq_)
     {var _sr_=Free(_sq_);
      return [0,_sr_[8],_sr_[2],_sr_[3],_sr_[4],_sr_[11],_sr_[9],_sr_[1]]}
    function Pres(X)
     {var W=Free(X);
      function make(generators,rules){return [0,generators,rules]}
      function orient(leq,pres)
       {var _so_=pres[2];
        function _sp_(param)
         {var v=param[2],u=param[1];
          return caml_call2(leq,v,u)?[0,u,v]:[0,v,u]}
        var rules=caml_call2(List$0[19],_sp_,_so_);
        return [0,pres[1],rules]}
      function normalize(pres,u)
       {try
         {var
           _sg_=pres[2],
           _sh_=function(param){var v=param[1];return caml_call2(W[13],v,u)},
           match=caml_call2(List$0[38],_sh_,_sg_),
           v=match[1],
           i=caml_call3(W[14],0,u,v),
           v1=caml_call3(W[7],u,0,i),
           _si_=i + caml_call1(W[6],v) | 0,
           _sj_=caml_call1(W[6],u) - _si_ | 0,
           _sk_=i + caml_call1(W[6],v) | 0,
           v2=caml_call3(W[7],u,_sk_,_sj_),
           _sl_=caml_call2(W[2],v,v2),
           _sm_=normalize(pres,caml_call2(W[2],v1,_sl_));
          return _sm_}
        catch(_sn_)
         {_sn_ = caml_wrap_exception(_sn_);
          if(_sn_ === Stdlib[8])return u;
          throw _sn_}}
      function add_rule(pres,param)
       {var v=param[2],u=param[1];return [0,pres[1],[0,[0,u,v],pres[2]]]}
      function reduce(pres)
       {var _sd_=pres[2];
        function _se_(param)
         {var v=param[2],u=param[1];return [0,u,normalize(pres,v)]}
        var param=caml_call2(List$0[19],_se_,_sd_),h=0,param$0=param;
        for(;;)
         {if(param$0)
           {var
             t=param$0[2],
             match=param$0[1],
             v=match[2],
             u=match[1],
             f$0=
              function(u)
               {function f(l)
                 {function _sf_(param)
                   {var u$0=param[1];return caml_call2(W[13],u$0,u)}
                  return caml_call2(List$0[33],_sf_,l)}
                return f},
             f=f$0(u);
            if(! f(h) && ! f(t))
             {var h$0=[0,[0,u,v],h],h=h$0,param$0=t;continue}
            var param$0=t;
            continue}
          var rules=caml_call1(List$0[9],h);
          return [0,pres[1],rules]}}
      function complete(leq,pres)
       {var
         pres$0=orient(leq,pres),
         pres$1=reduce(pres$0),
         todo=caml_call1(Stdlib_Queue[2],0),
         _r6_=pres$1[2];
        function _r7_(r){return caml_call2(Stdlib_Queue[3],r,todo)}
        caml_call2(List$0[17],_r7_,_r6_);
        var pres$2=[0,pres$1];
        for(;;)
         {if(caml_call1(Stdlib_Queue[13],todo))return pres$2[1];
          var
           match=caml_call1(Stdlib_Queue[7],todo),
           u=match[2],
           u$0=match[1],
           _r8_=pres$2[1][2],
           _r9_=
            function(u,u$0)
              {return function(param)
                {var v=param[2],v$0=param[1],_r__=caml_call2(W[17],u$0,v$0);
                 function _r$_(param)
                  {var
                    _sa_=param[2],
                    v2=_sa_[2],
                    v1=_sa_[1],
                    match=param[1],
                    u2=match[2],
                    u1=match[1],
                    _sb_=caml_call2(W[2],u,u2),
                    v$1=caml_call2(W[2],u1,_sb_),
                    _sc_=caml_call2(W[2],v,v2),
                    u$1=caml_call2(W[2],v1,_sc_);
                   if(caml_call2(leq,u$1,v$1))
                    var v$0=u$1,u$0=v$1;
                   else
                    var v$0=v$1,u$0=u$1;
                   pres$2[1] = add_rule(pres$2[1],[0,u$0,v$0]);
                   return caml_call2(Stdlib_Queue[4],[0,u$0,v$0],todo)}
                 return caml_call2(List$0[17],_r$_,_r__)}}
             (u,u$0);
          caml_call2(List$0[17],_r9_,_r8_);
          continue}}
      function Make(_rZ_)
       {var _r0_=_rZ_[1];
        function nf(_r5_){return normalize(_r0_,_r5_)}
        var mul=W[2],one=W[3],pow=W[4],to_string=W[11],is_commutative=0;
        function compare(u,v)
         {var _r3_=nf(v),_r4_=nf(u);return caml_call2(W[9],_r4_,_r3_)}
        function eq(u,v)
         {var _r1_=nf(v),_r2_=nf(u);return caml_call2(W[8],_r2_,_r1_)}
        return [0,eq,mul,one,pow,to_string,compare,is_commutative]}
      return [0,W,make,orient,normalize,add_rule,reduce,complete,Make]}
    function Generate(X)
     {var Pres$0=Pres(X);
      function intset(n)
       {function aux(k){return n <= k?0:[0,k,aux(k + 1 | 0)]}return aux(0)}
      return [0,Pres$0,intset]}
    function Multisets(X)
     {var is_commutative=1;
      function to_string(u)
       {function _rV_(s,param)
         {var n=param[2],x=param[1];
          if(0 === n)return s;
          if(1 === n)
           var n$0=cst$50;
          else
           var
            _rY_=caml_call1(Stdlib[33],n),
            n$0=caml_call1(String$0[70],_rY_);
          var _rW_=caml_call1(X[2],x),_rX_=caml_call2(Stdlib[28],_rW_,n$0);
          return caml_call2(Stdlib[28],s,_rX_)}
        return caml_call3(List$0[25],_rV_,cst$49,u)}
      var empty=0;
      function union(d$0,d)
       {var _rU_=caml_call2(Stdlib[37],d$0,d);
        return caml_call1(caml_call1(List$0[59],X[3]),_rU_)}
      var Domain=[0,empty,union];
      function domain(u)
       {function _rT_(param){var n=param[2],x=param[1];return 0 < n?[0,x]:0}
        return caml_call2(List$0[22],_rT_,u)}
      function occurrences(x,u)
       {var match=caml_call2(List$0[47],x,u);
        if(match){var n=match[1];return n}
        return 0}
      var one=0;
      function mul(u,v)
       {var _rP_=domain(v),_rQ_=domain(u),d=caml_call2(Domain[2],_rQ_,_rP_);
        function _rR_(x)
         {var _rS_=occurrences(x,v);return [0,x,occurrences(x,u) + _rS_ | 0]}
        return caml_call2(List$0[19],_rR_,d)}
      function pow(u,n)
       {function _rO_(param)
         {var m=param[2],x=param[1];return [0,x,caml_mul(m,n)]}
        return caml_call2(List$0[19],_rO_,u)}
      function included(u,v)
       {function _rN_(param)
         {var n=param[2],x=param[1];return n <= occurrences(x,v)?1:0}
        return caml_call2(List$0[32],_rN_,u)}
      function eq(u,v){var _rM_=included(u,v);return _rM_?included(v,u):_rM_}
      function normalize(u)
       {function _rJ_(param){var n=param[2];return 0 !== n?1:0}
        var u$0=caml_call2(List$0[41],_rJ_,u);
        function _rK_(param,_rL_)
         {var
           m=_rL_[2],
           y=_rL_[1],
           n=param[2],
           x=param[1],
           c=caml_call2(X[3],x,y);
          return 0 === c?n - m | 0:c}
        return caml_call2(List$0[56],_rK_,u$0)}
      function compare(u,v)
       {var u$0=normalize(u),v$0=normalize(v),u$1=u$0,v$1=v$0;
        for(;;)
         {if(u$1)
           {var _rG_=u$1[1],_rF_=u$1[2],_rH_=_rG_[2],_rI_=_rG_[1];
            if(v$1)
             {var
               v$2=v$1[2],
               match=v$1[1],
               m=match[2],
               y=match[1],
               c=caml_call2(X[3],_rI_,y);
              if(0 === c)
               {var c$0=_rH_ - m | 0;
                if(0 === c$0){var u$1=_rF_,v$1=v$2;continue}
                return c$0}
              return c}
            return 1}
          return v$1?-1:0}}
      function inj(x){return [0,[0,x,1],0]}
      function cmul(n,u)
       {function _rE_(param)
         {var m=param[2],x=param[1];return [0,x,caml_mul(m,n)]}
        return caml_call2(List$0[19],_rE_,u)}
      function Map(M)
       {if(M[7])
         {var
           E=caml_call1(Stdlib_Map[1],[0,X[3]]),
           of_list=
            function(l)
             {var _rD_=caml_call1(List$0[61],l);return caml_call1(E[40],_rD_)},
           app=function(f,x){return caml_call2(E[28],x,f)},
           bind=
            function(f,u)
             {var _rz_=M[3];
              function _rA_(v,param)
               {var
                 n=param[2],
                 x=param[1],
                 _rB_=app(f,x),
                 _rC_=caml_call2(M[4],_rB_,n);
                return caml_call2(M[2],v,_rC_)}
              return caml_call3(List$0[25],_rA_,_rz_,u)};
          return [0,E,of_list,app,bind]}
        throw [0,Assert_failure,_g_]}
      return [0,
              is_commutative,
              to_string,
              Domain,
              domain,
              occurrences,
              one,
              mul,
              pow,
              included,
              eq,
              normalize,
              compare,
              inj,
              cmul,
              Map]}
    function MultisetsMonoid(_rx_)
     {var _ry_=Multisets(_rx_);
      return [0,_ry_[10],_ry_[7],_ry_[6],_ry_[8],_ry_[2],_ry_[12],_ry_[1]]}
    function Alphabet(M)
     {var eq=M[1],to_string=M[5],compare=M[6];return [0,eq,to_string,compare]}
    var
     Alg_Monoid=
      [0,
       ToAdditive,
       simple_pow,
       Free,
       FreeMonoid,
       Pres,
       Generate,
       Multisets,
       MultisetsMonoid,
       Alphabet];
    caml_register_global(309,Alg_Monoid,"Alg__Monoid");
    var Alg_Group=[0];
    caml_register_global(310,Alg_Group,"Alg__Group");
    function Make(R)
     {function zero(r,c)
       {function _rw_(param){return caml_make_vect(c,R[3])}
        return caml_call2(Stdlib_Array[2],r,_rw_)}
      function init(r,c,f)
       {function _ru_(i)
         {function _rv_(j){return caml_call2(f,i,j)}
          return caml_call2(Stdlib_Array[2],c,_rv_)}
        return caml_call2(Stdlib_Array[2],r,_ru_)}
      function rows(m){return m.length - 1}
      function cols(m){return caml_check_bound(m,0)[1].length - 1}
      function get(m,i,j)
       {return caml_check_bound(caml_check_bound(m,i)[1 + i],j)[1 + j]}
      function to_string(m)
       {var ans=[0,cst$51],_rn_=m.length - 1 - 1 | 0,_rm_=0;
        if(! (_rn_ < 0))
         {var i=_rm_;
          for(;;)
           {var _rp_=cols(m) - 1 | 0,_ro_=0;
            if(! (_rp_ < 0))
             {var j=_ro_;
              for(;;)
               {if(0 !== j)ans[1] = caml_call2(Stdlib[28],ans[1],cst$53);
                var
                 _rr_=caml_check_bound(caml_check_bound(m,i)[1 + i],j)[1 + j],
                 _rs_=caml_call1(R[7],_rr_);
                ans[1] = caml_call2(Stdlib[28],ans[1],_rs_);
                var _rt_=j + 1 | 0;
                if(_rp_ !== j){var j=_rt_;continue}
                break}}
            ans[1] = caml_call2(Stdlib[28],ans[1],cst$52);
            var _rq_=i + 1 | 0;
            if(_rn_ !== i){var i=_rq_;continue}
            break}}
        return ans[1]}
      function is_zero(m,i)
       {var _rk_=caml_check_bound(m,i)[1 + i],_rl_=caml_call1(R[1],R[3]);
        return caml_call2(Stdlib_Array[22],_rl_,_rk_)}
      function replace(m,i,mi)
       {function _rj_(k){return k === i?mi:caml_check_bound(m,k)[1 + k]}
        return caml_call2(Stdlib_Array[2],m.length - 1,_rj_)}
      function exchange(m,i,j)
       {function _ri_(k)
         {return k === i
                  ?caml_check_bound(m,j)[1 + j]
                  :k === j
                    ?caml_check_bound(m,i)[1 + i]
                    :caml_check_bound(m,k)[1 + k]}
        return caml_call2(Stdlib_Array[2],m.length - 1,_ri_)}
      function mult(m,q,i)
       {if(caml_call2(R[1],R[3],q))throw [0,Assert_failure,_h_];
        function _rf_(k)
         {var _rh_=caml_check_bound(caml_check_bound(m,i)[1 + i],k)[1 + k];
          return caml_call2(R[5],q,_rh_)}
        var _rg_=cols(m),mi=caml_call2(Stdlib_Array[2],_rg_,_rf_);
        return replace(m,i,mi)}
      function madd(m,i,q,j)
       {if(i !== j)
         {var
           _ra_=
            function(k)
             {var
               _rc_=caml_check_bound(caml_check_bound(m,j)[1 + j],k)[1 + k],
               _rd_=caml_call2(R[5],q,_rc_),
               _re_=caml_check_bound(caml_check_bound(m,i)[1 + i],k)[1 + k];
              return caml_call2(R[2],_re_,_rd_)},
           _rb_=cols(m),
           mi=caml_call2(Stdlib_Array[2],_rb_,_ra_);
          return replace(m,i,mi)}
        throw [0,Assert_failure,_i_]}
      var Row=[0,is_zero,replace,exchange,mult,madd];
      function row_echelon(m)
       {var m$0=[0,m],ip=[0,0],cols$0=0 === m$0[1].length - 1?0:cols(m$0[1]);
        try
         {var _qV_=cols$0 - 1 | 0,_qU_=0;
          if(! (_qV_ < 0))
           {var j=_qU_;
            for(;;)
             {if(m$0[1].length - 1 <= ip[1])throw Stdlib[3];
              var
               _qX_=ip[1],
               _qY_=
                caml_check_bound(caml_check_bound(m$0[1],_qX_)[1 + _qX_],j)
                 [1 + j];
              if(caml_call2(R[1],R[3],_qY_))
               try
                {var _q5_=ip[1] + 1 | 0,_q6_=m$0[1].length - 1 - 1 | 0;
                 if(! (_q6_ < _q5_))
                  {var i$0=_q5_;
                   for(;;)
                    {var
                      _q7_=
                       caml_check_bound(caml_check_bound(m$0[1],i$0)[1 + i$0],j)
                        [1 + j];
                     if(1 - caml_call2(R[1],R[3],_q7_))
                      {m$0[1] = caml_call3(Row[3],m$0[1],ip[1],i$0);
                       throw Stdlib[3]}
                     var _q8_=i$0 + 1 | 0;
                     if(_q6_ !== i$0){var i$0=_q8_;continue}
                     break}}}
               catch(_q$_)
                {_q$_ = caml_wrap_exception(_q$_);
                 if(_q$_ !== Stdlib[3])throw _q$_;
                 var _q9_=_q$_}
              var
               _qZ_=ip[1],
               a=
                caml_check_bound(caml_check_bound(m$0[1],_qZ_)[1 + _qZ_],j)
                 [1 + j];
              if(1 - caml_call2(R[1],R[3],a))
               {var _q0_=ip[1] + 1 | 0,_q1_=m$0[1].length - 1 - 1 | 0;
                if(! (_q1_ < _q0_))
                 {var i=_q0_;
                  for(;;)
                   {var
                     b=
                      caml_check_bound(caml_check_bound(m$0[1],i)[1 + i],j)[1 + j];
                    if(1 - caml_call2(R[1],R[3],b))
                     {var _q3_=caml_call1(R[4],a);
                      m$0[1] = caml_call3(Row[4],m$0[1],_q3_,i);
                      m$0[1] = caml_call4(Row[5],m$0[1],i,b,ip[1])}
                    var _q4_=i + 1 | 0;
                    if(_q1_ !== i){var i=_q4_;continue}
                    break}}
                ip[1]++}
              var _q2_=j + 1 | 0;
              if(_qV_ !== j){var j=_q2_;continue}
              break}}
          var _qW_=m$0[1];
          return _qW_}
        catch(_q__)
         {_q__ = caml_wrap_exception(_q__);
          if(_q__ === Stdlib[3])return m$0[1];
          throw _q__}}
      function rank(m)
       {var m$0=row_echelon(m),n=[0,0];
        try
         {var _qQ_=m$0.length - 1 - 1 | 0,_qP_=0;
          if(! (_qQ_ < 0))
           {var i=_qP_;
            for(;;)
             {if(caml_call2(Row[1],m$0,i))throw Stdlib[3];
              n[1]++;
              var _qS_=i + 1 | 0;
              if(_qQ_ !== i){var i=_qS_;continue}
              break}}
          var _qR_=n[1];
          return _qR_}
        catch(_qT_)
         {_qT_ = caml_wrap_exception(_qT_);
          if(_qT_ === Stdlib[3])return n[1];
          throw _qT_}}
      function nullity(m){return m.length - 1 - rank(m) | 0}
      function Labeled(X)
       {var
         include=caml_call1(Stdlib_Map[1],[0,X[3]]),
         empty=include[1],
         is_empty=include[2],
         mem=include[3],
         add=include[4],
         update=include[5],
         singleton=include[6],
         remove=include[7],
         merge=include[8],
         union=include[9],
         compare=include[10],
         equal=include[11],
         iter=include[12],
         fold=include[13],
         for_all=include[14],
         exists=include[15],
         filter=include[16],
         filter_map=include[17],
         partition=include[18],
         cardinal=include[19],
         bindings=include[20],
         min_binding=include[21],
         min_binding_opt=include[22],
         max_binding=include[23],
         max_binding_opt=include[24],
         choose=include[25],
         choose_opt=include[26],
         split=include[27],
         find=include[28],
         find_opt=include[29],
         find_first=include[30],
         find_first_opt=include[31],
         find_last=include[32],
         find_last_opt=include[33],
         map=include[34],
         mapi=include[35],
         to_seq=include[36],
         to_rev_seq=include[37],
         to_seq_from=include[38],
         add_seq=include[39],
         of_seq=include[40];
        function of_array(a)
         {var ans=[0,empty],_qM_=a.length - 1 - 1 | 0,_qL_=0;
          if(! (_qM_ < 0))
           {var i=_qL_;
            for(;;)
             {var _qN_=ans[1];
              ans[1] = caml_call3(add,caml_check_bound(a,i)[1 + i],i,_qN_);
              var _qO_=i + 1 | 0;
              if(_qM_ !== i){var i=_qO_;continue}
              break}}
          return ans[1]}
        var
         L=
          [0,
           empty,
           is_empty,
           mem,
           add,
           update,
           singleton,
           remove,
           merge,
           union,
           compare,
           equal,
           fold,
           for_all,
           exists,
           filter,
           filter_map,
           partition,
           cardinal,
           bindings,
           min_binding,
           min_binding_opt,
           max_binding,
           max_binding_opt,
           choose,
           choose_opt,
           split,
           find_opt,
           find_first,
           find_first_opt,
           find_last,
           find_last_opt,
           map,
           mapi,
           to_seq,
           to_rev_seq,
           to_seq_from,
           add_seq,
           of_seq,
           find,
           iter,
           of_array];
        function matrix(param){var m=param[3];return m}
        function zero$0(rows,cols)
         {var
           m=zero(rows.length - 1,cols.length - 1),
           _qK_=caml_call1(L[41],cols);
          return [0,caml_call1(L[41],rows),_qK_,m]}
        function set(param,i,j,x)
         {var
           m=param[3],
           c=param[2],
           r=param[1],
           i$0=caml_call2(L[39],i,r),
           j$0=caml_call2(L[39],j,c);
          caml_check_bound(caml_check_bound(m,i$0)[1 + i$0],j$0)[1 + j$0] = x;
          return 0}
        function get(param,i,j)
         {var
           m=param[3],
           c=param[2],
           r=param[1],
           i$0=caml_call2(L[39],i,r),
           j$0=caml_call2(L[39],j,c);
          return caml_check_bound(caml_check_bound(m,i$0)[1 + i$0],j$0)
                  [1 + j$0]}
        function rank$0(param){var m=param[3];return rank(m)}
        function nullity$0(param){var m=param[3];return nullity(m)}
        function iter_src(f,param)
         {var r=param[1];
          function _qJ_(x,param){return caml_call1(f,x)}
          return caml_call2(L[40],_qJ_,r)}
        function iter_tgt(f,param)
         {var c=param[2];
          function _qI_(x,param){return caml_call1(f,x)}
          return caml_call2(L[40],_qI_,c)}
        function iter$0(f,m)
         {return iter_src
                  (function(x)
                    {return iter_tgt(function(y){return caml_call2(f,x,y)},m)},
                   m)}
        return [0,
                L,
                matrix,
                zero$0,
                set,
                get,
                rank$0,
                nullity$0,
                iter_src,
                iter_tgt,
                iter$0]}
      return [0,
              zero,
              init,
              rows,
              cols,
              get,
              to_string,
              Row,
              row_echelon,
              rank,
              nullity,
              Labeled]}
    function Functor(R$0,R)
     {var M=Make(R$0),M$0=Make(R);
      function map(f,m)
       {var r=caml_call1(M[3],m),c=0 === r?0:caml_call1(M[4],m);
        function _qH_(i,j){return caml_call1(f,caml_call3(M[5],m,i,j))}
        return caml_call3(M$0[2],r,c,_qH_)}
      function Labeled(X$0,X)
       {var L=caml_call1(M[11],X$0),L$0=caml_call1(M$0[11],X);
        function map$0(s,t,f,m)
         {var m$0=m[3],c=m[2],r=m[1];
          function lmap(f,l)
           {var _qE_=L$0[1][1];
            function _qF_(x,i,l)
             {var _qG_=caml_call1(f,x);return caml_call3(L$0[1][4],_qG_,i,l)}
            return caml_call3(L[1][12],_qF_,l,_qE_)}
          var r$0=lmap(s,r),c$0=lmap(t,c),m$1=map(f,m$0);
          return [0,r$0,c$0,m$1]}
        return [0,L,L$0,map$0]}
      return [0,M,M$0,map,Labeled]}
    var Alg_Matrix=[0,Make,Functor];
    caml_register_global(311,Alg_Matrix,"Alg__Matrix");
    function FreeLeft(R,X)
     {var
       include=caml_call1(Stdlib_Map[1],[0,X[3]]),
       empty=include[1],
       is_empty=include[2],
       mem=include[3],
       update=include[5],
       singleton=include[6],
       remove=include[7],
       merge=include[8],
       union=include[9],
       compare=include[10],
       equal=include[11],
       iter=include[12],
       fold=include[13],
       for_all=include[14],
       exists=include[15],
       filter=include[16],
       filter_map=include[17],
       partition=include[18],
       cardinal=include[19],
       bindings=include[20],
       min_binding=include[21],
       min_binding_opt=include[22],
       max_binding=include[23],
       max_binding_opt=include[24],
       choose=include[25],
       choose_opt=include[26],
       split=include[27],
       find=include[28],
       find_opt=include[29],
       find_first=include[30],
       find_first_opt=include[31],
       find_last=include[32],
       find_last_opt=include[33],
       map=include[34],
       mapi=include[35],
       to_seq=include[36],
       to_rev_seq=include[37],
       to_seq_from=include[38],
       add_seq=include[39],
       of_seq=include[40],
       _pr_=include[4];
      function add(x,a,p)
       {return caml_call2(R[1],R[3],a)
                ?caml_call2(remove,x,p)
                :caml_call3(_pr_,x,a,p)}
      var
       E=
        [0,
         empty,
         is_empty,
         mem,
         update,
         singleton,
         remove,
         merge,
         union,
         compare,
         equal,
         iter,
         fold,
         for_all,
         exists,
         filter,
         filter_map,
         partition,
         cardinal,
         bindings,
         min_binding,
         min_binding_opt,
         max_binding,
         max_binding_opt,
         choose,
         choose_opt,
         split,
         find,
         find_opt,
         find_first,
         find_first_opt,
         find_last,
         find_last_opt,
         map,
         mapi,
         to_seq,
         to_rev_seq,
         to_seq_from,
         add_seq,
         of_seq,
         add],
       zero=E[1];
      function cinj(a,x){return caml_call3(E[40],x,a,zero)}
      function inj(x){return cinj(R[6],x)}
      function coeff(p,x)
       {try
         {var _qC_=caml_call2(E[27],x,p);return _qC_}
        catch(_qD_)
         {_qD_ = caml_wrap_exception(_qD_);
          if(_qD_ === Stdlib[8])return R[3];
          throw _qD_}}
      function included(x,y)
       {function _qB_(u,a){return caml_equal(coeff(y,u),a)}
        return caml_call2(E[13],_qB_,x)}
      function eq(x,y){var _qA_=included(x,y);return _qA_?included(y,x):_qA_}
      function compare$0(param,_qz_)
       {return caml_call1(Stdlib[2],cst_TODO_Module_FreeLeft_compa)}
      function add_monomial(p,a,x)
       {var _qy_=coeff(p,x),a$0=caml_call2(R[2],a,_qy_);
        return caml_call3(E[40],x,a$0,p)}
      function add$0(p,q)
       {function _qx_(x,a,p){return add_monomial(p,a,x)}
        return caml_call3(E[12],_qx_,q,p)}
      function cmul(a,x)
       {var _qw_=caml_call1(R[5],a);return caml_call2(E[33],_qw_,x)}
      function neg(x){return cmul(caml_call1(R[4],R[6]),x)}
      function sub(x,y){return add$0(x,neg(y))}
      function to_string(x)
       {if(eq(zero,x))return cst_0;
        var ans=[0,cst$54];
        function _qq_(u,a)
         {if(caml_string_notequal(ans[1],cst$55))
           ans[1] = caml_call2(Stdlib[28],ans[1],cst$56);
          if(caml_call2(R[1],a,R[6]))
           var a$0=cst$57;
          else
           var
            _qt_=caml_call2(Stdlib[28],cst$59,cst$58),
            _qu_=caml_call1(R[7],a),
            _qv_=caml_call2(Stdlib[28],_qu_,_qt_),
            a$0=caml_call2(Stdlib[28],cst$60,_qv_);
          var _qr_=caml_call1(X[2],u),_qs_=caml_call2(Stdlib[28],a$0,_qr_);
          ans[1] = caml_call2(Stdlib[28],ans[1],_qs_);
          return 0}
        caml_call2(E[11],_qq_,x);
        return ans[1]}
      function map$0(f,p)
       {function _qp_(x,a,q){return add$0(q,cmul(a,caml_call1(f,x)))}
        return caml_call3(E[12],_qp_,p,zero)}
      function iter$0(f,p)
       {function _qo_(x,a){return caml_call2(f,a,x)}
        return caml_call2(E[11],_qo_,p)}
      var E$0=caml_call1(Stdlib_Map[1],[0,X[3]]);
      function set(f,x,p){return caml_call3(E$0[4],x,p,f)}
      function app(f,x)
       {try
         {var _qm_=caml_call2(E$0[28],x,f);return _qm_}
        catch(_qn_)
         {_qn_ = caml_wrap_exception(_qn_);
          if(_qn_ === Stdlib[8])return zero;
          throw _qn_}}
      function bind(f,p)
       {function _ql_(x,a,q){return add$0(q,cmul(a,app(f,x)))}
        return caml_call3(E$0[13],_ql_,p,zero)}
      var zero$0=E$0[1];
      function to_string$0(f)
       {function _qf_(x,p,s)
         {var
           _qg_=to_string(p),
           _qh_=caml_call2(Stdlib[28],_qg_,cst$62),
           _qi_=caml_call2(Stdlib[28],cst$63,_qh_),
           _qj_=caml_call1(X[2],x),
           _qk_=caml_call2(Stdlib[28],_qj_,_qi_);
          return caml_call2(Stdlib[28],s,_qk_)}
        return caml_call3(E$0[13],_qf_,f,cst$61)}
      var Map=[0,E$0,set,app,bind,zero$0,to_string$0];
      function make(gen){return gen}
      function dim(pres){return pres.length - 1}
      function presentation_to_string(pres)
       {var ans=[0,cst$64];
        function _qb_(x)
         {var
           _qc_=caml_call1(X[2],x),
           _qd_=caml_string_equal(ans[1],cst$65)?cst$66:cst$67,
           _qe_=caml_call2(Stdlib[28],_qd_,_qc_);
          ans[1] = caml_call2(Stdlib[28],ans[1],_qe_);
          return 0}
        caml_call2(Stdlib_Array[13],_qb_,pres);
        return ans[1]}
      var M=Make(R),L=caml_call1(M[11],X);
      function app$0(f,p)
       {return map$0
                (function(x)
                  {var ans=[0,zero];
                   function _p$_(y)
                    {var _qa_=cinj(caml_call3(L[5],f,x,y),y);
                     ans[1] = add$0(ans[1],_qa_);
                     return 0}
                   caml_call2(L[9],_p$_,f);
                   return ans[1]},
                 p)}
      function zero$1(src,tgt){return caml_call2(L[3],src,tgt)}
      function of_map(f,src,tgt)
       {var ans=zero$1(src,tgt);
        function _p8_(x)
         {var p=caml_call2(Map[3],f,x);
          return iter$0
                  (function(a,y)
                    {var
                      _p9_=caml_call3(L[5],ans,x,y),
                      _p__=caml_call2(R[2],_p9_,a);
                     return caml_call4(L[4],ans,x,y,_p__)},
                   p)}
        caml_call2(Stdlib_Array[13],_p8_,src);
        return ans}
      function to_map(f)
       {var ans=[0,Map[5]];
        function _p5_(x,y)
         {var
           _p6_=cinj(caml_call3(L[5],f,x,y),y),
           _p7_=add$0(caml_call2(Map[3],ans[1],x),_p6_);
          ans[1] = caml_call3(Map[2],ans[1],x,_p7_);
          return 0}
        caml_call2(L[10],_p5_,f);
        return ans[1]}
      var rank=L[6],nullity=L[7];
      function to_string$1(f)
       {var _p4_=to_map(f);return caml_call1(Map[6],_p4_)}
      var Map$0=[0,M,L,app$0,zero$1,of_map,to_map,rank,nullity,to_string$1];
      function iter$1(f,pres){return caml_call2(Stdlib_Array[13],f,pres)}
      function modules(c){return c[1]}
      function maps(c){return c[2]}
      function length(c){return c[2].length - 1}
      function make$0(modules,d)
       {if(modules.length - 1 === (d.length - 1 + 1 | 0))return [0,modules,d];
        throw [0,Assert_failure,_j_]}
      function valid(c)
       {try
         {var _pH_=length(c) - 1 | 0,_pG_=1;
          if(! (_pH_ < 1))
           {var i=_pG_;
            for(;;)
             {var _pJ_=i + 1 | 0,_pK_=caml_check_bound(c[1],_pJ_)[1 + _pJ_];
              iter$1
               (function(i)
                  {return function(x)
                    {var
                      _pN_=inj(x),
                      _pO_=caml_check_bound(c[2],i)[1 + i],
                      _pQ_=i - 1 | 0,
                      _pP_=caml_call2(Map$0[3],_pO_,_pN_),
                      _pR_=caml_check_bound(c[2],_pQ_)[1 + _pQ_],
                      y=caml_call2(Map$0[3],_pR_,_pP_),
                      _pS_=1 - eq(zero,y);
                     if(_pS_)
                      {caml_call2(Stdlib_Printf[2],_k_,i);
                       var
                        _pT_=inj(x),
                        _pU_=caml_check_bound(c[2],i)[1 + i],
                        _pV_=to_string(caml_call2(Map$0[3],_pU_,_pT_)),
                        _pW_=caml_call1(X[2],x);
                       caml_call3(Stdlib_Printf[2],_l_,_pW_,_pV_);
                       var
                        _pX_=inj(x),
                        _pY_=caml_check_bound(c[2],i)[1 + i],
                        _p0_=i - 1 | 0,
                        _pZ_=caml_call2(Map$0[3],_pY_,_pX_),
                        _p1_=caml_check_bound(c[2],_p0_)[1 + _p0_],
                        _p2_=to_string(caml_call2(Map$0[3],_p1_,_pZ_)),
                        _p3_=caml_call1(X[2],x);
                       caml_call3(Stdlib_Printf[2],_m_,_p3_,_p2_);
                       throw Stdlib[3]}
                     return _pS_}}
                 (i),
                _pK_);
              var _pL_=i + 1 | 0;
              if(_pH_ !== i){var i=_pL_;continue}
              break}}
          var _pI_=1;
          return _pI_}
        catch(_pM_)
         {_pM_ = caml_wrap_exception(_pM_);
          if(_pM_ === Stdlib[3])return 0;
          throw _pM_}}
      function to_string$2(c)
       {var ans=[0,cst$68],_px_=length(c) - 1 | 0;
        if(! (_px_ < 0))
         {var i=_px_;
          for(;;)
           {var
             _py_=caml_check_bound(c[2],i)[1 + i],
             _pz_=caml_call1(Map$0[9],_py_),
             _pA_=caml_call2(Stdlib[28],_pz_,cst$69),
             _pB_=caml_call2(Stdlib[28],cst$70,_pA_),
             _pC_=caml_call1(Stdlib[33],i),
             _pD_=caml_call2(Stdlib[28],_pC_,_pB_),
             _pE_=caml_call2(Stdlib[28],cst_d,_pD_);
            ans[1] = caml_call2(Stdlib[28],ans[1],_pE_);
            var _pF_=i - 1 | 0;
            if(0 !== i){var i=_pF_;continue}
            break}}
        return ans[1]}
      function betti(c)
       {function _ps_(i)
         {if(0 === i)
           var ker=caml_check_bound(c[1],0)[1].length - 1;
          else
           var
            _pv_=i - 1 | 0,
            _pw_=caml_check_bound(c[2],_pv_)[1 + _pv_],
            ker=caml_call1(Map$0[8],_pw_);
          var
           _pu_=caml_check_bound(c[2],i)[1 + i],
           im=caml_call1(Map$0[7],_pu_);
          return ker - im | 0}
        var _pt_=length(c);
        return caml_call2(Stdlib_Array[2],_pt_,_ps_)}
      var
       Complex=[0,modules,maps,length,make$0,valid,to_string$2,betti],
       Pres=
        [0,
         make,
         dim,
         presentation_to_string,
         Map$0,
         iter$1,
         Complex,
         presentation_to_string];
      return [0,
              R,
              E,
              zero,
              cinj,
              inj,
              coeff,
              included,
              eq,
              compare$0,
              add_monomial,
              add$0,
              cmul,
              neg,
              sub,
              to_string,
              map$0,
              iter$0,
              Map,
              Pres]}
    function FreeLeftModule(_pp_,_po_)
     {var _pq_=FreeLeft(_pp_,_po_);
      return [0,
              _pq_[1],
              _pq_[8],
              _pq_[9],
              _pq_[11],
              _pq_[3],
              _pq_[15],
              _pq_[13],
              _pq_[12]]}
    function Free$0(_pn_,_pm_){return FreeLeft(_pn_,_pm_)}
    function FreeRight(R,X)
     {var
       include=FreeLeft(Op(R),X),
       Ring=include[1],
       E=include[2],
       zero=include[3],
       inj=include[5],
       coeff=include[6],
       included=include[7],
       eq=include[8],
       compare=include[9],
       add_monomial=include[10],
       add=include[11],
       neg=include[13],
       sub=include[14],
       map=include[16],
       iter=include[17],
       Map=include[18],
       Pres=include[19],
       _pc_=include[4],
       _pd_=include[12];
      function cinj(x,a){return caml_call2(_pc_,a,x)}
      function cmul(x,a){return caml_call2(_pd_,a,x)}
      function to_string(x)
       {var ans=[0,cst$71];
        function _pe_(u,a)
         {var _pf_=1 - caml_call2(R[1],a,R[3]);
          if(_pf_)
           {if(caml_string_notequal(ans[1],cst$72))
             ans[1] = caml_call2(Stdlib[28],ans[1],cst$73);
            if(caml_call2(R[1],a,R[6]))
             var a$0=cst$74;
            else
             var
              _pj_=caml_call1(R[7],a),
              _pk_=caml_call2(Stdlib[28],_pj_,cst$75),
              _pl_=caml_call2(Stdlib[28],cst$76,_pk_),
              a$0=caml_call2(Stdlib[28],cst$77,_pl_);
            var _pg_=caml_call1(X[2],u),_ph_=caml_call2(Stdlib[28],_pg_,a$0);
            ans[1] = caml_call2(Stdlib[28],ans[1],_ph_);
            var _pi_=0}
          else
           var _pi_=_pf_;
          return _pi_}
        caml_call2(E[11],_pe_,x);
        return ans[1]}
      return [0,
              Ring,
              E,
              zero,
              inj,
              coeff,
              included,
              eq,
              compare,
              add_monomial,
              add,
              neg,
              sub,
              map,
              iter,
              Map,
              Pres,
              cinj,
              cmul,
              to_string]}
    function FreeRightModule(_pa_,_o$_)
     {var _pb_=FreeRight(_pa_,_o$_);
      return [0,
              _pb_[1],
              _pb_[7],
              _pb_[8],
              _pb_[10],
              _pb_[3],
              _pb_[19],
              _pb_[11],
              _pb_[18]]}
    var
     Alg_Module=
      [0,FreeLeft,FreeLeftModule,Free$0,FreeRight,FreeRightModule];
    caml_register_global(313,Alg_Module,"Alg__Module");
    function Free$1(K,M)
     {var
       include=FreeLeft(K,[0,M[1],M[5],M[6]]),
       _oU_=include[5],
       _o5_=include[16],
       _o6_=include[17],
       _oQ_=include[1],
       _oR_=include[2],
       _oS_=include[3],
       _oT_=include[4],
       _oV_=include[6],
       _oW_=include[7],
       _oX_=include[8],
       _oY_=include[9],
       _oZ_=include[10],
       _o0_=include[11],
       _o1_=include[12],
       _o2_=include[13],
       _o3_=include[14],
       _o4_=include[15],
       _o7_=include[18],
       _o8_=include[19],
       one=caml_call1(_oU_,M[3]);
      function mul_monomial(p,v)
       {return caml_call2
                (_o5_,
                 function(u){return caml_call1(_oU_,caml_call2(M[2],u,v))},
                 p)}
      function mul(p,q)
       {return caml_call2(_o5_,function(v){return mul_monomial(p,v)},q)}
      function leading(leq,p)
       {var a=[0,K[3]],u=[0,M[3]];
        caml_call2
         (_o6_,
          function(b,v)
           {var
             _o9_=caml_call2(leq,u[1],v),
             _o__=_o9_?(a[1] = b,u[1] = v,0):_o9_;
            return _o__},
          p);
        return [0,a[1],u[1]]}
      return [0,
              _oQ_,
              _oR_,
              _oS_,
              _oT_,
              _oU_,
              _oV_,
              _oW_,
              _oX_,
              _oY_,
              _oZ_,
              _o0_,
              _o1_,
              _o2_,
              _o3_,
              _o4_,
              _o5_,
              _o6_,
              _o7_,
              _o8_,
              one,
              mul_monomial,
              mul,
              leading]}
    var OverRing=[0,Free$1];
    function Free$2(K,M)
     {var
       include=
        caml_call1
         (caml_call1(OverRing[1],[0,K[1],K[2],K[3],K[4],K[5],K[6],K[7]]),M),
       Ring=include[1],
       E=include[2],
       zero=include[3],
       cinj=include[4],
       inj=include[5],
       coeff=include[6],
       included=include[7],
       eq=include[8],
       compare=include[9],
       add_monomial=include[10],
       add=include[11],
       cmul=include[12],
       neg=include[13],
       sub=include[14],
       to_string=include[15],
       map=include[16],
       iter=include[17],
       Map=include[18],
       Pres=include[19],
       one=include[20],
       mul_monomial=include[21],
       mul=include[22],
       leading=include[23];
      return [0,
              Ring,
              E,
              zero,
              cinj,
              inj,
              coeff,
              included,
              eq,
              compare,
              add_monomial,
              add,
              cmul,
              neg,
              sub,
              to_string,
              map,
              iter,
              Map,
              Pres,
              one,
              mul_monomial,
              mul,
              leading,
              K]}
    function FreeAlgebra(_oO_,_oN_)
     {var _oP_=Free$2(_oO_,_oN_);
      return [0,
              _oP_[8],
              _oP_[11],
              _oP_[3],
              _oP_[13],
              _oP_[22],
              _oP_[20],
              _oP_[15],
              _oP_[24],
              _oP_[12]]}
    function Pres$0(K,X)
     {var
       M=Free(X),
       include$0=Free$2(K,[0,M[8],M[2],M[3],M[4],M[11],M[9],M[1]]);
      function free(leq,generators){return [0,leq,generators,0]}
      function orient(pres,p)
       {var
         match=caml_call2(include$0[23],pres[1],p),
         u=match[2],
         a=match[1],
         _oL_=caml_call1(K[8],a),
         p$0=caml_call2(include$0[12],_oL_,p),
         _oM_=caml_call1(include$0[5],u),
         p$1=caml_call2(include$0[14],_oM_,p$0);
        return [0,u,p$1]}
      function add_rule(pres,r)
       {var rules=[0,r,pres[3]];return [0,pres[1],pres[2],rules]}
      function add_relation(pres,p){return add_rule(pres,orient(pres,p))}
      function make(leq,generators,pp)
       {var _oK_=free(leq,generators);
        return caml_call3(Stdlib_List[25],add_relation,_oK_,pp)}
      function heads(pres)
       {var _oI_=pres[3];
        function _oJ_(param){var u=param[1];return u}
        return caml_call2(Stdlib_List[19],_oJ_,_oI_)}
      function to_string(pres)
       {var _ow_=pres[3];
        function _ox_(param)
         {var
           p=param[2],
           u=param[1],
           _oF_=caml_call1(include$0[15],p),
           _oG_=caml_call2(Stdlib[28],cst$79,_oF_),
           _oH_=caml_call1(M[11],u);
          return caml_call2(Stdlib[28],_oH_,_oG_)}
        var
         _oy_=caml_call2(Stdlib_List[19],_ox_,_ow_),
         _oz_=caml_call2(Stdlib_String[6],cst$80,_oy_),
         _oA_=caml_call2(Stdlib[28],_oz_,cst$78),
         _oB_=caml_call2(Stdlib[28],cst$81,_oA_),
         _oC_=caml_call2(Stdlib_List[19],X[2],pres[2]),
         _oD_=caml_call2(Stdlib_String[6],cst$82,_oC_),
         _oE_=caml_call2(Stdlib[28],_oD_,_oB_);
        return caml_call2(Stdlib[28],cst$83,_oE_)}
      function normalize(pres,p)
       {var p$0=[0,p],loop=[0,1];
        for(;;)
         {if(loop[1])
           {loop[1] = 0;
            var
             _om_=p$0[1],
             _on_=
              function(u)
               {try
                 {var
                   _oo_=pres[3],
                   _op_=
                    function(param){var v=param[1];return caml_call2(M[13],v,u)},
                   match=caml_call2(Stdlib_List[38],_op_,_oo_),
                   v=match[2],
                   v$0=match[1];
                  loop[1] = 1;
                  var
                   i=caml_call3(M[14],0,u,v$0),
                   v1=caml_call3(M[7],u,0,i),
                   _oq_=i + caml_call1(M[6],v$0) | 0,
                   _or_=caml_call1(M[6],u) - _oq_ | 0,
                   _os_=i + caml_call1(M[6],v$0) | 0,
                   v2=caml_call3(M[7],u,_os_,_or_),
                   v1$0=caml_call1(include$0[5],v1),
                   v2$0=caml_call1(include$0[5],v2),
                   _ot_=caml_call2(include$0[22],v,v2$0),
                   _ou_=caml_call2(include$0[22],v1$0,_ot_);
                  return _ou_}
                catch(_ov_)
                 {_ov_ = caml_wrap_exception(_ov_);
                  if(_ov_ === Stdlib[8])return caml_call1(include$0[5],u);
                  throw _ov_}};
            p$0[1] = caml_call2(include$0[16],_on_,_om_);
            continue}
          return p$0[1]}}
      function buchberger(pres)
       {var todo=caml_call1(Stdlib_Queue[2],0),_oc_=pres[3];
        function _od_(r){return caml_call2(Stdlib_Queue[3],r,todo)}
        caml_call2(Stdlib_List[17],_od_,_oc_);
        var pres$0=[0,pres];
        for(;;)
         {if(caml_call1(Stdlib_Queue[13],todo))return pres$0[1];
          var
           match=caml_call1(Stdlib_Queue[7],todo),
           p=match[2],
           u=match[1],
           _oe_=pres$0[1][3],
           _of_=
            function(p,u)
              {return function(param)
                {var q=param[2],v=param[1],_og_=caml_call2(M[17],u,v);
                 function _oh_(param)
                  {var
                    _oj_=param[2],
                    v2=_oj_[2],
                    v1=_oj_[1],
                    match=param[1],
                    u2=match[2],
                    u1=match[1],
                    u1$0=caml_call1(include$0[5],u1),
                    u2$0=caml_call1(include$0[5],u2),
                    v1$0=caml_call1(include$0[5],v1),
                    v2$0=caml_call1(include$0[5],v2),
                    _ok_=caml_call2(include$0[22],p,u2$0),
                    s1=caml_call2(include$0[22],u1$0,_ok_),
                    _ol_=caml_call2(include$0[22],q,v2$0),
                    s2=caml_call2(include$0[22],v1$0,_ol_),
                    s=caml_call2(include$0[14],s1,s2),
                    p$0=normalize(pres$0[1],s),
                    _oi_=1 - caml_call2(include$0[8],include$0[3],p$0);
                   if(_oi_)
                    {var r=orient(pres$0[1],p$0);
                     pres$0[1] = add_rule(pres$0[1],r);
                     return caml_call2(Stdlib_Queue[4],r,todo)}
                   return _oi_}
                 return caml_call2(Stdlib_List[17],_oh_,_og_)}}
             (p,u);
          caml_call2(Stdlib_List[17],_of_,_oe_);
          continue}}
      function reduce(pres)
       {var rules=pres[3];
        function _oa_(param)
         {var p=param[2],u=param[1];return [0,u,normalize(pres,p)]}
        var param=caml_call2(Stdlib_List[19],_oa_,rules),acc=0,param$0=param;
        for(;;)
         {if(param$0)
           {var
             rules$0=param$0[2],
             match=param$0[1],
             p=match[2],
             u=match[1],
             f$0=
              function(u)
               {function f(l)
                 {function _ob_(param)
                   {var v=param[1];return caml_call2(M[13],v,u)}
                  return caml_call2(Stdlib_List[33],_ob_,l)}
                return f},
             f=f$0(u);
            if(! f(acc) && ! f(rules$0))
             {var acc$0=[0,[0,u,p],acc],acc=acc$0,param$0=rules$0;continue}
            var param$0=rules$0;
            continue}
          var rules$1=caml_call1(Stdlib_List[9],acc);
          return [0,pres[1],pres[2],rules$1]}}
      function Algebra(_n1_)
       {var
         _n2_=include$0[3],
         _n3_=include$0[8],
         _n4_=include$0[11],
         _n5_=include$0[12],
         _n6_=include$0[13],
         _n7_=include$0[15],
         _n8_=include$0[20],
         _n9_=include$0[22],
         _n__=include$0[24],
         _n$_=_n1_[1];
        function mul(p,q){return normalize(_n$_,caml_call2(_n9_,p,q))}
        return [0,_n3_,_n4_,_n2_,_n6_,mul,_n8_,_n7_,_n__,_n5_]}
      var Invalid=[248,cst_Alg_Algebra_Pres_K_X_Augme,caml_fresh_oo_id(0)];
      function make$0(pres,eps)
       {function eps$0(p)
         {var ans=[0,K[3]];
          function _nY_(a,u)
           {var _nZ_=caml_call1(eps,u),_n0_=caml_call2(K[5],a,_nZ_);
            ans[1] = caml_call2(K[2],ans[1],_n0_);
            return 0}
          caml_call2(include$0[17],_nY_,p);
          return ans[1]}
        var _nS_=eps$0(caml_call1(include$0[5],M[3]));
        if(caml_call2(K[1],K[6],_nS_))
         {var
           _nT_=pres[3],
           _nU_=
            function(param)
             {var
               p=param[2],
               u=param[1],
               _nV_=eps$0(p),
               _nW_=eps$0(caml_call1(include$0[5],u)),
               _nX_=1 - caml_call2(K[1],_nW_,_nV_);
              if(_nX_)throw Invalid;
              return _nX_};
          caml_call2(Stdlib_List[17],_nU_,_nT_);
          return eps$0}
        throw [0,Assert_failure,_n_]}
      function graded(pres)
       {return make$0
                (pres,function(u){return caml_call2(M[8],M[3],u)?K[6]:K[3]})}
      function monoid(pres){return make$0(pres,function(u){return K[6]})}
      var
       Augmentation=[0,Invalid,make$0,graded,monoid],
       _mv_=M[19],
       Mod=
        FreeRight
         ([0,
           include$0[8],
           include$0[11],
           include$0[3],
           include$0[13],
           include$0[22],
           include$0[20],
           include$0[15]],
          [0,_mv_[7],_mv_[12],_mv_[8]]),
       to_string$0=Mod[19],
       cmul=Mod[18],
       cinj=Mod[17],
       Pres=Mod[16],
       iter=Mod[14],
       map=Mod[13],
       sub=Mod[12],
       neg=Mod[11],
       add=Mod[10],
       add_monomial=Mod[9],
       compare=Mod[8],
       eq=Mod[7],
       included=Mod[6],
       coeff=Mod[5],
       inj=Mod[4],
       zero=Mod[3],
       E=Mod[2],
       Ring=Mod[1];
      function normalize$0(pres,p)
       {var ans=[0,zero];
        caml_call2
         (iter,
          function(u,c)
           {var u$0=normalize(pres,u),_nR_=caml_call2(cinj,c,u$0);
            ans[1] = caml_call2(add,ans[1],_nR_);
            return 0},
          p);
        return ans[1]}
      var
       include=Mod[15],
       E$0=include[1],
       set=include[2],
       app=include[3],
       zero$0=include[5],
       to_string$1=include[6],
       _mw_=include[4];
      function bind(pres,f,p){return normalize$0(pres,caml_call2(_mw_,f,p))}
      var
       Map=[0,E$0,set,app,zero$0,to_string$1,bind],
       AMod=
        [0,
         Mod,
         Ring,
         E,
         zero,
         inj,
         coeff,
         included,
         eq,
         compare,
         add_monomial,
         add,
         neg,
         sub,
         map,
         iter,
         Pres,
         cinj,
         cmul,
         to_string$0,
         normalize$0,
         Map];
      function cinj$0(a,c,u)
       {var _nQ_=caml_call2(include$0[4],a,u);
        return caml_call2(AMod[17],c,_nQ_)}
      function cmul$0(a,cu)
       {var _nP_=caml_call2(include$0[12],a,include$0[20]);
        return caml_call2(AMod[18],cu,_nP_)}
      function iter$0(f,p)
       {function _nN_(u,c)
         {function _nO_(a,u){return caml_call3(f,a,c,u)}
          return caml_call2(include$0[17],_nO_,u)}
        return caml_call2(AMod[15],_nN_,p)}
      function map$0(f,p)
       {var ans=[0,AMod[4]];
        iter$0
         (function(a,c,u)
           {var _nM_=cmul$0(a,caml_call2(f,c,u));
            ans[1] = caml_call2(AMod[11],ans[1],_nM_);
            return 0},
          p);
        return ans[1]}
      var AKMod=[0,cinj$0,cmul$0,iter$0,map$0];
      function chains(pres,n)
       {var cc=caml_make_vect(n + 1 | 0,[0,M[19][1],0]);
        if(1 <= n)
         {var _nC_=caml_call1(M[19][3],pres[2]);
          caml_check_bound(cc,1)[2] = _nC_}
        var _nD_=pres[3];
        function _nE_(_nL_){return _nL_[1]}
        var left=caml_call2(Stdlib_List[19],_nE_,_nD_),_nG_=n - 1 | 0,_nF_=1;
        if(! (_nG_ < 1))
         {var i=_nF_;
          for(;;)
           {var
             _nH_=caml_check_bound(cc,i)[1 + i],
             _nJ_=i + 1 | 0,
             _nI_=caml_call2(M[19][9],left,_nH_);
            caml_check_bound(cc,_nJ_)[1 + _nJ_] = _nI_;
            var _nK_=i + 1 | 0;
            if(_nG_ !== i){var i=_nK_;continue}
            break}}
        return cc}
      function resolution(augmentation,pres,n)
       {var debug=0;
        if(augmentation)
         var augmentation$0=augmentation[1],augmentation$1=augmentation$0;
        else
         var augmentation$1=caml_call1(Augmentation[3],pres);
        var cc=chains(pres,n);
        function _mD_(param){return AMod[21][4]}
        var d=caml_call2(Stdlib_Array[2],n,_mD_),_mE_=pres[2];
        function _mF_(x)
         {var
           _nw_=caml_call1(M[5],x),
           x$0=caml_call1(include$0[5],_nw_),
           a=caml_call1(augmentation$1,x$0),
           _nv_=caml_call2(include$0[4],a,M[3]),
           _nx_=caml_call2(include$0[14],x$0,_nv_),
           _ny_=caml_call2(AMod[17],M[19][1],_nx_),
           _nz_=caml_call1(M[19][2],x),
           _nA_=caml_check_bound(d,0)[1],
           _nB_=caml_call3(AMod[21][2],_nA_,_nz_,_ny_);
          caml_check_bound(d,0)[1] = _nB_;
          return debug}
        caml_call2(Stdlib_List[17],_mF_,_mE_);
        function ch(n,p)
         {function _mY_(u,c)
           {if(caml_call1(M[19][11],c) === n)return 0;
            throw [0,Assert_failure,_o_]}
          caml_call2(AMod[15],_mY_,p);
          if(0 !== n)
           {var
             _nf_=n - 1 | 0,
             _ng_=caml_check_bound(d,_nf_)[1 + _nf_],
             _nh_=caml_call3(AMod[21][6],pres,_ng_,p);
            if(! caml_call2(AMod[8],AMod[4],_nh_))throw [0,Assert_failure,_t_]}
          if(caml_call2(AMod[8],AMod[4],p))return AMod[4];
          if(0 === n)
           {var
             ans=[0,AMod[4]],
             _mZ_=
              function(a,c,u)
               {if(0 === caml_call1(M[6],u))return 0;
                var _np_=caml_call1(M[6],u) - 1 | 0,_no_=0;
                if(! (_np_ < 0))
                 {var i=_no_;
                  for(;;)
                   {var
                     v=caml_call3(M[7],u,0,i),
                     _nq_=caml_check_bound(u,i)[1 + i],
                     c$0=caml_call1(M[19][2],_nq_),
                     _nr_=caml_call1(M[6],u) - (i + 1 | 0) | 0,
                     u$0=caml_call3(M[7],u,i + 1 | 0,_nr_),
                     _ns_=caml_call1(augmentation$1,caml_call1(include$0[5],v)),
                     a$0=caml_call2(K[5],a,_ns_),
                     _nt_=caml_call3(AKMod[1],a$0,c$0,u$0);
                    ans[1] = caml_call2(AMod[11],ans[1],_nt_);
                    var _nu_=i + 1 | 0;
                    if(_np_ !== i){var i=_nu_;continue}
                    break}}
                return 0};
            caml_call2(AKMod[3],_mZ_,p);
            return ans[1]}
          var
           a=[0,K[3]],
           c=[0,M[19][1]],
           u=[0,M[3]],
           cu=[0,M[3]],
           _m0_=n - 1 | 0,
           _m1_=caml_check_bound(d,_m0_)[1 + _m0_],
           _m2_=caml_call3(AMod[21][6],pres,_m1_,p);
          if(1 - caml_call2(AMod[8],AMod[4],_m2_))
           {var
             _m3_=caml_call1(AMod[19],p),
             _m4_=caml_call2(Stdlib[28],_m3_,cst_not_in_the_kernel);
            caml_call1(Stdlib[2],_m4_)}
          function _m5_(a$0,c$0,u$0)
           {var
             _nl_=caml_call1(M[19][10],c$0),
             cu$0=caml_call2(M[2],_nl_,u$0),
             _nm_=caml_call2(pres[1],cu[1],cu$0);
            if(_nm_)
             {if(caml_call2(K[1],a$0,K[3]))throw [0,Assert_failure,_p_];
              a[1] = a$0;
              c[1] = c$0;
              u[1] = u$0;
              cu[1] = cu$0;
              var _nn_=0}
            else
             var _nn_=_nm_;
            return _nn_}
          caml_call2(AKMod[3],_m5_,p);
          var
           a$0=a[1],
           c$0=c[1],
           u$0=u[1],
           cn=caml_call1(M[19][4],c$0),
           cnl=caml_call1(M[6],cn),
           cnu=caml_call2(M[2],cn,u$0),
           cnul=caml_call1(M[6],cnu),
           ans$0=[0,-1];
          try
           {var _m$_=cnul - 1 | 0,_m__=0;
            if(! (_m$_ < 0))
             {var i=_m__;
              for(;;)
               {var
                 _nc_=pres[3],
                 _nd_=
                  function(i)
                    {return function(param)
                      {var
                        v=param[1],
                        vl=caml_call1(M[6],v),
                        _nj_=(i + vl | 0) <= cnul?1:0,
                        _nk_=_nj_?caml_call5(M[10],cnu,i,v,0,vl):_nj_;
                       if(_nk_){ans$0[1] = (i + vl | 0) - cnl | 0;throw Stdlib[3]}
                       return _nk_}}
                   (i);
                caml_call2(Stdlib_List[17],_nd_,_nc_);
                var _ne_=i + 1 | 0;
                if(_m$_ !== i){var i=_ne_;continue}
                break}}
            var _na_=caml_call1(AMod[19],p);
            caml_call2(Stdlib_Printf[2],_q_,_na_);
            var
             leading=caml_call3(AKMod[1],a$0,c$0,u$0),
             _nb_=caml_call1(AMod[19],leading);
            caml_call2(Stdlib_Printf[2],_r_,_nb_);
            throw [0,Assert_failure,_s_]}
          catch(_ni_)
           {_ni_ = caml_wrap_exception(_ni_);
            if(_ni_ === Stdlib[3])
             {var
               _m6_=ans$0[1],
               u$1=caml_call3(M[7],u$0,0,_m6_),
               _m7_=caml_call1(M[6],u$0) - _m6_ | 0,
               u$2=caml_call3(M[7],u$0,_m6_,_m7_),
               c$1=[0,u$1,c$0],
               ans$1=caml_call3(AKMod[1],a$0,c$1,u$2),
               ans$2=caml_call2(AMod[20],pres,ans$1),
               _m8_=caml_check_bound(d,n)[1 + n],
               ans$3=caml_call3(AMod[21][6],pres,_m8_,ans$2),
               p$0=caml_call2(AMod[13],p,ans$3),
               p$1=caml_call2(AMod[20],pres,p$0),
               ans$4=ch(n,p$1),
               _m9_=caml_call2(AMod[11],ans$2,ans$4),
               ans$5=caml_call2(AMod[20],pres,_m9_);
              return ans$5}
            throw _ni_}}
        var _mH_=n - 1 | 0,_mG_=1;
        if(! (_mH_ < 1))
         {var i=_mG_;
          for(;;)
           {var
             _mK_=i + 1 | 0,
             _mL_=caml_check_bound(cc,_mK_)[1 + _mK_],
             _mM_=
              function(i)
                {return function(c)
                  {var
                    u=caml_call1(M[19][4],c),
                    c$0=caml_call1(M[19][5],c),
                    _mS_=caml_call1(include$0[5],u),
                    _mT_=caml_call1(AMod[5],c$0),
                    p=caml_call2(AMod[18],_mT_,_mS_),
                    _mU_=i - 1 | 0,
                    _mV_=caml_check_bound(d,_mU_)[1 + _mU_],
                    p$0=caml_call3(AMod[21][6],pres,_mV_,p),
                    p$1=ch(i - 1 | 0,p$0),
                    p$2=caml_call2(AMod[13],p,p$1),
                    p$3=caml_call2(AMod[20],pres,p$2),
                    _mW_=caml_check_bound(d,i)[1 + i],
                    _mX_=caml_call3(AMod[21][2],_mW_,c,p$3);
                   caml_check_bound(d,i)[1 + i] = _mX_;
                   return 0}}
               (i);
            caml_call2(Stdlib_List[17],_mM_,_mL_);
            var _mN_=i + 1 | 0;
            if(_mH_ !== i){var i=_mN_;continue}
            break}}
        function _mI_(l)
         {var _mR_=caml_call1(Stdlib_Array[12],l);
          return caml_call1(AMod[16][1],_mR_)}
        var cc$0=caml_call2(Stdlib_Array[15],_mI_,cc);
        function _mJ_(i,d)
         {var
           _mP_=i + 1 | 0,
           _mO_=caml_check_bound(cc$0,i)[1 + i],
           _mQ_=caml_check_bound(cc$0,_mP_)[1 + _mP_];
          return caml_call3(AMod[16][4][5],d,_mQ_,_mO_)}
        var d$0=caml_call2(Stdlib_Array[16],_mJ_,d);
        return caml_call2(AMod[16][6][4],cc$0,d$0)}
      var
       _mx_=M[19],
       KMod=
        Free$0
         ([0,K[1],K[2],K[3],K[4],K[5],K[6],K[7]],[0,_mx_[7],_mx_[12],_mx_[8]]),
       MF=
        Functor
         ([0,
           include$0[8],
           include$0[11],
           include$0[3],
           include$0[13],
           include$0[22],
           include$0[20],
           include$0[15]],
          [0,K[1],K[2],K[3],K[4],K[5],K[6],K[7]]),
       _my_=M[19],
       _mA_=M[19],
       _mz_=[0,_my_[7],_my_[12],_my_[8]],
       MFL=caml_call1(caml_call1(MF[4],[0,_mA_[7],_mA_[12],_mA_[8]]),_mz_);
      function complex(augmentation,pres,n)
       {if(augmentation)
         var augmentation$0=augmentation[1],augmentation$1=augmentation$0;
        else
         var augmentation$1=caml_call1(Augmentation[3],pres);
        var
         r=resolution([0,augmentation$1],pres,n),
         cc=caml_call1(AMod[16][6][1],r),
         d=caml_call1(AMod[16][6][2],r);
        function id(x){return x}
        function _mB_(d)
         {function _mC_(p)
           {var p$0=normalize(pres,p);return caml_call1(augmentation$1,p$0)}
          return caml_call4(MFL[3],id,id,_mC_,d)}
        var d$0=caml_call2(Stdlib_Array[15],_mB_,d);
        return caml_call2(KMod[19][6][4],cc,d$0)}
      function betti(augmentation,pres,n)
       {var c=complex(augmentation,pres,n + 1 | 0);
        return caml_call1(KMod[19][6][7],c)}
      var Anick=[0,AMod,AKMod,chains,resolution,KMod,MF,MFL,complex,betti];
      return [0,
              M,
              include$0,
              free,
              orient,
              add_rule,
              add_relation,
              make,
              heads,
              to_string,
              normalize,
              buchberger,
              reduce,
              Algebra,
              Augmentation,
              Anick]}
    function Generate$0(K,X)
     {var Pres=Pres$0(K,X);
      function intset(n)
       {function aux(k){return n <= k?0:[0,k,aux(k + 1 | 0)]}return aux(0)}
      function braid(leq,n)
       {var generators=intset(n),relations=[0,0],_mh_=n - 2 | 0,_mg_=0;
        if(! (_mh_ < 0))
         {var i$0=_mg_;
          for(;;)
           {var
             _mr_=relations[1],
             _ms_=caml_call1(Pres[2][5],[0,i$0 + 1 | 0,i$0,i$0 + 1 | 0]),
             _mt_=caml_call1(Pres[2][5],[0,i$0,i$0 + 1 | 0,i$0]);
            relations[1] = [0,caml_call2(Pres[2][14],_mt_,_ms_),_mr_];
            var _mu_=i$0 + 1 | 0;
            if(_mh_ !== i$0){var i$0=_mu_;continue}
            break}}
        var _mj_=n - 1 | 0,_mi_=0;
        if(! (_mj_ < 0))
         {var i=_mi_;
          for(;;)
           {var _mk_=i + 2 | 0,_ml_=n - 1 | 0;
            if(! (_ml_ < _mk_))
             {var j=_mk_;
              for(;;)
               {var
                 _mn_=relations[1],
                 _mo_=caml_call1(Pres[2][5],[0,j,i]),
                 _mp_=caml_call1(Pres[2][5],[0,i,j]);
                relations[1] = [0,caml_call2(Pres[2][14],_mp_,_mo_),_mn_];
                var _mq_=j + 1 | 0;
                if(_ml_ !== j){var j=_mq_;continue}
                break}}
            var _mm_=i + 1 | 0;
            if(_mj_ !== i){var i=_mm_;continue}
            break}}
        var relations$0=caml_call1(Stdlib_List[9],relations[1]);
        return caml_call3(Pres[7],leq,generators,relations$0)}
      function symmetric(leq,n)
       {var generators=intset(n),relations=[0,0],_l__=n - 1 | 0,_l9_=0;
        if(! (_l__ < 0))
         {var i=_l9_;
          for(;;)
           {var _l$_=i + 1 | 0,_ma_=n - 1 | 0;
            if(! (_ma_ < _l$_))
             {var j=_l$_;
              for(;;)
               {var
                 _mc_=relations[1],
                 _md_=caml_call1(Pres[2][5],[0,j,i]),
                 _me_=caml_call1(Pres[2][5],[0,i,j]);
                relations[1] = [0,caml_call2(Pres[2][14],_me_,_md_),_mc_];
                var _mf_=j + 1 | 0;
                if(_ma_ !== j){var j=_mf_;continue}
                break}}
            var _mb_=i + 1 | 0;
            if(_l__ !== i){var i=_mb_;continue}
            break}}
        var relations$0=caml_call1(Stdlib_List[9],relations[1]);
        return caml_call3(Pres[7],leq,generators,relations$0)}
      function exterior(leq,n)
       {var generators=intset(n),relations=[0,0],_lW_=n - 1 | 0,_lV_=0;
        if(! (_lW_ < 0))
         {var i$0=_lV_;
          for(;;)
           {var _l1_=i$0 + 1 | 0,_l2_=n - 1 | 0;
            if(! (_l2_ < _l1_))
             {var j=_l1_;
              for(;;)
               {var
                 _l4_=relations[1],
                 _l5_=caml_call1(K[4],K[6]),
                 _l6_=caml_call2(Pres[2][4],_l5_,[0,j,i$0]),
                 _l7_=caml_call1(Pres[2][5],[0,i$0,j]);
                relations[1] = [0,caml_call2(Pres[2][14],_l7_,_l6_),_l4_];
                var _l8_=j + 1 | 0;
                if(_l2_ !== j){var j=_l8_;continue}
                break}}
            var _l3_=i$0 + 1 | 0;
            if(_lW_ !== i$0){var i$0=_l3_;continue}
            break}}
        var _lY_=n - 1 | 0,_lX_=0;
        if(! (_lY_ < 0))
         {var i=_lX_;
          for(;;)
           {var _lZ_=relations[1];
            relations[1] = [0,caml_call1(Pres[2][5],[0,i,i]),_lZ_];
            var _l0_=i + 1 | 0;
            if(_lY_ !== i){var i=_l0_;continue}
            break}}
        var relations$0=caml_call1(Stdlib_List[9],relations[1]);
        return caml_call3(Pres[7],leq,generators,relations$0)}
      return [0,Pres,intset,braid,symmetric,exterior]}
    var Alg_Algebra=[0,OverRing,Free$2,FreeAlgebra,Pres$0,Generate$0];
    caml_register_global(314,Alg_Algebra,"Alg__Algebra");
    function name(f){return f[2]}
    function weight(f){return f[1]}
    function arity(f){return f[3]}
    function make$0(to_string,opt,name,arity)
     {if(opt)var sth=opt[1],weight=sth;else var weight=0;
      if(to_string)
       var to_string$0=to_string[1],to_string$1=to_string$0;
      else
       var
        to_string$1=
         function(a)
          {var
            _lS_=caml_call2(String$0[6],cst$85,a),
            _lT_=caml_call2(Stdlib[28],_lS_,cst$84),
            _lU_=caml_call2(Stdlib[28],cst$86,_lT_);
           return caml_call2(Stdlib[28],name,_lU_)};
      return [0,weight,name,arity,to_string$1]}
    function eq$9(f1,f2)
     {var _lP_=caml_string_equal(f1[2],f2[2]);
      if(_lP_)
       var _lQ_=f1[3] === f2[3]?1:0,_lR_=_lQ_?f1[1] === f2[1]?1:0:_lQ_;
      else
       var _lR_=_lP_;
      return _lR_}
    function to_string$9(f,a){return caml_call1(f[4],a)}
    var Op$0=[0,name,weight,arity,make$0,eq$9,to_string$9],n=[0,-1];
    function fresh(param){n[1]++;return [0,n[1]]}
    function eq$10(x,y){return x === y?1:0}
    function compare$5(x,y){return caml_compare(x,y)}
    function namer$0(param)
     {var f=namer(eq$10);
      return function(x)
       {var
         _lM_=caml_call1(f,x),
         _lN_=caml_call1(Stdlib[33],_lM_),
         _lO_=caml_call1(String$0[69],_lN_);
        return caml_call2(Stdlib[28],cst_x,_lO_)}}
    function namer_natural(param)
     {var f=namer(eq$10),name=_u_.slice();
      return function(x)
       {var _lL_=caml_call1(f,x);return caml_check_bound(name,_lL_)[1 + _lL_]}}
    var
     to_string$10=namer$0(0),
     Var=[0,fresh,eq$10,compare$5,namer$0,namer_natural,to_string$10];
    function var$0(param){return [1,caml_call1(Var[1],0)]}
    function app(f,a)
     {var _lK_=caml_call1(Op$0[3],f);
      if(caml_call1(List$0[1],a) === _lK_)return [0,f,a];
      throw [0,Assert_failure,_v_]}
    function parser(s)
     {function term(s)
       {var s$0=caml_call1(String$0[23],s);
        try
         {var
           n=caml_call2(String$0[35],s$0,40),
           f=caml_call3(String$0[15],s$0,0,n);
          if(41 === caml_string_get(s$0,caml_ml_string_length(s$0) - 1 | 0))
           {var
             a=
              caml_call3
               (String$0[15],
                s$0,
                n + 1 | 0,
                (caml_ml_string_length(s$0) - (n + 1 | 0) | 0) - 1 | 0);
            if(caml_string_equal(a,cst$87))
             var a$0=0;
            else
             var
              k=[0,0],
              p=
               function(param)
                {var switcher=param - 40 | 0;
                 if(! (4 < switcher >>> 0))
                  switch(switcher)
                   {case 0:k[1]++;return 0;
                    case 1:k[1] += -1;return 0;
                    case 4:return 0 === k[1]?1:0
                    }
                 return 0},
              a$0=caml_call2(String$0[72],p,a);
            var
             a$1=caml_call2(List$0[19],term,a$0),
             _lI_=[0,3257473,[0,f,a$1]];
            return _lI_}
          throw [0,Assert_failure,_w_]}
        catch(_lJ_)
         {_lJ_ = caml_wrap_exception(_lJ_);
          if(_lJ_ === Stdlib[8])return [0,4298439,s$0];
          throw _lJ_}}
      function step(s)
       {var s$0=caml_call1(String$0[23],s);
        return 45 === caml_string_get(s$0,caml_ml_string_length(s$0) - 1 | 0)
                ?[0,
                  3654865,
                  term
                   (caml_call3
                     (String$0[15],s$0,0,caml_ml_string_length(s$0) - 1 | 0))]
                :term(s$0)}
      var l=caml_call2(String$0[16],46,s);
      return 1 === caml_call1(List$0[1],l)
              ?step(caml_call1(List$0[5],l))
              :[0,4150143,caml_call2(List$0[19],step,l)]}
    var vars=[0,0];
    function parse_var(x)
     {if(1 - caml_call2(List$0[50],x,vars[1]))
       {var _lH_=vars[1];vars[1] = [0,[0,x,caml_call1(Var[1],0)],_lH_]}
      return caml_call2(List$0[46],x,vars[1])}
    function parse(ops,s)
     {function aux(param)
       {var _lF_=param[1];
        if(4150143 <= _lF_)
         {if(4298439 <= _lF_){var x=param[2];return [1,parse_var(x)]}
          throw [0,Assert_failure,_x_]}
        if(3654865 <= _lF_)throw [0,Assert_failure,_y_];
        var match=param[2],a=match[2],f=match[1];
        function _lG_(o){return caml_string_equal(caml_call1(Op$0[1],o),f)}
        var
         f$0=caml_call2(List$0[38],_lG_,ops),
         a$0=caml_call2(List$0[19],aux,a);
        return app(f$0,a$0)}
      return aux(parser(s))}
    function eq$11(t1,t2)
     {if(0 === t1[0])
       {var _ly_=t1[2],_lz_=t1[1];
        if(0 === t2[0])
         {var a2=t2[2],f2=t2[1],_lA_=caml_call2(Op$0[5],_lz_,f2);
          if(_lA_)
           {var
             _lB_=caml_call1(List$0[1],a2),
             _lC_=caml_call1(List$0[1],_ly_) === _lB_?1:0;
            if(_lC_)return caml_call3(List$0[34],eq$11,_ly_,a2);
            var _lD_=_lC_}
          else
           var _lD_=_lA_;
          return _lD_}}
      else
       {var _lE_=t1[1];
        if(0 !== t2[0]){var y=t2[1];return caml_call2(Var[2],_lE_,y)}}
      return 0}
    function to_string$11(opt,param)
     {if(opt)var sth=opt[1],var$0=sth;else var var$0=Var[6];
      if(0 === param[0])
       {var
         a=param[2],
         f=param[1],
         _lu_=[0,var$0],
         _lv_=function(_lx_){return to_string$11(_lu_,_lx_)},
         _lw_=caml_call2(List$0[19],_lv_,a);
        return caml_call2(Op$0[6],f,_lw_)}
      var x=param[1];
      return caml_call1(var$0,x)}
    function string_of_term(var$0)
     {return function(_lt_){return to_string$11(var$0,_lt_)}}
    function is_var(param){return 0 === param[0]?0:1}
    function get_var(param)
     {if(0 === param[0])throw Stdlib[8];var x=param[1];return x}
    function vars$0(t)
     {function aux(vars,param)
       {if(0 === param[0])
         {var a=param[2],_lr_=function(vars,t){return aux(vars,t)};
          return caml_call3(List$0[25],_lr_,vars,a)}
        var x=param[1],_ls_=caml_call1(Var[2],x);
        return caml_call2(List$0[33],_ls_,vars)?vars:[0,x,vars]}
      var _lq_=aux(0,t);
      return caml_call1(List$0[9],_lq_)}
    function occurs(x,param)
     {if(0 === param[0])
       {var a=param[2],_lo_=function(_lp_){return occurs(x,_lp_)};
        return caml_call2(List$0[33],_lo_,a)}
      var y=param[1];
      return caml_call2(Var[2],x,y)}
    function ge(ge_op,t,u){var _ln_=eq$11(t,u);return _ln_?_ln_:gt(ge_op,t,u)}
    function gt(ge_op,t,u)
     {if(0 === u[0])
       {if(0 === t[0])
         {var
           b=u[2],
           g=u[1],
           a=t[2],
           f=t[1],
           _li_=function(t){return ge(ge_op,t,u)};
          if(caml_call2(List$0[33],_li_,a))return 1;
          if(caml_call2(Op$0[5],f,g))
           {var
             _lj_=function(u){return gt(ge_op,t,u)},
             _lk_=caml_call2(List$0[32],_lj_,b);
            if(_lk_)
             {var l1=a,l2=b;
              for(;;)
               {if(l1 && l2)
                 {var x2=l2[1],l1$0=l1[2],x1=l1[1],l2$0=l2[2];
                  if(eq$11(x1,x2)){var l1=l1$0,l2=l2$0;continue}
                  if(gt(ge_op,x1,x2))return 1}
                return 0}}
            return _lk_}
          if(caml_call2(ge_op,f,g))
           {var _ll_=function(u){return gt(ge_op,t,u)};
            return caml_call2(List$0[32],_ll_,b)}
          return 0}
        return 0}
      var x=u[1],_lm_=1 - eq$11(t,u);
      return _lm_?occurs(x,t):_lm_}
    var LPO=[0,gt,ge];
    function to_string$12(var$0,s)
     {function _lb_(param)
       {var
         t=param[2],
         x=param[1],
         _lf_=to_string$11(var$0,[1,x]),
         _lg_=caml_call2(Stdlib[28],cst$89,_lf_),
         _lh_=to_string$11(var$0,t);
        return caml_call2(Stdlib[28],_lh_,_lg_)}
      var
       _lc_=caml_call2(List$0[19],_lb_,s),
       _ld_=caml_call2(String$0[6],cst$90,_lc_),
       _le_=caml_call2(Stdlib[28],_ld_,cst$88);
      return caml_call2(Stdlib[28],cst$91,_le_)}
    var empty$0=0;
    function id(vars)
     {function _la_(x){return [0,x,[1,x]]}
      return caml_call2(List$0[19],_la_,vars)}
    function rename(vars)
     {function _k$_(x){return [0,x,[1,caml_call1(Var[1],0)]]}
      return caml_call2(List$0[19],_k$_,vars)}
    function simple(x,t){return [0,[0,x,t],0]}
    function add$5(s,x,t){return [0,[0,x,t],s]}
    function find$1(s,x)
     {var s$0=s;
      for(;;)
       {if(s$0)
         {var s$1=s$0[2],match=s$0[1],t=match[2],y=match[1];
          if(caml_call2(Var[2],x,y))return t;
          var s$0=s$1;
          continue}
        throw Stdlib[8]}}
    function app$0(s,param)
     {if(0 === param[0])
       {var a=param[2],g=param[1],_k7_=function(_k__){return app$0(s,_k__)};
        return [0,g,caml_call2(List$0[19],_k7_,a)]}
      var x=param[1];
      try
       {var _k8_=find$1(s,x);return _k8_}
      catch(_k9_)
       {_k9_ = caml_wrap_exception(_k9_);
        if(_k9_ === Stdlib[8])return [1,x];
        throw _k9_}}
    function compose(s$0,s)
     {function _k6_(param){var t=param[2],x=param[1];return [0,x,app$0(s,t)]}
      return caml_call2(List$0[19],_k6_,s$0)}
    function eq$12(s1,s2)
     {function included(s1,s2)
       {function _k5_(param)
         {var t=param[2],x=param[1];return eq$11(t,app$0(s2,[1,x]))}
        return caml_call2(List$0[32],_k5_,s1)}
      var _k4_=included(s1,s2);
      return _k4_?included(s2,s1):_k4_}
    function is_renaming(s)
     {function _k3_(param){var t=param[2];return is_var(t)}
      return caml_call2(List$0[32],_k3_,s)}
    function is_injective_renaming(param)
     {var vars=0,param$0=param;
      for(;;)
       {if(param$0)
         {var s=param$0[2],match=param$0[1],t=match[2];
          if(is_var(t))
           {var x=get_var(t),_k2_=caml_call1(Var[2],x);
            if(caml_call2(List$0[33],_k2_,vars))return 0;
            var vars$0=[0,x,vars],vars=vars$0,param$0=s;
            continue}
          return 0}
        return 1}}
    function inv$2(s)
     {function _k1_(param)
       {var t=param[2],x=param[1];
        if(0 === t[0])return caml_call1(Stdlib[2],cst_Not_inversible);
        var y=t[1];
        return [0,y,[1,x]]}
      return caml_call2(List$0[19],_k1_,s)}
    function domain(s)
     {function _kZ_(_k0_){return _k0_[1]}return caml_call2(List$0[19],_kZ_,s)}
    function in_dom(s,x)
     {function _kY_(param){var y=param[1];return caml_call2(Var[2],y,x)}
      return caml_call2(List$0[33],_kY_,s)}
    function restrict(vars,s)
     {function _kW_(param)
       {var x=param[1],_kX_=caml_call1(Var[2],x);
        return caml_call2(List$0[33],_kX_,vars)}
      return caml_call2(List$0[41],_kW_,s)}
    var
     Substitution=
      [0,
       to_string$12,
       empty$0,
       id,
       rename,
       simple,
       add$5,
       find$1,
       app$0,
       compose,
       eq$12,
       is_renaming,
       is_injective_renaming,
       inv$2,
       domain,
       in_dom,
       restrict],
     W=Multisets([0,Var[2],Var[6],Var[3]]),
     _z_=[0,W[10],W[7],W[6],W[8],W[2],W[12],W[1]],
     include$2=caml_call1(caml_call1(OverRing[1],include$0),_z_),
     Ring$0=include$2[1],
     E=include$2[2],
     zero$5=include$2[3],
     cinj=include$2[4],
     inj=include$2[5],
     coeff=include$2[6],
     included=include$2[7],
     eq$13=include$2[8],
     compare$6=include$2[9],
     add_monomial=include$2[10],
     add$6=include$2[11],
     cmul=include$2[12],
     neg$5=include$2[13],
     sub$1=include$2[14],
     map$1=include$2[16],
     iter$1=include$2[17],
     Map$0=include$2[18],
     Pres$1=include$2[19],
     one$3=include$2[20],
     mul_monomial=include$2[21],
     mul$5=include$2[22],
     leading=include$2[23],
     is_commutative=W[1];
    function to_string$13(p)
     {if(caml_call2(eq$13,p,zero$5))return cst_0$0;
      var ans=[0,cst$92];
      function w(s){ans[1] = caml_call2(Stdlib[28],ans[1],s);return 0}
      caml_call2
       (iter$1,
        function(a,u)
         {var
           a$0=
            0 <= a
             ?caml_string_notequal(ans[1],cst$93)?(w(cst$94),a):a
             :(w(cst$95),- a | 0);
          if
           (caml_call2(include$0[1],a$0,include$0[6])
            &&
            caml_call2(W[10],u,W[6]))
           return w(cst_1);
          if(1 - caml_call2(include$0[1],a$0,include$0[6]))
           w(caml_call1(include$0[7],a$0));
          var _kV_=1 - caml_call2(W[10],u,W[6]);
          return _kV_?w(caml_call1(W[2],u)):_kV_},
        p);
      return ans[1]}
    function var$1(x){return caml_call1(inj,caml_call1(W[13],x))}
    function pow(u,n){return simple_pow(one$3,mul$5,u,n)}
    var
     P=
      [0,
       Ring$0,
       E,
       zero$5,
       cinj,
       inj,
       coeff,
       included,
       eq$13,
       compare$6,
       add_monomial,
       add$6,
       cmul,
       neg$5,
       sub$1,
       map$1,
       iter$1,
       Map$0,
       Pres$1,
       one$3,
       mul_monomial,
       mul$5,
       leading,
       is_commutative,
       to_string$13,
       var$1,
       pow],
     include$3=caml_call1(W[15],[0,P[8],P[21],P[19],P[26],P[24],P[9],P[23]]),
     E$0=include$3[1],
     of_list=include$3[2],
     app$1=include$3[3],
     _A_=include$3[4];
    function bind(s,p)
     {function _kU_(u){return caml_call2(_A_,s,u)}
      return caml_call2(P[15],_kU_,p)}
    var
     S=[0,E$0,of_list,app$1,bind],
     Ring$1=P[1],
     E$1=P[2],
     zero$6=P[3],
     cinj$0=P[4],
     inj$0=P[5],
     coeff$0=P[6],
     included$0=P[7],
     eq$14=P[8],
     compare$7=P[9],
     add_monomial$0=P[10],
     add$7=P[11],
     cmul$0=P[12],
     neg$6=P[13],
     sub$2=P[14],
     map$2=P[15],
     iter$2=P[16],
     Map$1=P[17],
     Pres$2=P[18],
     one$4=P[19],
     mul_monomial$0=P[20],
     mul$6=P[21],
     leading$0=P[22],
     is_commutative$0=P[23],
     to_string$14=P[24],
     var$2=P[25],
     pow$0=P[26];
    function interpretation(op,t)
     {if(0 === t[0])
       {var
         l=t[2],
         f=t[1],
         _kQ_=function(i){return caml_call1(Var[1],0)},
         _kR_=caml_call1(Op$0[3],f),
         v=caml_call2(List$0[10],_kR_,_kQ_),
         _kS_=function(x,t){return [0,x,interpretation(op,t)]},
         s=caml_call3(List$0[28],_kS_,v,l),
         s$0=caml_call1(S[2],s),
         _kT_=caml_call2(op,f,caml_call1(Stdlib_Array[12],v));
        return caml_call2(S[4],s$0,_kT_)}
      var x=t[1];
      return caml_call1(P[25],x)}
    var
     Polynomial$0=
      [0,
       W,
       P,
       S,
       Ring$1,
       E$1,
       zero$6,
       cinj$0,
       inj$0,
       coeff$0,
       included$0,
       eq$14,
       compare$7,
       add_monomial$0,
       add$7,
       cmul$0,
       neg$6,
       sub$2,
       map$2,
       iter$2,
       Map$1,
       Pres$2,
       one$4,
       mul_monomial$0,
       mul$6,
       leading$0,
       is_commutative$0,
       to_string$14,
       var$2,
       pow$0,
       interpretation],
     Interpretation=[0,Polynomial$0],
     Not_unifiable=[248,cst_Alg_Term_Not_unifiable,caml_fresh_oo_id(0)];
    function unify(t1,t2)
     {var q$4=[0,[0,t1,t2],0],q=q$4,s=Substitution[2];
      for(;;)
       {if(q)
         {var q$0=q[2],p=q[1],_kI_=p[1];
          if(0 === _kI_[0])
           {var _kJ_=p[2],_kK_=_kI_[2],_kL_=_kI_[1];
            if(0 === _kJ_[0])
             {var a2=_kJ_[2],f2=_kJ_[1];
              if(1 - caml_call2(Op$0[5],_kL_,f2))throw Not_unifiable;
              var
               _kM_=caml_call3(List$0[28],pair,_kK_,a2),
               q$1=caml_call2(Stdlib[37],_kM_,q$0),
               q=q$1;
              continue}
            var match=p[2],x=match[1],q$2=[0,[0,[1,x],_kI_],q$0],q=q$2;
            continue}
          var t=p[2],x$0=_kI_[1];
          if(occurs(x$0,t))throw Not_unifiable;
          var
           s$0=caml_call2(Substitution[5],x$0,t),
           f=caml_call1(Substitution[8],s$0),
           _kN_=
            function(f)
              {return function(param)
                {var t2=param[2],t1=param[1],_kP_=caml_call1(f,t2);
                 return [0,caml_call1(f,t1),_kP_]}}
             (f),
           q$3=caml_call2(List$0[19],_kN_,q$0),
           s$1=caml_call2(Substitution[9],s,s$0),
           s$2=caml_call3(Substitution[6],s$1,x$0,t),
           q=q$3,
           s=s$2;
          continue}
        var _kO_=caml_call2(Substitution[8],s,t2);
        if(eq$11(caml_call2(Substitution[8],s,t1),_kO_))return s;
        throw [0,Assert_failure,_B_]}}
    function matches(t1,t2)
     {var q$2=[0,[0,t1,t2],0],q=q$2,s=Substitution[2];
      for(;;)
       {if(q)
         {var q$0=q[2],p=q[1],_kD_=p[1];
          if(0 === _kD_[0])
           {var _kE_=p[2],_kF_=_kD_[2],_kG_=_kD_[1];
            if(0 === _kE_[0])
             {var a2=_kE_[2],f2=_kE_[1];
              if(1 - caml_call2(Op$0[5],_kG_,f2))throw Not_unifiable;
              var
               _kH_=caml_call3(List$0[28],pair,_kF_,a2),
               q$1=caml_call2(Stdlib[37],_kH_,q$0),
               q=q$1;
              continue}
            throw Not_unifiable}
          var t=p[2],x=_kD_[1];
          if(caml_call2(Substitution[15],s,x))
           {if(eq$11(caml_call2(Substitution[8],s,[1,x]),t))
             {var q=q$0;continue}
            throw Not_unifiable}
          var s$0=caml_call3(Substitution[6],s,x,t),q=q$0,s=s$0;
          continue}
        return s}}
    function equivalent(opt,t1)
     {if(opt)var sth=opt[1],s=sth;else var s=Substitution[2];
      return function(t2)
       {function aux(q,s)
         {var q$0=q,s$0=s;
          for(;;)
           {if(q$0)
             {var q$1=q$0[2],p=q$0[1],_kw_=p[1];
              if(0 === _kw_[0])
               {var _kx_=p[2],_ky_=_kw_[2],_kz_=_kw_[1];
                if(0 === _kx_[0])
                 {var a2=_kx_[2],f2=_kx_[1];
                  if(1 - caml_call2(Op$0[5],_kz_,f2))throw Not_unifiable;
                  var
                   _kA_=caml_call3(List$0[28],pair,_ky_,a2),
                   q$2=caml_call2(Stdlib[37],_kA_,q$1),
                   q$0=q$2;
                  continue}}
              else
               {var _kB_=_kw_[1],_kC_=p[2];
                if(0 !== _kC_[0])
                 {var y=_kC_[1];
                  if(caml_call2(Substitution[15],s$0,_kB_))
                   {if(eq$11(caml_call2(Substitution[8],s$0,[1,_kB_]),[1,y]))
                     {var q$0=q$1;continue}
                    throw Not_unifiable}
                  var
                   s$1=caml_call3(Substitution[6],s$0,_kB_,[1,y]),
                   q$0=q$1,
                   s$0=s$1;
                  continue}}
              throw Not_unifiable}
            return s$0}}
        try
         {aux([0,[0,t1,t2],0],s);var _ku_=1;return _ku_}
        catch(_kv_)
         {_kv_ = caml_wrap_exception(_kv_);
          if(_kv_ === Not_unifiable)return 0;
          throw _kv_}}}
    function list_remove_nth(n,param)
     {var n$0=n,p=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(0 === n$0)return [0,caml_call1(List$0[9],p),l];
          var p$0=[0,x,p],n$1=n$0 - 1 | 0,n$0=n$1,p=p$0,param$0=l;
          continue}
        throw [0,Assert_failure,_C_]}}
    function make$1(r,s,t){return [0,r,s,t]}
    function of_string(ops,r,s,t)
     {var s$0=parse(ops,s),t$0=parse(ops,t);return [0,r,s$0,t$0]}
    function name$0(param){var r=param[1];return r}
    function source(param){var s=param[2];return s}
    function target(param){var t=param[3];return t}
    function vars$1(r){return vars$0(r[2])}
    function arity$0(r){var _kt_=vars$1(r);return caml_call1(List$0[1],_kt_)}
    function args(r,s)
     {var vars=vars$1(r);
      function _km_(param,_kp_)
       {var y=_kp_[1],x=param[1];
        function _kq_(z){return caml_call2(Var[2],z,y)}
        var _kr_=caml_call2(List$0[63],_kq_,vars);
        function _ks_(z){return caml_call2(Var[2],z,x)}
        return caml_call2(List$0[63],_ks_,vars) - _kr_ | 0}
      var args=caml_call2(List$0[56],_km_,s);
      function _kn_(_ko_){return _ko_[2]}
      return caml_call2(List$0[19],_kn_,args)}
    function args_subst(r,a)
     {var _kk_=vars$1(r);
      function _kl_(x,t){return [0,x,t]}
      return caml_call3(List$0[28],_kl_,_kk_,a)}
    function to_string$15(var$0,r)
     {var
       s=to_string$11(var$0,r[2]),
       t=to_string$11(var$0,r[3]),
       _kh_=caml_call2(Stdlib[28],cst$96,t),
       _ki_=caml_call2(Stdlib[28],s,_kh_),
       _kj_=caml_call2(Stdlib[28],cst$97,_ki_);
      return caml_call2(Stdlib[28],r[1],_kj_)}
    function eq$15(r1,r2){return caml_string_equal(r1[1],r2[1])}
    var
     Rule=
      [0,
       make$1,
       of_string,
       name$0,
       source,
       target,
       vars$1,
       arity$0,
       args,
       args_subst,
       to_string$15,
       eq$15];
    function operations(rs){return rs[1]}
    function rules(rs){return rs[2]}
    function filter$0(p,rs)
     {var _kg_=caml_call2(List$0[41],p,rs[2]);return [0,rs[1],_kg_]}
    function make$2(operations,rules){return [0,operations,rules]}
    function empty$1(ops){return [0,ops,0]}
    function to_string$16(opt,rs)
     {if(opt)var sth=opt[1],var$0=sth;else var var$0=Var[4];
      var _kc_=rs[2];
      function _kd_(r)
       {var _kf_=[0,caml_call1(var$0,0)];return caml_call2(Rule[10],_kf_,r)}
      var _ke_=caml_call2(List$0[19],_kd_,_kc_);
      return caml_call2(String$0[6],cst$98,_ke_)}
    function find$2(rs,r)
     {var _ka_=rs[2];
      function _kb_(r$0){return caml_string_equal(caml_call1(Rule[3],r$0),r)}
      return caml_call2(List$0[38],_kb_,_ka_)}
    function of_term(param){throw [0,Assert_failure,_D_]}
    function tapp(f,a1,s,a2)
     {var _j__=caml_call1(Op$0[3],f),_j$_=caml_call1(List$0[1],a2);
      if(((caml_call1(List$0[1],a1) + 1 | 0) + _j$_ | 0) === _j__)
       return [0,f,a1,s,a2];
      throw [0,Assert_failure,_E_]}
    function rapp(r,s)
     {var vr=caml_call1(Rule[6],r),vs=caml_call1(Substitution[14],s);
      function _j6_(x)
       {var _j9_=caml_call1(Var[2],x);return caml_call2(List$0[33],_j9_,vs)}
      if(caml_call2(List$0[32],_j6_,vr))
       {var
         _j7_=
          function(x)
           {var _j8_=caml_call1(Var[2],x);
            return caml_call2(List$0[33],_j8_,vr)};
        if(caml_call2(List$0[32],_j7_,vs))return [1,r,s];
        throw [0,Assert_failure,_F_]}
      throw [0,Assert_failure,_G_]}
    function subst(s,param)
     {if(0 === param[0])
       {var
         a2=param[4],
         st=param[3],
         a1=param[2],
         f=param[1],
         _j2_=caml_call1(Substitution[8],s),
         _j3_=caml_call2(List$0[19],_j2_,a2),
         _j4_=subst(s,st),
         _j5_=caml_call1(Substitution[8],s);
        return tapp(f,caml_call2(List$0[19],_j5_,a1),_j4_,_j3_)}
      var s$0=param[2],r=param[1];
      return rapp(r,caml_call2(Substitution[9],s$0,s))}
    function source$0(param)
     {if(0 === param[0])
       {var
         a2=param[4],
         s=param[3],
         a1=param[2],
         f=param[1],
         _jZ_=[0,source$0(s),0],
         _j0_=caml_call2(Stdlib[37],_jZ_,a2);
        return app(f,caml_call2(Stdlib[37],a1,_j0_))}
      var s$0=param[2],r=param[1],_j1_=caml_call1(Rule[4],r);
      return caml_call2(Substitution[8],s$0,_j1_)}
    function target$0(param)
     {if(0 === param[0])
       {var
         a2=param[4],
         s=param[3],
         a1=param[2],
         f=param[1],
         _jW_=[0,target$0(s),0],
         _jX_=caml_call2(Stdlib[37],_jW_,a2);
        return app(f,caml_call2(Stdlib[37],a1,_jX_))}
      var s$0=param[2],r=param[1],_jY_=caml_call1(Rule[5],r);
      return caml_call2(Substitution[8],s$0,_jY_)}
    function label(opt,param)
     {if(opt)var sth=opt[1],var$0=sth;else var var$0=Var[6];
      if(0 === param[0])
       {var
         a2=param[4],
         s=param[3],
         a1=param[2],
         f=param[1],
         _jO_=string_of_term([0,var$0]),
         a1$0=caml_call2(List$0[19],_jO_,a1),
         _jP_=string_of_term([0,var$0]),
         a2$0=caml_call2(List$0[19],_jP_,a2),
         _jQ_=[0,label([0,var$0],s),0],
         _jR_=caml_call2(Stdlib[37],_jQ_,a2$0),
         a=caml_call2(Stdlib[37],a1$0,_jR_);
        return caml_call2(Op$0[6],f,a)}
      var
       s$0=param[2],
       r=param[1],
       a$0=caml_call2(Rule[8],r,s$0),
       _jS_=string_of_term([0,var$0]),
       a$1=caml_call2(List$0[19],_jS_,a$0),
       a$2=caml_call2(String$0[6],cst$99,a$1),
       _jT_=caml_call2(Stdlib[28],a$2,cst$100),
       _jU_=caml_call2(Stdlib[28],cst$101,_jT_),
       _jV_=caml_call1(Rule[3],r);
      return caml_call2(Stdlib[28],_jV_,_jU_)}
    function to_string$17(var$0,s)
     {var
       _jG_=target$0(s),
       _jH_=caml_call1(string_of_term(var$0),_jG_),
       _jI_=caml_call2(Stdlib[28],cst$102,_jH_),
       _jJ_=label(var$0,s),
       _jK_=caml_call2(Stdlib[28],_jJ_,_jI_),
       _jL_=caml_call2(Stdlib[28],cst$103,_jK_),
       _jM_=source$0(s),
       _jN_=caml_call1(string_of_term(var$0),_jM_);
      return caml_call2(Stdlib[28],_jN_,_jL_)}
    function rule(param)
     {var param$0=param;
      for(;;)
       {if(0 === param$0[0]){var param$1=param$0[3],param$0=param$1;continue}
        var r=param$0[1];
        return r}}
    function has_context(param)
     {if(0 === param[0])return 1;
      var s=param[2];
      return 1 - caml_call1(Substitution[12],s)}
    function eq$16(s1,s2)
     {if(0 === s1[0])
       {var _jr_=s1[4],_jt_=s1[2],_js_=s1[3],_ju_=s1[1];
        if(0 === s2[0])
         {var
           a2=s2[4],
           s=s2[3],
           a1=s2[2],
           f=s2[1],
           _jv_=caml_call2(Op$0[5],_ju_,f);
          if(_jv_)
           {var
             _jw_=caml_call1(List$0[1],a1),
             _jx_=caml_call1(List$0[1],_jt_) === _jw_?1:0;
            if(_jx_)
             {var
               _jy_=caml_call1(List$0[1],a2),
               _jz_=caml_call1(List$0[1],_jr_) === _jy_?1:0;
              if(_jz_)
               {var _jA_=caml_call3(List$0[34],eq$11,_jt_,a1);
                if(_jA_)
                 {var _jB_=eq$16(_js_,s);
                  if(_jB_)return caml_call3(List$0[34],eq$11,_jr_,a2);
                  var _jC_=_jB_}
                else
                 var _jC_=_jA_}
              else
               var _jC_=_jz_}
            else
             var _jC_=_jx_}
          else
           var _jC_=_jv_;
          return _jC_}}
      else
       {var _jD_=s1[2],_jE_=s1[1];
        if(0 !== s2[0])
         {var s$0=s2[2],r=s2[1],_jF_=caml_call2(Rule[11],_jE_,r);
          return _jF_?caml_call2(Substitution[10],_jD_,s$0):_jF_}}
      return 0}
    function has_rule(r,param)
     {var param$0=param;
      for(;;)
       {if(0 === param$0[0]){var param$1=param$0[3],param$0=param$1;continue}
        var r$0=param$0[1];
        return caml_call2(Rule[11],r,r$0)}}
    var
     Step=
      [0,
       of_term,
       tapp,
       rapp,
       subst,
       source$0,
       target$0,
       label,
       to_string$17,
       rule,
       has_context,
       eq$16,
       has_rule];
    function steps(rs,t)
     {function aux(r,ctx,t)
       {if(0 === t[0])
         {var a=t[2],f=t[1];
          try
           {var
             s$2=matches(caml_call1(Rule[4],r),t),
             _jp_=[0,caml_call1(ctx,caml_call2(Step[3],r,s$2)),0],
             s=_jp_}
          catch(_jq_)
           {_jq_ = caml_wrap_exception(_jq_);
            if(_jq_ !== Not_unifiable)throw _jq_;
            var s=0}
          var
           _jo_=
            function(i,t)
             {var match=list_remove_nth(i,a),a2=match[2],a1=match[1];
              function ctx$0(t)
               {return caml_call1(ctx,caml_call4(Step[2],f,a1,t,a2))}
              return aux(r,ctx$0,t)},
           s$0=caml_call2(List$0[20],_jo_,a),
           s$1=caml_call1(List$0[14],s$0);
          return caml_call2(Stdlib[37],s$1,s)}
        return 0}
      var _jk_=rs[2];
      function _jl_(r){return aux(r,function(_jn_){return _jn_},t)}
      var _jm_=caml_call2(List$0[19],_jl_,_jk_);
      return caml_call1(List$0[14],_jm_)}
    function empty$2(t){return [0,t]}
    function source$1(param)
     {var param$0=param;
      for(;;)
       {if(0 === param$0[0]){var t=param$0[1];return t}
        var param$1=param$0[1],param$0=param$1;
        continue}}
    function target$1(param)
     {if(0 === param[0]){var t=param[1];return t}
      var s=param[2];
      return caml_call1(Step[6],s)}
    function step(s){return [1,[0,caml_call1(Step[5],s)],s]}
    function append_step(p,s)
     {var _jj_=caml_call1(Step[5],s);
      if(eq$11(target$1(p),_jj_))return [1,p,s];
      throw [0,Assert_failure,_H_]}
    function to_string$18(var$0,param)
     {if(0 === param[0])
       {var t=param[1];return caml_call1(string_of_term(var$0),t)}
      var
       s=param[2],
       p=param[1],
       src=to_string$18(var$0,p),
       lbl=caml_call2(Step[7],var$0,s),
       _jf_=caml_call1(Step[6],s),
       tgt=caml_call1(string_of_term(var$0),_jf_),
       _jg_=caml_call2(Stdlib[28],cst$104,tgt),
       _jh_=caml_call2(Stdlib[28],lbl,_jg_),
       _ji_=caml_call2(Stdlib[28],cst$105,_jh_);
      return caml_call2(Stdlib[28],src,_ji_)}
    function append$0(p,param)
     {if(0 === param[0])
       {var t=param[1];
        if(eq$11(target$1(p),t))return p;
        throw [0,Assert_failure,_I_]}
      var s=param[2],q=param[1];
      return [1,append$0(p,q),s]}
    function toplevel_rules(param)
     {if(0 === param[0])return 0;
      var
       s=param[2],
       p=param[1],
       _jd_=caml_call1(Step[10],s)?0:[0,caml_call1(Step[9],s),0],
       _je_=toplevel_rules(p);
      return caml_call2(Stdlib[37],_je_,_jd_)}
    function eq$17(p$0,p)
     {if(0 === p$0[0])
       {var _i$_=p$0[1];if(0 === p[0]){var t=p[1];return eq$11(_i$_,t)}}
      else
       {var _ja_=p$0[2],_jb_=p$0[1];
        if(0 !== p[0])
         {var s=p[2],p$1=p[1],_jc_=eq$17(_jb_,p$1);
          return _jc_?caml_call2(Step[11],_ja_,s):_jc_}}
      return 0}
    function rules$0(param)
     {if(0 === param[0])return 0;
      var
       s=param[2],
       p=param[1],
       r=caml_call1(Step[9],s),
       rr=rules$0(p),
       _i__=caml_call1(Rule[11],r);
      return caml_call2(List$0[33],_i__,rr)?rr:[0,r,rr]}
    function length$0(param)
     {if(0 === param[0])return 0;var p=param[1];return 1 + length$0(p) | 0}
    function nth_step(n,p)
     {var n$2=(length$0(p) - 1 | 0) - n | 0,n$0=n$2,param=p;
      for(;;)
       {if(0 === param[0])throw [0,Assert_failure,_J_];
        var s=param[2],p$0=param[1];
        if(0 === n$0)return s;
        var n$1=n$0 - 1 | 0,n$0=n$1,param=p$0;
        continue}}
    function nth_term(n,p)
     {var n$2=length$0(p) - n | 0,n$0=n$2,param=p;
      for(;;)
       {if(0 === param[0])
         {var t=param[1];if(0 === n$0)return t;throw [0,Assert_failure,_K_]}
        var s=param[2],p$0=param[1];
        if(0 === n$0)return caml_call1(Step[6],s);
        var n$1=n$0 - 1 | 0,n$0=n$1,param=p$0;
        continue}}
    var
     Path=
      [0,
       empty$2,
       source$1,
       target$1,
       step,
       append_step,
       to_string$18,
       append$0,
       toplevel_rules,
       eq$17,
       rules$0,
       length$0,
       nth_step,
       nth_term];
    function normalize(rs,t)
     {var p$1=caml_call1(Path[1],t),p=p$1;
      for(;;)
       {var s=steps(rs,caml_call1(Path[3],p));
        if(0 === s)return p;
        var _i9_=caml_call1(List$0[5],s),p$0=caml_call2(Path[5],p,_i9_),p=p$0;
        continue}}
    function critical_rules(r1,r2)
     {function aux(ctx,t)
       {if(0 === t[0])
         {var a=t[2],f=t[1];
          try
           {var
             t2=caml_call1(Rule[4],r2),
             _i1_=caml_call1(Rule[6],r2),
             n2=caml_call1(Substitution[4],_i1_),
             s$2=unify(t,caml_call2(Substitution[8],n2,t2)),
             _i2_=caml_call1(Rule[6],r1),
             _i3_=caml_call1(Substitution[3],_i2_),
             _i4_=caml_call2(Substitution[9],_i3_,s$2),
             step1=caml_call2(Step[3],r1,_i4_),
             _i5_=caml_call1(ctx,caml_call2(Step[3],r2,n2)),
             step2=caml_call2(Step[4],s$2,_i5_),
             _i6_=caml_call1(Step[5],step2);
            if(! caml_call1(equivalent(0,caml_call1(Step[5],step1)),_i6_))
             throw [0,Assert_failure,_L_];
            var switch$0=0;
            if
             (caml_call2(Rule[11],r1,r2)
              &&
              !
              caml_call1(Step[10],step1)
              &&
              !
              caml_call1(Step[10],step2))
             {var _i7_=0;switch$0 = 1}
            if(! switch$0)var _i7_=[0,[0,step1,step2],0];
            var s=_i7_}
          catch(_i8_)
           {_i8_ = caml_wrap_exception(_i8_);
            if(_i8_ !== Not_unifiable)throw _i8_;
            var s=0}
          var
           _i0_=
            function(i,t)
             {var match=list_remove_nth(i,a),a2=match[2],a1=match[1];
              function ctx$0(t)
               {return caml_call1(ctx,caml_call4(Step[2],f,a1,t,a2))}
              return aux(ctx$0,t)},
           s$0=caml_call2(List$0[20],_i0_,a),
           s$1=caml_call1(List$0[14],s$0);
          return caml_call2(Stdlib[37],s,s$1)}
        return 0}
      var _iY_=caml_call1(Rule[4],r1);
      return aux(function(_iZ_){return _iZ_},_iY_)}
    function critical(rs)
     {var _iP_=rs[2];
      function _iQ_(r1)
       {var _iW_=rs[2];
        function _iX_(r2){return critical_rules(r1,r2)}
        return caml_call2(List$0[19],_iX_,_iW_)}
      var
       _iR_=caml_call2(List$0[19],_iQ_,_iP_),
       _iS_=caml_call1(List$0[14],_iR_),
       steps=caml_call1(List$0[14],_iS_);
      function sym(param)
       {if(param)
         {var
           steps=param[2],
           match=param[1],
           s2=match[2],
           s1=match[1],
           _iT_=
            function(param)
             {var
               s1$0=param[2],
               s2$0=param[1],
               _iU_=caml_call2(Step[11],s1,s1$0),
               _iV_=_iU_?caml_call2(Step[11],s2,s2$0):_iU_;
              return 1 - _iV_},
           steps$0=caml_call2(List$0[41],_iT_,steps);
          return [0,[0,s1,s2],sym(steps$0)]}
        return 0}
      return sym(steps)}
    function orient(gt,rs)
     {var _iN_=rs[2];
      function _iO_(param)
       {var u=param[3],t=param[2],n=param[1];
        return caml_call2(gt,t,u)?[0,n,t,u]:[0,n,u,t]}
      var rules=caml_call2(List$0[19],_iO_,_iN_);
      return [0,rs[1],rules]}
    function knuth_bendix(opt,namer,_io_,rs)
     {if(opt)
       var sth=opt[1],gt=sth;
      else
       var gt=caml_call1(LPO[1],runtime.caml_greaterequal);
      if(_io_)
       var sth$0=_io_[1],callback=sth$0;
      else
       var callback=function(param){return 0};
      var rs$0=orient(gt,rs);
      if(namer)
       var namer$0=namer[1],namer$1=namer$0;
      else
       var
        n=[0,-1],
        namer$1=
         function(param)
          {n[1]++;
           var _iM_=caml_call1(Stdlib[33],n[1]);
           return caml_call2(Stdlib[28],cst_K,_iM_)};
      var queue=[0,rs$0[2]],rules=[0,rs$0[2]];
      for(;;)
       {if(0 === queue[1])return [0,rs$0[1],rules[1]];
        var r=caml_call1(List$0[5],queue[1]);
        queue[1] = caml_call1(List$0[6],queue[1]);
        var
         _ip_=rules[1],
         _iq_=
          function(r)
            {return function(s)
              {var _iK_=critical_rules(s,r),_iL_=critical_rules(r,s);
               return caml_call2(Stdlib[37],_iL_,_iK_)}}
           (r),
         _ir_=caml_call2(List$0[19],_iq_,_ip_),
         cp=caml_call1(List$0[14],_ir_),
         _is_=
          function(param)
           {var
             s2=param[2],
             s1=param[1],
             rs=[0,rs$0[1],rules[1]],
             _ix_=normalize(rs,caml_call1(Step[6],s1)),
             _iy_=caml_call1(Path[4],s1),
             p1=caml_call2(Path[7],_iy_,_ix_),
             _iz_=normalize(rs,caml_call1(Step[6],s2)),
             _iA_=caml_call1(Path[4],s2),
             p2=caml_call2(Path[7],_iA_,_iz_),
             t1=caml_call1(Path[3],p1),
             t2=caml_call1(Path[3],p2),
             _iB_=1 - eq$11(t1,t2);
            if(_iB_)
             {if(caml_call2(gt,t1,t2))
               var t2$0=t2,t1$0=t1;
              else
               var t2$0=t1,t1$0=t2;
              var
               r=[0,caml_call1(namer$1,0),t1$0,t2$0],
               _iC_=caml_call2(Path[6],0,p2),
               _iD_=caml_call2(Path[6],0,p1),
               _iE_=caml_call2(Rule[10],0,r);
              caml_call4(Stdlib_Printf[2],_M_,_iE_,_iD_,_iC_);
              rules[1] = [0,r,rules[1]];
              var
               _it_=rules[1],
               _iu_=
                function(r)
                 {var t=r[3],s=r[2],n=r[1],_iF_=rules[1];
                  function _iG_(r$0){return 1 - caml_call2(Rule[11],r,r$0)}
                  var
                   rules$0=caml_call2(List$0[41],_iG_,_iF_),
                   rs=[0,rs$0[1],rules$0],
                   _iH_=normalize(rs,t),
                   _iI_=caml_call1(Path[3],_iH_),
                   _iJ_=normalize(rs,s);
                  return [0,n,caml_call1(Path[3],_iJ_),_iI_]};
              rules[1] = caml_call2(List$0[19],_iu_,_it_);
              var
               _iv_=rules[1],
               _iw_=
                function(param)
                 {var t=param[3],s=param[2];return 1 - eq$11(s,t)};
              rules[1] = caml_call2(List$0[41],_iw_,_iv_);
              queue[1] = caml_call2(Stdlib[37],queue[1],[0,r,0]);
              return 0}
            return _iB_};
        caml_call2(List$0[17],_is_,cp);
        caml_call1(callback,[0,rs$0[1],rules[1]]);
        continue}}
    var Not_confluent=[248,cst_Alg_Term_RS_Not_confluent,caml_fresh_oo_id(0)];
    function squier(rs)
     {var _if_=critical(rs);
      function _ig_(param)
       {var
         s2=param[2],
         s1=param[1],
         _ih_=normalize(rs,caml_call1(Step[6],s1)),
         _ii_=caml_call1(Path[4],s1),
         p1=caml_call2(Path[7],_ii_,_ih_),
         _ij_=normalize(rs,caml_call1(Step[6],s2)),
         _ik_=caml_call1(Path[4],s2),
         p2=caml_call2(Path[7],_ik_,_ij_),
         _il_=caml_call1(Path[3],p2);
        if(1 - eq$11(caml_call1(Path[3],p1),_il_))
         {var _im_=caml_call2(Path[6],0,p2),_in_=caml_call2(Path[6],0,p1);
          caml_call3(Stdlib_Printf[2],_N_,_in_,_im_);
          throw Not_confluent}
        return [0,p1,p2]}
      return caml_call2(List$0[19],_ig_,_if_)}
    function to_string$19(opt,var$0,param)
     {if(opt)var sth=opt[1],pa=sth;else var pa=0;
      switch(param[0])
       {case 0:var s=param[1];return caml_call2(Step[7],var$0,s);
        case 1:
         var
          p2=param[2],
          p1=param[1],
          _ia_=to_string$19(0,var$0,p2),
          _ib_=caml_call2(Stdlib[28],cst$106,_ia_),
          _ic_=to_string$19(_O_,var$0,p1),
          s$0=caml_call2(Stdlib[28],_ic_,_ib_);
         if(pa)
          {var _id_=caml_call2(Stdlib[28],s$0,cst$107);
           return caml_call2(Stdlib[28],cst$108,_id_)}
         return s$0;
        case 2:var t=param[1];return caml_call1(string_of_term(var$0),t);
        default:
         var p=param[1],_ie_=to_string$19(_P_,var$0,p);
         return caml_call2(Stdlib[28],_ie_,cst$109)}}
    function source$3(counter,param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var s=param$0[1];return caml_call1(Step[5],s);
         case 1:var param$1=param$0[1],param$0=param$1;continue;
         case 2:var t=param$0[1];return t;
         default:
          var p=param$0[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return target$3(counter$0,p)}
          return caml_trampoline_return(target$3,[0,p])}}
    function target$3(counter,param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var s=param$0[1];return caml_call1(Step[6],s);
         case 1:var param$1=param$0[2],param$0=param$1;continue;
         case 2:var t=param$0[1];return t;
         default:
          var p=param$0[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return source$3(counter$0,p)}
          return caml_trampoline_return(source$3,[0,p])}}
    function source$2(param){return caml_trampoline(source$3(0,param))}
    function target$2(param){return caml_trampoline(target$3(0,param))}
    function step$0(s){return [0,s]}
    function comp(p1,p2)
     {var _h$_=source$2(p2);
      if(eq$11(target$2(p1),_h$_))return [1,p1,p2];
      throw [0,Assert_failure,_Q_]}
    function append$1(p1,p2){return comp(p1,p2)}
    function concat$1(param)
     {if(param)
       {var _h__=param[1];
        if(param[2]){var l=param[2];return append$1(_h__,concat$1(l))}
        return _h__}
      throw [0,Assert_failure,_R_]}
    function inv$3(p){return [3,p]}
    function eq$18(p$0,p)
     {var p$2=p$0,p$1=p;
      for(;;)
       {switch(p$2[0])
         {case 0:
           if(0 === p$1[0])
            {var s=p$1[1],s$0=p$2[1];return caml_call2(Step[11],s$0,s)}
           break;
          case 1:
           if(1 === p$1[0])
            {var
              q=p$1[2],
              p$3=p$1[1],
              q$0=p$2[2],
              p$4=p$2[1],
              _h9_=eq$18(p$4,p$3);
             if(_h9_){var p$2=q$0,p$1=q;continue}
             return _h9_}
           break;
          case 2:
           if(2 === p$1[0]){var t=p$1[1],t$0=p$2[1];return eq$11(t$0,t)}break;
          default:
           if(3 === p$1[0])
            {var p$5=p$1[1],p$6=p$2[1],p$2=p$6,p$1=p$5;continue}}
        return 0}}
    function length$1(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:return 1;
         case 1:
          var q=param$0[2],p=param$0[1],_h8_=length$1(q);
          return length$1(p) + _h8_ | 0;
         case 2:return 0;
         default:var param$1=param$0[1],param$0=param$1;continue}}
    function of_path(p)
     {if(0 === p[0]){var t=p[1];return [2,t]}
      var s=p[2],p$0=p[1];
      return comp(of_path(p$0),[0,s])}
    function map$3(tm,rs,param)
     {switch(param[0])
       {case 0:var s=param[1];return [0,caml_call1(rs,s)];
        case 1:
         var q=param[2],p=param[1],_h7_=map$3(tm,rs,q);
         return [1,map$3(tm,rs,p),_h7_];
        case 2:var t=param[1];return [2,caml_call1(tm,t)];
        default:var p$0=param[1];return [3,map$3(tm,rs,p$0)]}}
    function subst$0(s,param)
     {switch(param[0])
       {case 0:var t=param[1];return [0,caml_call2(Step[4],s,t)];
        case 1:
         var p2=param[2],p1=param[1],_h6_=subst$0(s,p2);
         return [1,subst$0(s,p1),_h6_];
        case 2:var t$0=param[1];return [2,caml_call2(Substitution[8],s,t$0)];
        default:var p=param[1];return [3,subst$0(s,p)]}}
    function rule_occurences(r,param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var s=param$0[1];return caml_call2(Step[12],r,s)?1:0;
         case 1:
          var q=param$0[2],p=param$0[1],_h5_=rule_occurences(r,q);
          return rule_occurences(r,p) + _h5_ | 0;
         case 2:return 0;
         default:var param$1=param$0[1],param$0=param$1;continue}}
    function rule_algebraic_occurences(r,param)
     {switch(param[0])
       {case 0:var s=param[1];return caml_call2(Step[12],r,s)?1:0;
        case 1:
         var q=param[2],p=param[1],_h4_=rule_algebraic_occurences(r,q);
         return rule_algebraic_occurences(r,p) + _h4_ | 0;
        case 2:return 0;
        default:var p$0=param[1];return - rule_algebraic_occurences(r,p$0) | 0}}
    function is_id(param){return 2 === param[0]?1:0}
    function is_inv(param){return 3 === param[0]?1:0}
    function has_rule$0(r,p){return 0 < rule_occurences(r,p)?1:0}
    function canonize(p)
     {var p$0=p;
      for(;;)
       switch(p$0[0])
        {case 0:var s=p$0[1];return [0,s];
         case 1:
          var _hX_=p$0[1];
          if(2 === _hX_[0]){var p$10=p$0[2],p$0=p$10;continue}
          if(2 === p$0[2][0]){var p$0=_hX_;continue}
          switch(_hX_[0])
           {case 1:
             var r=p$0[2],q=_hX_[2],p$4=_hX_[1],p$5=[1,p$4,[1,q,r]],p$0=p$5;
             continue;
            case 3:
             var _h1_=_hX_[1];
             if(0 === _h1_[0])
              {var p$6=p$0[2],s$3=_h1_[1],p$7=canonize(p$6);
               switch(p$7[0])
                {case 0:
                  var s$4=p$7[1];
                  if(caml_call2(Step[11],s$3,s$4))
                   return [2,caml_call1(Step[6],s$4)];
                  break;
                 case 1:
                  var _h2_=p$7[1];
                  if(0 === _h2_[0])
                   {var p$8=p$7[2],s$5=_h2_[1];
                    if(caml_call2(Step[11],s$3,s$5))return p$8}
                  break;
                 case 2:return [3,[0,s$3]]
                 }
               return [1,[3,[0,s$3]],p$7]}
             var q$0=p$0[2],p$9=[1,canonize(_hX_),q$0],p$0=p$9;
             continue;
            default:
             var p$1=p$0[2],s$0=_hX_[1],p$2=canonize(p$1);
             switch(p$2[0])
              {case 1:
                var _hY_=p$2[1];
                if(3 === _hY_[0])
                 {var _hZ_=_hY_[1];
                  if(0 === _hZ_[0])
                   {var p$3=p$2[2],s$1=_hZ_[1];
                    if(caml_call2(Step[11],s$0,s$1))return p$3}}
                break;
               case 2:return [0,s$0];
               case 3:
                var _h0_=p$2[1];
                if(0 === _h0_[0])
                 {var s$2=_h0_[1];
                  if(caml_call2(Step[11],s$0,s$2))
                   return [2,caml_call1(Step[5],s$0)]}
                break
               }
             return [1,[0,s$0],p$2]}
         case 2:var t=p$0[1];return [2,t];
         default:
          var _h3_=p$0[1];
          switch(_h3_[0])
           {case 0:var s$6=_h3_[1];return [3,[0,s$6]];
            case 1:
             var q$1=_h3_[2],p$11=_h3_[1],p$12=[1,[3,q$1],[3,p$11]],p$0=p$12;
             continue;
            case 2:var t$0=_h3_[1];return [2,t$0];
            default:var p$13=_h3_[1],p$0=p$13;continue}}}
    function value(r,p)
     {var p$0=canonize(p);
      if(1 === rule_occurences(r,p$0))
       {var
         p$1=-1 === rule_algebraic_occurences(r,p$0)?canonize([3,p$0]):p$0,
         prefix$2=[0,[2,source$2(p$1)],0],
         prefix=prefix$2,
         s=p$1;
        for(;;)
         {var switch$0=0;
          switch(s[0])
           {case 0:switch$0 = 1;break;
            case 1:
             var _hS_=s[1],switch$1=0;
             switch(_hS_[0])
              {case 0:
                var _hT_=_hS_[1];
                if(1 === _hT_[0])
                 {var p$2=s[2],s$2=_hT_[2],r$0=_hT_[1];
                  if(caml_call2(Rule[11],r,r$0))
                   {if(has_rule$0(r,p$2))throw [0,Assert_failure,_S_];
                    if(caml_call1(Substitution[11],s$2))
                     {var
                       prefix$1=concat$1(caml_call1(List$0[9],prefix)),
                       _hU_=concat$1([0,[3,prefix$1],[0,[3,p$2],0]]),
                       v=canonize(subst$0(caml_call1(Substitution[13],s$2),_hU_)),
                       _hV_=caml_call1(Rule[4],r);
                      if(eq$11(source$2(v),_hV_))
                       {var _hW_=caml_call1(Rule[5],r);
                        if(eq$11(target$2(v),_hW_))return v;
                        throw [0,Assert_failure,_W_]}
                      throw [0,Assert_failure,_X_]}
                    throw [0,Assert_failure,_T_]}}
                var s$1=s[2];
                break;
               case 3:
                if(0 === _hS_[1][0])var s$1=s[2];else switch$1 = 1;break;
               default:switch$1 = 1}
             if(! switch$1)
              {var prefix$0=[0,_hS_,prefix],prefix=prefix$0,s=s$1;continue}
             break;
            case 2:throw [0,Assert_failure,_V_];
            default:if(0 === s[1][0])switch$0 = 1}
          if(switch$0){var s$0=[1,s,[2,target$2(s)]],s=s$0;continue}
          throw [0,Assert_failure,_U_]}}
      throw [0,Assert_failure,_Y_]}
    function replace_rule(r,pr,p)
     {function rs_ctx$1(_hR_){return _hR_}
      function tm_ctx$1(_hQ_){return _hQ_}
      switch(p[0])
       {case 0:
         var s$1=p[1],tm_ctx=tm_ctx$1,rs_ctx=rs_ctx$1,param=s$1;
         for(;;)
          {if(0 === param[0])
            {var
              a2=param[4],
              param$0=param[3],
              a1=param[2],
              f=param[1],
              tm_ctx$2=
               function(tm_ctx,a2,a1,f)
                {function tm_ctx$0(t)
                  {var _hP_=caml_call2(Stdlib[37],[0,t,0],a2);
                   return tm_ctx(app(f,caml_call2(Stdlib[37],a1,_hP_)))}
                 return tm_ctx$0},
              tm_ctx$0=tm_ctx$2(tm_ctx,a2,a1,f),
              rs_ctx$2=
               function(rs_ctx,a2,a1,f)
                {function rs_ctx$0(s)
                  {return rs_ctx(caml_call4(Step[2],f,a1,s,a2))}
                 return rs_ctx$0},
              rs_ctx$0=rs_ctx$2(rs_ctx,a2,a1,f),
              tm_ctx=tm_ctx$0,
              rs_ctx=rs_ctx$0,
              param=param$0;
             continue}
           var r$0=param[1],s=param[2];
           if(caml_call2(Rule[11],r,r$0))
            return map$3(tm_ctx,rs_ctx,subst$0(s,pr));
           var s$0=param[2];
           return [0,rs_ctx(caml_call2(Step[3],r$0,s$0))]}
        case 1:
         var q=p[2],p$0=p[1],_hO_=replace_rule(r,pr,q);
         return comp(replace_rule(r,pr,p$0),_hO_);
        case 2:var t=p[1];return [2,t];
        default:var p$1=p[1];return [3,replace_rule(r,pr,p$1)]}}
    function nth_step$0(n,param)
     {var n$0=n,param$0=param;
      for(;;)
       {switch(param$0[0])
         {case 0:var s=param$0[1];if(0 === n$0)return [0,1,s];break;
          case 1:
           var _hL_=param$0[1];
           switch(_hL_[0])
            {case 0:
              var p=param$0[2],s$0=_hL_[1];
              if(0 === n$0)return [0,1,s$0];
              var n$1=n$0 - 1 | 0,n$0=n$1,param$0=p;
              continue;
             case 3:
              var _hM_=_hL_[1];
              if(0 === _hM_[0])
               {var p$0=param$0[2],s$1=_hM_[1];
                if(0 === n$0)return [0,0,s$1];
                var n$2=n$0 - 1 | 0,n$0=n$2,param$0=p$0;
                continue}
              break
             }
           break;
          case 3:
           var _hN_=param$0[1];
           if(0 === _hN_[0]){var s$2=_hN_[1];if(0 === n$0)return [0,0,s$2]}
           break
          }
        throw [0,Assert_failure,_Z_]}}
    function nth_term$0(n,p)
     {var n$0=n,p$0=p;
      for(;;)
       {var switch$0=0;
        switch(p$0[0])
         {case 1:
           var _hK_=p$0[1],switch$1=0;
           switch(_hK_[0])
            {case 0:var q=p$0[2];break;
             case 3:if(0 === _hK_[1][0])var q=p$0[2];else switch$1 = 1;break;
             default:switch$1 = 1}
           if(! switch$1)
            {if(0 === n$0)return source$2(_hK_);
             var n$1=n$0 - 1 | 0,n$0=n$1,p$0=q;
             continue}
           break;
          case 3:if(0 === p$0[1][0])switch$0 = 1;break;
          case 2:break;
          default:switch$0 = 1}
        if(switch$0)
         {if(0 === n$0)return source$2(p$0);
          if(1 === n$0)return target$2(p$0);
          throw [0,Assert_failure,___]}
        throw [0,Assert_failure,_$_]}}
    function to_list(param)
     {switch(param[0])
       {case 0:var s=param[1];return [0,[0,s],0];
        case 1:
         var q=param[2],p=param[1],_hF_=to_list(q),_hG_=to_list(p);
         return caml_call2(Stdlib[37],_hG_,_hF_);
        case 2:return 0;
        default:
         var
          p$0=param[1],
          _hH_=to_list(p$0),
          _hI_=caml_call1(List$0[9],_hH_),
          _hJ_=function(p){return [3,p]};
         return caml_call2(List$0[19],_hJ_,_hI_)}}
    function parse$0(rs,s)
     {function unid(param)
       {if(2 === param[0]){var t=param[1];return t}
        throw [0,Assert_failure,_aa_]}
      function aux(param)
       {var _hw_=param[1];
        if(4150143 <= _hw_)
         {if(4298439 <= _hw_)
           {var x=param[2],x$0=parse_var(x);return [2,[1,x$0]]}
          var l=param[2];
          return concat$1(caml_call2(List$0[19],aux,l))}
        if(3654865 <= _hw_){var p=param[2];return [3,aux(p)]}
        var
         match=param[2],
         a=match[2],
         f=match[1],
         a$0=caml_call2(List$0[19],aux,a);
        try
         {var
           _hy_=rs[1],
           _hz_=function(o){return caml_string_equal(caml_call1(Op$0[1],o),f)},
           f$0=caml_call2(List$0[38],_hz_,_hy_);
          if(caml_call2(List$0[32],is_id,a$0))
           var a$2=caml_call2(List$0[19],unid,a$0),t=app(f$0,a$2),_hA_=[2,t];
          else
           {try
             {var
               _hB_=function(p){return 1 - is_id(p)},
               n=caml_call2(List$0[63],_hB_,a$0)}
            catch(_hE_)
             {_hE_ = caml_wrap_exception(_hE_);
              if(_hE_ === Stdlib[8])throw [0,Assert_failure,_ab_];
              throw _hE_}
            var
             t$0=caml_call2(List$0[7],a$0,n),
             match$0=list_remove_nth(n,a$0),
             a2=match$0[2],
             a1=match$0[1],
             a1$0=caml_call2(List$0[19],unid,a1),
             a2$0=caml_call2(List$0[19],unid,a2),
             tm_ctx=
              function(t)
               {var _hD_=caml_call2(Stdlib[37],[0,t,0],a2$0);
                return app(f$0,caml_call2(Stdlib[37],a1$0,_hD_))},
             rs_ctx=function(t){return caml_call4(Step[2],f$0,a1$0,t,a2$0)},
             _hA_=map$3(tm_ctx,rs_ctx,t$0)}
          return _hA_}
        catch(_hC_)
         {_hC_ = caml_wrap_exception(_hC_);
          if(_hC_ === Stdlib[8])
           {var
             r=find$2(rs,f),
             a$1=caml_call2(List$0[19],unid,a$0),
             _hx_=caml_call1(Rule[6],r),
             s=caml_call3(List$0[28],pair,_hx_,a$1);
            return [0,caml_call2(Step[3],r,s)]}
          throw _hC_}}
      return aux(parser(s))}
    var
     Zigzag=
      [0,
       to_string$19,
       source$2,
       target$2,
       step$0,
       comp,
       append$1,
       concat$1,
       inv$3,
       eq$18,
       length$1,
       of_path,
       map$3,
       subst$0,
       rule_occurences,
       rule_algebraic_occurences,
       is_id,
       is_inv,
       has_rule$0,
       canonize,
       value,
       replace_rule,
       nth_step$0,
       nth_term$0,
       to_list,
       parse$0];
    function make$3(p)
     {var _hv_=caml_call1(Zigzag[3],p);
      if(eq$11(caml_call1(Zigzag[2],p),_hv_))return p;
      throw [0,Assert_failure,_ac_]}
    var to_string$20=Zigzag[1],comp$0=Zigzag[5],inv$4=Zigzag[8];
    function of_cell(p1,p2)
     {var _ht_=caml_call1(Zigzag[2],p2);
      if(eq$11(caml_call1(Zigzag[2],p1),_ht_))
       {var _hu_=caml_call1(Zigzag[3],p2);
        if(eq$11(caml_call1(Zigzag[3],p1),_hu_))
         return caml_call2(comp$0,p1,caml_call1(inv$4,p2));
        throw [0,Assert_failure,_ad_]}
      throw [0,Assert_failure,_ae_]}
    var
     canonize$0=Zigzag[19],
     value$0=Zigzag[20],
     replace_rule$0=Zigzag[21],
     length$2=Zigzag[10];
    function rotate(k,p)
     {var
       n=caml_call1(length$2,p),
       k$0=caml_call2(Int$0[1],k,n),
       l=caml_call1(Zigzag[24],p),
       l1=caml_call3(List$0[66],l,0,k$0),
       l2=caml_call3(List$0[66],l,k$0,n - k$0 | 0),
       l1$0=caml_call1(Zigzag[7],l1),
       l2$0=caml_call1(Zigzag[7],l2);
      return caml_call2(Zigzag[5],l2$0,l1$0)}
    var
     Loop=
      [0,
       make$3,
       to_string$20,
       comp$0,
       inv$4,
       of_cell,
       canonize$0,
       value$0,
       replace_rule$0,
       length$2,
       rotate];
    function name$1(c){return c[1]}
    function loop(c){return c[2]}
    function make$4(name,loop){return [0,name,loop]}
    function to_string$21(var$0,c)
     {var p=caml_call1(Loop[6],c[2]),_hs_=caml_call3(Loop[2],0,[0,var$0],p);
      return caml_call3(Stdlib_Printf[4],_af_,c[1],_hs_)}
    function rotate$0(n,init)
     {var _hr_=caml_call2(Loop[10],n,init[2]);return [0,init[1],_hr_]}
    function value$1(r,c){return caml_call2(Loop[7],r,c[2])}
    function replace_rule$1(r,v,init)
     {var _hq_=caml_call3(Loop[8],r,v,init[2]);return [0,init[1],_hq_]}
    var
     Path$0=[0],
     Coherence=
      [0,
       name$1,
       loop,
       make$4,
       to_string$21,
       rotate$0,
       value$1,
       replace_rule$1,
       Path$0];
    function rs(crs){return crs[1]}
    function rules$1(crs){return crs[1][2]}
    function coherence(crs){return crs[2]}
    function set_rules(crs,rules){return [0,[0,crs[1][1],rules],crs[2]]}
    function to_string$22(opt,crs)
     {if(opt)var sth=opt[1],var$0=sth;else var var$0=Var[4];
      var _hn_=crs[2];
      function _ho_(c)
       {var _hp_=caml_call1(var$0,0);return caml_call2(Coherence[4],_hp_,c)}
      var
       coherence=caml_call2(List$0[19],_ho_,_hn_),
       coherence$0=caml_call2(String$0[6],cst$110,coherence);
      return coherence$0}
    function to_tex(opt,crs)
     {if(opt)var sth=opt[1],var$0=sth;else var var$0=Var[5];
      var ans=[0,cst$111];
      function print(s)
       {function _hm_(s){ans[1] = caml_call2(Stdlib[28],ans[1],s);return 0}
        return caml_call2(Stdlib_Printf[10],_hm_,s)}
      print(_ag_);
      var _dy_=rules$1(crs);
      function _dz_(r)
       {var
         var$1=caml_call1(var$0,0),
         _hj_=caml_call1(Rule[4],r),
         s=caml_call1(string_of_term([0,var$1]),_hj_),
         _hk_=caml_call1(Rule[5],r),
         t=caml_call1(string_of_term([0,var$1]),_hk_),
         _hl_=caml_call1(Rule[3],r);
        return caml_call4(Stdlib_Printf[4],_ah_,_hl_,s,t)}
      var
       rules=caml_call2(List$0[19],_dz_,_dy_),
       rules$0=caml_call2(String$0[6],cst$112,rules);
      caml_call1(print(_ai_),rules$0);
      print(_aj_);
      var _dA_=crs[2];
      function _dB_(c)
       {var
         _dC_=caml_call1(Coherence[2],c),
         p=caml_call1(Loop[6],_dC_),
         _dD_=caml_call3(Loop[2],0,0,p),
         _dE_=caml_call1(Coherence[1],c);
        caml_call3(Stdlib_Printf[2],_ak_,_dE_,_dD_);
        var l=caml_call1(Zigzag[24],p);
        if(0 !== l)caml_call1(Zigzag[7],l);
        var n=caml_call1(List$0[1],l);
        if(0 === n)
         var p2=p,p1=p;
        else
         try
          {var k=caml_call2(List$0[63],Zigzag[17],l);
           if(0 === k)throw Stdlib[3];
           var
            l1$0=caml_call3(List$0[66],l,0,k),
            l2$0=caml_call3(List$0[66],l,k,n - k | 0);
           if(1 - caml_call2(List$0[32],Zigzag[17],l2$0))throw Stdlib[3];
           var
            p1$1=caml_call1(Zigzag[7],l1$0),
            _dK_=caml_call1(Zigzag[7],l2$0),
            _dL_=caml_call1(Zigzag[8],_dK_),
            p2$1=caml_call1(Zigzag[19],_dL_),
            _dM_=caml_call1(List$0[1],l2$0);
           if(_dM_ < caml_call1(List$0[1],l1$0))
            var p2$2=p1$1,p1$2=p2$1;
           else
            var p2$2=p2$1,p1$2=p1$1;
           var
            p2$3=caml_call1(Zigzag[19],p2$2),
            _dN_=caml_call1(Zigzag[19],p1$2),
            p2=p2$3,
            p1=_dN_}
         catch(_hi_)
          {_hi_ = caml_wrap_exception(_hi_);
           if(_hi_ !== Stdlib[3] && _hi_ !== Stdlib[8])throw _hi_;
           var
            l1=caml_call3(List$0[66],l,0,n / 2 | 0),
            l2=caml_call3(List$0[66],l,n / 2 | 0,n - (n / 2 | 0) | 0),
            _dI_=caml_call1(Zigzag[7],l2),
            _dJ_=caml_call1(Zigzag[8],_dI_),
            p2$0=caml_call1(Zigzag[19],_dJ_),
            p1$0=caml_call1(Zigzag[7],l1),
            p2=p2$0,
            p1=p1$0}
        var
         _dF_=caml_call3(Zigzag[1],0,0,p2),
         _dG_=caml_call3(Zigzag[1],0,0,p1);
        caml_call3(Stdlib_Printf[2],_al_,_dG_,_dF_);
        var var$1=caml_call1(var$0,0);
        function st(n,p)
         {var
           match=caml_call2(Zigzag[22],n,p),
           s=match[2],
           d=match[1],
           d$0=d?cst$113:cst$116,
           s$0=caml_call2(Step[7],[0,var$1],s),
           _hg_=caml_call2(Stdlib[28],s$0,cst$114),
           _hh_=caml_call2(Stdlib[28],cst$115,_hg_);
          return caml_call2(Stdlib[28],d$0,_hh_)}
        function tm(n,p)
         {var _hf_=caml_call2(Zigzag[23],n,p);
          return caml_call1(string_of_term([0,var$1]),_hf_)}
        function cd(param)
         {var
           match=caml_call1(Zigzag[10],p1),
           match$0=caml_call1(Zigzag[10],p2),
           _dO_=match - 1 | 0;
          if(! (2 < _dO_ >>> 0))
           switch(_dO_)
            {case 0:
              var switcher=match$0 - 1 | 0;
              if(! (5 < switcher >>> 0))
               switch(switcher)
                {case 0:
                  var _ez_=tm(1,p1),_eA_=st(0,p2),_eB_=st(0,p1),_eC_=tm(0,p1);
                  return caml_call4(print(_ay_),_eC_,_eB_,_eA_,_ez_);
                 case 1:
                  var
                   _eD_=tm(2,p2),
                   _eE_=st(1,p2),
                   _eF_=tm(1,p2),
                   _eG_=st(0,p2),
                   _eH_=st(0,p1),
                   _eI_=tm(0,p1);
                  return caml_call6(print(_az_),_eI_,_eH_,_eG_,_eF_,_eE_,_eD_);
                 case 2:
                  var
                   _eJ_=tm(3,p2),
                   _eK_=st(2,p2),
                   _eL_=tm(2,p2),
                   _eM_=st(1,p2),
                   _eN_=tm(1,p2),
                   _eO_=st(0,p2),
                   _eP_=st(0,p1),
                   _eQ_=tm(0,p1);
                  return caml_call8
                          (print(_aA_),_eQ_,_eP_,_eO_,_eN_,_eM_,_eL_,_eK_,_eJ_);
                 case 3:
                  var
                   _eR_=tm(4,p2),
                   _eS_=st(3,p2),
                   _eT_=tm(3,p2),
                   _eU_=st(2,p2),
                   _eV_=tm(2,p2),
                   _eW_=st(1,p2),
                   _eX_=tm(1,p2),
                   _eY_=st(0,p2),
                   _eZ_=st(0,p1),
                   _e0_=tm(0,p1);
                  return caml_call10
                          (print(_aB_),
                           _e0_,
                           _eZ_,
                           _eY_,
                           _eX_,
                           _eW_,
                           _eV_,
                           _eU_,
                           _eT_,
                           _eS_,
                           _eR_);
                 case 4:
                  var
                   _e1_=tm(5,p2),
                   _e2_=st(4,p2),
                   _e3_=tm(4,p2),
                   _e4_=st(3,p2),
                   _e5_=tm(3,p2),
                   _e6_=st(2,p2),
                   _e7_=tm(2,p2),
                   _e8_=st(1,p2),
                   _e9_=tm(1,p2),
                   _e__=st(0,p2),
                   _e$_=st(0,p1),
                   _fa_=tm(0,p1);
                  return caml_call12
                          (print(_aC_),
                           _fa_,
                           _e$_,
                           _e__,
                           _e9_,
                           _e8_,
                           _e7_,
                           _e6_,
                           _e5_,
                           _e4_,
                           _e3_,
                           _e2_,
                           _e1_);
                 default:
                  var
                   _fb_=tm(6,p2),
                   _fc_=st(5,p2),
                   _fd_=tm(5,p2),
                   _fe_=st(4,p2),
                   _ff_=tm(4,p2),
                   _fg_=st(3,p2),
                   _fh_=tm(3,p2),
                   _fi_=st(2,p2),
                   _fj_=tm(2,p2),
                   _fk_=st(1,p2),
                   _fl_=tm(1,p2),
                   _fm_=st(0,p2),
                   _fn_=st(0,p1),
                   _fo_=tm(0,p1);
                  return caml_call14
                          (print(_aD_),
                           _fo_,
                           _fn_,
                           _fm_,
                           _fl_,
                           _fk_,
                           _fj_,
                           _fi_,
                           _fh_,
                           _fg_,
                           _ff_,
                           _fe_,
                           _fd_,
                           _fc_,
                           _fb_)}
              break;
             case 1:
              var switcher$0=match$0 - 2 | 0;
              if(! (2 < switcher$0 >>> 0))
               switch(switcher$0)
                {case 0:
                  var
                   _fp_=tm(2,p1),
                   _fq_=st(1,p1),
                   _fr_=tm(1,p1),
                   _fs_=st(1,p2),
                   _ft_=tm(1,p2),
                   _fu_=st(0,p2),
                   _fv_=st(0,p1),
                   _fw_=tm(0,p1);
                  return caml_call8
                          (print(_aE_),_fw_,_fv_,_fu_,_ft_,_fs_,_fr_,_fq_,_fp_);
                 case 1:
                  var
                   _fx_=tm(2,p1),
                   _fy_=st(1,p1),
                   _fz_=tm(1,p1),
                   _fA_=st(2,p2),
                   _fB_=tm(2,p2),
                   _fC_=st(1,p2),
                   _fD_=tm(1,p2),
                   _fE_=st(0,p2),
                   _fF_=st(0,p1),
                   _fG_=tm(0,p1);
                  return caml_call10
                          (print(_aF_),
                           _fG_,
                           _fF_,
                           _fE_,
                           _fD_,
                           _fC_,
                           _fB_,
                           _fA_,
                           _fz_,
                           _fy_,
                           _fx_);
                 default:
                  var
                   _fH_=tm(2,p1),
                   _fI_=st(1,p1),
                   _fJ_=tm(1,p1),
                   _fK_=st(3,p2),
                   _fL_=tm(3,p2),
                   _fM_=st(2,p2),
                   _fN_=tm(2,p2),
                   _fO_=st(1,p2),
                   _fP_=tm(1,p2),
                   _fQ_=st(0,p2),
                   _fR_=st(0,p1),
                   _fS_=tm(0,p1);
                  return caml_call12
                          (print(_aG_),
                           _fS_,
                           _fR_,
                           _fQ_,
                           _fP_,
                           _fO_,
                           _fN_,
                           _fM_,
                           _fL_,
                           _fK_,
                           _fJ_,
                           _fI_,
                           _fH_)}
              break;
             default:
              var switcher$1=match$0 - 5 | 0;
              if(! (5 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:
                  var
                   _fT_=tm(3,p1),
                   _fU_=st(2,p1),
                   _fV_=tm(2,p1),
                   _fW_=st(1,p1),
                   _fX_=tm(1,p1),
                   _fY_=st(4,p2),
                   _fZ_=tm(4,p2),
                   _f0_=st(3,p2),
                   _f1_=tm(3,p2),
                   _f2_=st(2,p2),
                   _f3_=tm(2,p2),
                   _f4_=st(1,p2),
                   _f5_=tm(1,p2),
                   _f6_=st(0,p2),
                   _f7_=st(0,p1),
                   _f8_=tm(0,p1);
                  return caml_call16
                          (print(_aH_),
                           _f8_,
                           _f7_,
                           _f6_,
                           _f5_,
                           _f4_,
                           _f3_,
                           _f2_,
                           _f1_,
                           _f0_,
                           _fZ_,
                           _fY_,
                           _fX_,
                           _fW_,
                           _fV_,
                           _fU_,
                           _fT_);
                 case 3:
                  var
                   _f9_=tm(3,p1),
                   _f__=st(2,p1),
                   _f$_=tm(2,p1),
                   _ga_=st(1,p1),
                   _gb_=tm(1,p1),
                   _gc_=st(7,p2),
                   _gd_=tm(7,p2),
                   _ge_=st(6,p2),
                   _gf_=tm(6,p2),
                   _gg_=st(5,p2),
                   _gh_=tm(5,p2),
                   _gi_=st(4,p2),
                   _gj_=tm(4,p2),
                   _gk_=st(3,p2),
                   _gl_=tm(3,p2),
                   _gm_=st(2,p2),
                   _gn_=tm(2,p2),
                   _go_=st(1,p2),
                   _gp_=tm(1,p2),
                   _gq_=st(0,p2),
                   _gr_=st(0,p1),
                   _gs_=tm(0,p1);
                  return caml_call22
                          (print(_aI_),
                           _gs_,
                           _gr_,
                           _gq_,
                           _gp_,
                           _go_,
                           _gn_,
                           _gm_,
                           _gl_,
                           _gk_,
                           _gj_,
                           _gi_,
                           _gh_,
                           _gg_,
                           _gf_,
                           _ge_,
                           _gd_,
                           _gc_,
                           _gb_,
                           _ga_,
                           _f$_,
                           _f__,
                           _f9_);
                 case 4:
                  var
                   _gt_=tm(3,p1),
                   _gu_=st(2,p1),
                   _gv_=tm(2,p1),
                   _gw_=st(1,p1),
                   _gx_=tm(1,p1),
                   _gy_=st(8,p2),
                   _gz_=tm(8,p2),
                   _gA_=st(7,p2),
                   _gB_=tm(7,p2),
                   _gC_=st(6,p2),
                   _gD_=tm(6,p2),
                   _gE_=st(5,p2),
                   _gF_=tm(5,p2),
                   _gG_=st(4,p2),
                   _gH_=tm(4,p2),
                   _gI_=st(3,p2),
                   _gJ_=tm(3,p2),
                   _gK_=st(2,p2),
                   _gL_=tm(2,p2),
                   _gM_=st(1,p2),
                   _gN_=tm(1,p2),
                   _gO_=st(0,p2),
                   _gP_=st(0,p1),
                   _gQ_=tm(0,p1);
                  return caml_call24
                          (print(_aJ_),
                           _gQ_,
                           _gP_,
                           _gO_,
                           _gN_,
                           _gM_,
                           _gL_,
                           _gK_,
                           _gJ_,
                           _gI_,
                           _gH_,
                           _gG_,
                           _gF_,
                           _gE_,
                           _gD_,
                           _gC_,
                           _gB_,
                           _gA_,
                           _gz_,
                           _gy_,
                           _gx_,
                           _gw_,
                           _gv_,
                           _gu_,
                           _gt_);
                 case 5:
                  var
                   _gR_=tm(3,p1),
                   _gS_=st(2,p1),
                   _gT_=tm(2,p1),
                   _gU_=st(1,p1),
                   _gV_=tm(1,p1),
                   _gW_=st(9,p2),
                   _gX_=tm(9,p2),
                   _gY_=st(8,p2),
                   _gZ_=tm(8,p2),
                   _g0_=st(7,p2),
                   _g1_=tm(7,p2),
                   _g2_=st(6,p2),
                   _g3_=tm(6,p2),
                   _g4_=st(5,p2),
                   _g5_=tm(5,p2),
                   _g6_=st(4,p2),
                   _g7_=tm(4,p2),
                   _g8_=st(3,p2),
                   _g9_=tm(3,p2),
                   _g__=st(2,p2),
                   _g$_=tm(2,p2),
                   _ha_=st(1,p2),
                   _hb_=tm(1,p2),
                   _hc_=st(0,p2),
                   _hd_=st(0,p1),
                   _he_=tm(0,p1);
                  return caml_call26
                          (print(_aK_),
                           _he_,
                           _hd_,
                           _hc_,
                           _hb_,
                           _ha_,
                           _g$_,
                           _g__,
                           _g9_,
                           _g8_,
                           _g7_,
                           _g6_,
                           _g5_,
                           _g4_,
                           _g3_,
                           _g2_,
                           _g1_,
                           _g0_,
                           _gZ_,
                           _gY_,
                           _gX_,
                           _gW_,
                           _gV_,
                           _gU_,
                           _gT_,
                           _gS_,
                           _gR_)
                 }}
          if(2 <= match && match$0 === (match + 1 | 0))
           {var
             _dP_=st(2,p2),
             _dQ_=tm(2,p2),
             _dR_=st(1,p2),
             _dS_=tm(1,p2),
             _dT_=st(0,p2),
             _dU_=st(0,p1),
             _dV_=tm(0,p1);
            caml_call7(print(_am_),_dV_,_dU_,_dT_,_dS_,_dR_,_dQ_,_dP_);
            var _dX_=match - 2 | 0,_dW_=1;
            if(! (_dX_ < 1))
             {var i$0=_dW_;
              for(;;)
               {var
                 _d1_=st(i$0 + 2 | 0,p2),
                 _d2_=tm(i$0 + 2 | 0,p2),
                 _d3_=st(i$0,p1),
                 _d4_=tm(i$0,p1);
                caml_call4(print(_ao_),_d4_,_d3_,_d2_,_d1_);
                var _d5_=i$0 + 1 | 0;
                if(_dX_ !== i$0){var i$0=_d5_;continue}
                break}}
            var
             i=match - 1 | 0,
             _dY_=tm(i + 2 | 0,p2),
             _dZ_=st(i,p1),
             _d0_=tm(i,p1);
            return caml_call3(print(_an_),_d0_,_dZ_,_dY_)}
          if(3 <= match && match$0 === match)
           {var
             _d6_=st(2,p2),
             _d7_=tm(2,p2),
             _d8_=st(1,p2),
             _d9_=tm(1,p2),
             _d__=st(0,p2),
             _d$_=st(0,p1),
             _ea_=tm(0,p1);
            caml_call7(print(_ap_),_ea_,_d$_,_d__,_d9_,_d8_,_d7_,_d6_);
            var _ec_=match - 3 | 0,_eb_=1;
            if(! (_ec_ < 1))
             {var i$2=_eb_;
              for(;;)
               {var
                 _ei_=st(i$2 + 2 | 0,p2),
                 _ej_=tm(i$2 + 2 | 0,p2),
                 _ek_=st(i$2,p1),
                 _el_=tm(i$2,p1);
                caml_call4(print(_ar_),_el_,_ek_,_ej_,_ei_);
                var _em_=i$2 + 1 | 0;
                if(_ec_ !== i$2){var i$2=_em_;continue}
                break}}
            var
             i$1=match - 2 | 0,
             _ed_=tm(i$1 + 2 | 0,p2),
             _ee_=st(i$1 + 1 | 0,p1),
             _ef_=tm(i$1 + 1 | 0,p1),
             _eg_=st(i$1,p1),
             _eh_=tm(i$1,p1);
            return caml_call5(print(_aq_),_eh_,_eg_,_ef_,_ee_,_ed_)}
          var
           _en_=caml_call1(Zigzag[8],p2),
           _eo_=caml_call2(Zigzag[6],p1,_en_),
           p=caml_call1(Zigzag[19],_eo_);
          caml_call3(Stdlib_Printf[2],_as_,match,match$0);
          if(caml_call1(Zigzag[16],p))
           {var _ep_=caml_call3(Zigzag[1],0,[0,var$1],p);
            return caml_call1(print(_at_),_ep_)}
          var l=caml_call1(Zigzag[10],p);
          caml_call2(Stdlib_Printf[2],_au_,l);
          var _er_=(l - 1 | 0) / 2 | 0,n=2,_eq_=0;
          if(! (_er_ < 0))
           {var i$3=_eq_;
            for(;;)
             {var _es_=tm(i$3 * 2 | 0,p);
              caml_call1(print(_av_),_es_);
              var
               _eu_=caml_call2(Stdlib[16],n,l - (i$3 * 2 | 0) | 0) - 1 | 0,
               _et_=0;
              if(! (_eu_ < 0))
               {var j=_et_;
                for(;;)
                 {var
                   _ew_=tm(((i$3 * 2 | 0) + j | 0) + 1 | 0,p),
                   _ex_=st((i$3 * 2 | 0) + j | 0,p);
                  caml_call2(print(_ax_),_ex_,_ew_);
                  var _ey_=j + 1 | 0;
                  if(_eu_ !== j){var j=_ey_;continue}
                  break}}
              print(_aw_);
              var _ev_=i$3 + 1 | 0;
              if(_er_ !== i$3){var i$3=_ev_;continue}
              break}}
          return 0}
        var _dH_=caml_call1(Coherence[1],c);
        caml_call1(print(_aL_),_dH_);
        print(_aM_);
        cd(0);
        return print(_aN_)}
      caml_call2(List$0[17],_dB_,_dA_);
      print(_aO_);
      return ans[1]}
    function view_pdf(var$0,rs)
     {var
       match=caml_call5(Stdlib_Filename[17],0,0,0,cst_ocaml_alg,cst_tex),
       oc=match[2],
       fname=match[1],
       _dw_=to_tex(var$0,rs);
      caml_call2(Stdlib[66],oc,_dw_);
      caml_call1(Stdlib[76],oc);
      var
       _dx_=caml_call1(Stdlib_Filename[18],0),
       cmd=caml_call4(Stdlib_Printf[4],_aP_,_dx_,fname,fname);
      if(0 === runtime.caml_sys_system_command(cmd))return 0;
      throw [0,Assert_failure,_aQ_]}
    function make$5(rs,coherence){return [0,rs,coherence]}
    function find_rule(crs,r){return find$2(crs[1],r)}
    function find$3(rs,crs)
     {var _du_=rs[2];
      function _dv_(c)
       {return caml_string_equal(caml_call1(Coherence[1],c),crs)}
      return caml_call2(List$0[38],_dv_,_du_)}
    function add_coherence(crs,c,p)
     {var _ds_=caml_call1(Zigzag[3],p);
      if(eq$11(caml_call1(Zigzag[2],p),_ds_))
       {var
         _dt_=[0,caml_call2(Coherence[3],c,p),0],
         coherence=caml_call2(Stdlib[37],crs[2],_dt_);
        return [0,crs[1],coherence]}
      throw [0,Assert_failure,_aR_]}
    function rotate$1(crs,cname,n)
     {var _dq_=crs[2];
      function _dr_(c)
       {return caml_string_equal(caml_call1(Coherence[1],c),cname)
                ?caml_call2(Coherence[5],n,c)
                :c}
      var coherence=caml_call2(List$0[19],_dr_,_dq_);
      return [0,crs[1],coherence]}
    function elim_rule(crs,r,c)
     {var
       r$0=find_rule(crs,r),
       c$0=find$3(crs,c),
       v=caml_call2(Coherence[6],r$0,c$0),
       var$0=caml_call1(Var[5],0),
       _dk_=caml_call3(Zigzag[1],0,[0,var$0],v),
       _dl_=caml_call2(Rule[10],[0,var$0],r$0);
      caml_call3(Stdlib_Printf[2],_aS_,_dl_,_dk_);
      var _dm_=rules$1(crs);
      function _dn_(r){return 1 - caml_call2(Rule[11],r$0,r)}
      var rules=caml_call2(List$0[41],_dn_,_dm_),_do_=crs[2];
      function _dp_(c){return caml_call3(Coherence[7],r$0,v,c)}
      var coherence=caml_call2(List$0[19],_dp_,_do_);
      return [0,[0,crs[1][1],rules],coherence]}
    var
     Morphism=[0],
     Coherent=
      [0,
       rs,
       rules$1,
       coherence,
       set_rules,
       to_string$22,
       to_tex,
       view_pdf,
       make$5,
       find_rule,
       find$3,
       add_coherence,
       rotate$1,
       elim_rule,
       Morphism],
     RS=
      [0,
       list_remove_nth,
       Rule,
       operations,
       rules,
       filter$0,
       make$2,
       empty$1,
       to_string$16,
       find$2,
       Step,
       steps,
       Path,
       normalize,
       critical_rules,
       critical,
       orient,
       knuth_bendix,
       Not_confluent,
       squier,
       Zigzag,
       Loop,
       Coherence,
       Coherent],
     Alg_Term=
      [0,
       Op$0,
       Var,
       var$0,
       app,
       parser,
       parse_var,
       parse,
       eq$11,
       eq$11,
       to_string$11,
       string_of_term,
       is_var,
       get_var,
       vars$0,
       occurs,
       LPO,
       Substitution,
       Interpretation,
       Not_unifiable,
       unify,
       matches,
       equivalent,
       RS];
    caml_register_global(316,Alg_Term,"Alg__Term");
    function Pres$3(X){return [0]}
    var Alg_Simplicial=[0,Pres$3];
    caml_register_global(317,Alg_Simplicial,"Alg__Simplicial");
    function Make$0(K)
     {function eq(a,b){return caml_call1(Stdlib[2],cst_Cannot_implement_this)}
      function get(a,n)
       {var
         af=a[2],
         aw=a[1],
         awl=caml_call1(Stdlib_Weak[2],aw[1]),
         x=n < awl?caml_call2(Stdlib_Weak[4],aw[1],n):0;
        if(x){var x$0=x[1];return x$0}
        var x$1=caml_call1(af,n);
        if(awl <= n)
         {var aw$0=caml_call1(Stdlib_Weak[1],n + 1 | 0);
          caml_call5(Stdlib_Weak[8],aw$0,0,aw[1],0,awl);
          aw[1] = aw$0}
        caml_call3(Stdlib_Weak[3],aw[1],n,[0,x$1]);
        return x$1}
      function to_string(a)
       {var _dd_=get(a,0),ans=[0,caml_call1(K[7],_dd_)],i=1;
        for(;;)
         {var ai=get(a,i);
          if(1 - caml_call2(K[1],ai,K[3]))
           {if(1 === i)
             var _de_=cst_z;
            else
             var
              _dj_=caml_call1(Stdlib[33],i),
              _de_=caml_call2(Stdlib[28],cst_z$0,_dj_);
            var
             _df_=caml_call2(K[1],ai,K[6])?cst$118:caml_call1(K[7],ai),
             _dg_=caml_call2(Stdlib[28],_df_,_de_),
             _dh_=caml_call2(Stdlib[28],cst$119,_dg_);
            ans[1] = caml_call2(Stdlib[28],ans[1],_dh_)}
          var _di_=i + 1 | 0;
          if(8 !== i){var i=_di_;continue}
          ans[1] = caml_call2(Stdlib[28],ans[1],cst$117);
          return ans[1]}}
      function make(f){return [0,[0,caml_call1(Stdlib_Weak[1],0)],f]}
      var
       zero=make(function(param){return K[3]}),
       one=make(function(n){return 0 === n?K[6]:K[3]}),
       var$0=make(function(n){return 1 === n?K[6]:K[3]});
      function add(a,b)
       {return make
                (function(n)
                  {var _db_=get(b,n),_dc_=get(a,n);
                   return caml_call2(K[2],_dc_,_db_)})}
      function sub(a,b)
       {return make
                (function(n)
                  {var
                    _c9_=get(b,n),
                    _c__=caml_call1(K[4],K[6]),
                    _c$_=caml_call2(K[5],_c__,_c9_),
                    _da_=get(a,n);
                   return caml_call2(K[2],_da_,_c$_)})}
      function mul(a,b)
       {function f(n)
         {var ans=[0,K[3]],_c4_=0;
          if(! (n < 0))
           {var i=_c4_;
            for(;;)
             {var
               _c5_=get(b,n - i | 0),
               _c6_=get(a,i),
               _c7_=caml_call2(K[5],_c6_,_c5_);
              ans[1] = caml_call2(K[2],ans[1],_c7_);
              var _c8_=i + 1 | 0;
              if(n !== i){var i=_c8_;continue}
              break}}
          return ans[1]}
        return make(f)}
      function expn(a,n)
       {if(0 <= n)return 0 === n?one:1 === n?a:mul(a,expn(a,n - 1 | 0));
        throw [0,Assert_failure,_aT_]}
      function hadamard(a,b)
       {return make
                (function(n)
                  {var _c2_=get(b,n),_c3_=get(a,n);
                   return caml_call2(K[5],_c3_,_c2_)})}
      function cmul(a,b)
       {return make
                (function(n){var _c1_=get(b,n);return caml_call2(K[5],a,_c1_)})}
      function neg(a)
       {return make
                (function(n){var _c0_=get(a,n);return caml_call1(K[4],_c0_)})}
      function star(a)
       {var _cX_=K[3],_cY_=get(a,0);
        if(caml_call2(K[1],_cY_,_cX_))
         {var
           aux=
            function(n)
             {if(0 === n)return expn(a,0);
              var _cZ_=aux(n - 1 | 0);
              return add(expn(a,n),_cZ_)};
          return make(function(n){return get(aux(n),n)})}
        throw [0,Assert_failure,_aU_]}
      function inv(a){return star(sub(one,a))}
      var Polynomial$0=Polynomial([0,K[1],K[2],K[3],K[4],K[5],K[6],K[7]]);
      function polynomial(p)
       {return make(function(n){return caml_call2(Polynomial$0[5],p,n)})}
      var RationalFractions$0=RationalFractions(K);
      function rational(r)
       {var q=r[2],p=r[1],p$0=polynomial(p),q$0=polynomial(q);
        return mul(p$0,inv(q$0))}
      return [0,
              eq,
              get,
              get,
              to_string,
              make,
              zero,
              one,
              var$0,
              add,
              sub,
              mul,
              expn,
              hadamard,
              cmul,
              neg,
              star,
              inv,
              Polynomial$0,
              polynomial,
              RationalFractions$0,
              rational]}
    function Field(_cV_)
     {var _cW_=Make$0(_cV_);
      return [0,_cW_[1],_cW_[9],_cW_[6],_cW_[15],_cW_[11],_cW_[7],_cW_[4]]}
    var Alg_Series=[0,Make$0,Field];
    caml_register_global(319,Alg_Series,"Alg__Series");
    function Make$1(X)
     {function to_string(c)
       {function list(param)
         {if(0 === param[0]){var c=param[2],w=param[1];return [0,w,list(c)]}
          return 0}
        function cell(c)
         {if(0 === c[0])
           {var
             _cP_=list(c),
             _cQ_=caml_call2(Stdlib_List[19],whisker,_cP_),
             _cR_=caml_call2(Stdlib_String[6],cst$121,_cQ_),
             _cS_=caml_call2(Stdlib[28],_cR_,cst$120);
            return caml_call2(Stdlib[28],cst$122,_cS_)}
          var
           c$0=c[1],
           _cT_=cell(c$0),
           _cU_=caml_call2(Stdlib[28],_cT_,cst$123);
          return caml_call2(Stdlib[28],cst$124,_cU_)}
        function whisker(param)
         {if(0 === param[0]){var g=param[1];return caml_call1(X[2],g)}
          var
           c2=param[3],
           w=param[2],
           c1=param[1],
           _cL_=cell(c2),
           _cM_=whisker(w),
           _cN_=caml_call2(Stdlib[28],_cM_,_cL_),
           _cO_=cell(c1);
          return caml_call2(Stdlib[28],_cO_,_cN_)}
        return cell(c)}
      function dim(c)
       {function whisker(param)
         {if(0 === param[0])return 0;var w=param[2];return whisker(w) + 1 | 0}
        function cell(param)
         {if(0 === param[0]){var w=param[1];return whisker(w)}
          var c=param[1];
          return cell(c) + 1 | 0}
        return cell(c)}
      function compose(c,d)
       {var _cJ_=dim(d);
        if(dim(c) === _cJ_)
         {var
           aux=
            function(param)
             {if(0 === param[0])
               {var c=param[2],w=param[1];return [0,w,aux(c)]}
              return d};
          return aux(c)}
        var _cK_=dim(d);
        if(_cK_ < dim(c))
         {var
           aux$0=
            function(param)
             {if(0 === param[0])
               {var c=param[2],w=param[1];
                if(0 === w[0])throw [0,Assert_failure,_aV_];
                var
                 c2=w[3],
                 w$0=w[2],
                 c1=w[1],
                 w$1=[1,c1,w$0,compose(c2,d)],
                 c$0=aux$0(c);
                return [0,w$1,c$0]}
              var c$1=param[1];
              return [1,compose(c$1,d)]};
          return aux$0(c)}
        return caml_call1(Stdlib[2],cst_TODO)}
      var E=caml_call1(Stdlib_Map[1],[0,X[3]]),empty=E[1];
      function mem(s,g){return caml_call2(E[3],g,s)}
      function boundary(s,g)
       {var match=caml_call2(E[28],g,s),y=match[2],x=match[1];
        if(x !== g && y !== g)return [0,x,y];
        throw [0,Assert_failure,_aW_]}
      function source(s,g){return boundary(s,g)[1]}
      function target(s,g){return boundary(s,g)[2]}
      function mem$0(s,c)
       {function whisker(param)
         {if(0 === param[0]){var g=param[1];return mem(s,g)}
          var c2=param[3],w=param[2],c1=param[1],_cG_=cell(c1);
          if(_cG_)
           {var _cH_=whisker(w);if(_cH_)return cell(c2);var _cI_=_cH_}
          else
           var _cI_=_cG_;
          return _cI_}
        function cell(param)
         {var param$0=param;
          for(;;)
           {if(0 === param$0[0])
             {var c=param$0[2],w=param$0[1],_cF_=whisker(w);
              if(_cF_){var param$0=c;continue}
              return _cF_}
            var param$1=param$0[1],param$0=param$1;
            continue}}
        return cell(c)}
      function dim$0(s,c){return dim(c)}
      var
       Cell=[0,mem$0,dim$0],
       Pres=[0,E,empty,mem,boundary,source,target,Cell];
      return [0,to_string,dim,compose,Pres]}
    var Alg_Precategory=[0,Make$1];
    caml_register_global(320,Alg_Precategory,"Alg__Precategory");
    function Full(V,E)
     {function label(x){return x[1]}
      function eq(x,y){return x === y?1:0}
      function compare(x,y){return caml_call2(V[3],x[1],y[1])}
      function to_string(x){return caml_call1(V[2],x[1])}
      var
       V$0=[0,label,eq,compare,to_string],
       VL=List([0,V$0[2],V$0[4],V$0[3]]);
      function eq$0(f,g){return f === g?1:0}
      function compare$0(f,g){return caml_compare(f,g)}
      function to_string$0(f)
       {var
         _cz_=caml_call1(VL[2],f[3]),
         _cA_=caml_call2(Stdlib[28],cst$125,_cz_),
         _cB_=caml_call1(VL[2],f[2]),
         _cC_=caml_call2(Stdlib[28],_cB_,_cA_),
         _cD_=caml_call2(Stdlib[28],cst$126,_cC_),
         _cE_=caml_call1(E[2],f[1]);
        return caml_call2(Stdlib[28],_cE_,_cD_)}
      function label$0(f){return f[1]}
      function src(f){return f[2]}
      function tgt(f){return f[3]}
      function make(l,s,t){return [0,l,s,t]}
      var
       E$0=[0,eq$0,compare$0,to_string$0,label$0,src,tgt,make],
       src$0=E$0[5],
       tgt$0=E$0[6];
      return [0,V$0,VL,E$0,src$0,tgt$0]}
    function Pres$4(_cs_,_cr_)
     {var
       include=Full(_cs_,_cr_),
       V=include[1],
       VL=include[2],
       E=include[3],
       src=include[4],
       tgt=include[5];
      function vertices(g){return g[1]}
      function edges(g){return g[2]}
      function add_vertex(g,x){return [0,[0,x,g[1]],g[2]]}
      function add_edge(g,e){return [0,g[1],[0,e,g[2]]]}
      function vertex_pred(g,v)
       {if(caml_call2(Stdlib_List[37],v,g[1]))
         {var
           _cw_=g[2],
           _cx_=
            function(e)
             {var _cy_=caml_call1(tgt,e);
              return caml_call2(Stdlib_List[37],v,_cy_)};
          return caml_call2(Stdlib_List[41],_cx_,_cw_)}
        throw [0,Assert_failure,_aX_]}
      function vertex_succ(g,v)
       {if(caml_call2(Stdlib_List[37],v,g[1]))
         {var
           _ct_=g[2],
           _cu_=
            function(e)
             {var _cv_=caml_call1(src,e);
              return caml_call2(Stdlib_List[37],v,_cv_)};
          return caml_call2(Stdlib_List[41],_cu_,_ct_)}
        throw [0,Assert_failure,_aY_]}
      function edge_pred(g,e){return caml_call1(src,e)}
      function edge_succ(g,e){return caml_call1(tgt,e)}
      return [0,
              V,
              VL,
              E,
              src,
              tgt,
              vertices,
              edges,
              empty$3,
              add_vertex,
              add_edge,
              vertex_pred,
              vertex_succ,
              edge_pred,
              edge_succ]}
    function Map$2(V,E)
     {var
       MV=caml_call1(Stdlib_Map[1],[0,V[3]]),
       ME=caml_call1(Stdlib_Map[1],[0,E[3]]);
      return [0,MV,ME]}
    var Alg_Hypergraph=[0,Full,Pres$4,Map$2];
    caml_register_global(321,Alg_Hypergraph,"Alg__Hypergraph");
    function src(param){return 0}
    function tgt(param){return 0}
    var Terminal=[0,Unit,Unit,src,tgt];
    function Full$0(V,E)
     {var include=Prod(E,Prod(V,V)),eq=include[1],compare=include[3];
      function to_string(param){var f=param[1];return caml_call1(E[2],f)}
      var E$0=[0,eq,compare,to_string];
      function src(param){var match=param[2],x=match[1];return x}
      function tgt(param){var match=param[2],y=match[2];return y}
      return [0,V,E$0,src,tgt]}
    function Pres$5(V,E)
     {var Graph=Full$0(V,E);
      function add_vertex(p,x){return [0,[0,x,p[1]],p[2]]}
      function add_edge(p,f,param)
       {var y=param[2],x=param[1];return [0,p[1],[0,[0,f,[0,x,y]],p[2]]]}
      function edge(p,f)
       {var match=caml_call2(Stdlib_List[46],f,p[2]),y=match[2],x=match[1];
        return [0,f,[0,x,y]]}
      function has_vertex(p,x)
       {var _cp_=p[1];
        function _cq_(y){return caml_call2(V[1],x,y)}
        return caml_call2(Stdlib_List[33],_cq_,_cp_)}
      function to_string(g)
       {var
         vertices=caml_call2(Stdlib_List[19],V[2],g[1]),
         vertices$0=caml_call2(Stdlib_String[6],cst$127,vertices),
         _cg_=g[2];
        function _ch_(param)
         {var
           match=param[2],
           y=match[2],
           x=match[1],
           f=param[1],
           _cj_=caml_call1(V[2],y),
           _ck_=caml_call2(Stdlib[28],cst$128,_cj_),
           _cl_=caml_call1(V[2],x),
           _cm_=caml_call2(Stdlib[28],_cl_,_ck_),
           _cn_=caml_call2(Stdlib[28],cst$129,_cm_),
           _co_=caml_call1(E[2],f);
          return caml_call2(Stdlib[28],_co_,_cn_)}
        var
         edges=caml_call2(Stdlib_List[19],_ch_,_cg_),
         edges$0=caml_call2(Stdlib_String[6],cst$130,edges),
         _ci_=caml_call2(Stdlib[28],cst$131,edges$0);
        return caml_call2(Stdlib[28],vertices$0,_ci_)}
      return [0,Graph,empty$4,add_vertex,add_edge,edge,has_vertex,to_string]}
    var Alg_Graph=[0,Terminal,Full$0,Pres$5];
    caml_register_global(322,Alg_Graph,"Alg__Graph");
    var to_string$23=Stdlib[33];
    function dim(n){return n}
    function src$0(n){if(0 < n)return n - 1 | 0;throw [0,Assert_failure,_aZ_]}
    function tgt$0(n){if(0 < n)return n - 1 | 0;throw [0,Assert_failure,_a0_]}
    var Terminal$0=[0,to_string$23,dim,src$0,tgt$0];
    function Pres$6(X)
     {var Cell=Prod3([0,Int[1],Int[2],Int[3]],X,X),E=Map(X,Cell),empty=E[2];
      function mem(s,g){return caml_call2(E[5],s,g)}
      function dim(s,g){var match=caml_call2(E[3],s,g),n=match[1];return n}
      function src(s,g)
       {if(0 < dim(s,g))
         {var match=caml_call2(E[3],s,g),src=match[2],n=match[1];
          if(0 < n)return src;
          throw [0,Assert_failure,_a1_]}
        throw [0,Assert_failure,_a2_]}
      function tgt(s,g)
       {var match=caml_call2(E[3],s,g),tgt=match[3],n=match[1];
        if(0 < n)return tgt;
        throw [0,Assert_failure,_a3_]}
      function add0(s,g){return caml_call3(E[4],s,g,[0,0,g,g])}
      function add(s,g,src,tgt)
       {if(mem(s,src))
         {if(mem(s,tgt))
           {var n=dim(s,src) + 1 | 0;
            if((dim(s,tgt) + 1 | 0) === n)
             return caml_call3(E[4],s,g,[0,n,src,tgt]);
            throw [0,Assert_failure,_a4_]}
          throw [0,Assert_failure,_a5_]}
        throw [0,Assert_failure,_a6_]}
      function Make(P)
       {var _b$_=X[2],_ca_=P[1];
        function dim$0(_cf_){return dim(_ca_,_cf_)}
        var _cb_=P[1];
        function src$0(_ce_){return src(_cb_,_ce_)}
        var _cc_=P[1];
        function tgt$0(_cd_){return tgt(_cc_,_cd_)}
        return [0,_b$_,dim$0,src$0,tgt$0]}
      return [0,Cell,E,empty,mem,dim,src,tgt,add0,add,Make]}
    var n$0=[0,-1];
    function fresh$0(param){n$0[1]++;return n$0[1]}
    function to_string$24(x)
     {var _b__=caml_call1(Stdlib[33],x);
      return caml_call2(Stdlib[28],cst_x$0,_b__)}
    var Var$0=[0,fresh$0,to_string$24],n$1=[0,-1];
    function fresh$1(param){n$1[1]++;return n$1[1]}
    function to_string$25(x)
     {var _b9_=caml_call1(Stdlib[33],x);
      return caml_call2(Stdlib[28],cst_f,_b9_)}
    var
     Cons=[0,fresh$1,to_string$25],
     Theory=[0,Var$0,Cons],
     Alg_Globular=[0,Terminal$0,Pres$6,Theory];
    caml_register_global(323,Alg_Globular,"Alg__Globular");
    function Free$3(G)
     {var
       V=G[1],
       M=Free(G[2]),
       include=Prod3(V,[0,M[8],M[11],M[9]],V),
       eq=include[1],
       compare=include[3];
      function to_string(param)
       {var f=param[2],x=param[1];
        if(caml_call2(M[8],M[3],f))
         {var _b8_=caml_call1(V[2],x);
          return caml_call2(Stdlib[28],cst_id,_b8_)}
        return caml_call1(M[11],f)}
      var E=[0,eq,compare,to_string];
      function src(param){var x=param[1];return x}
      function tgt(param){var y=param[3];return y}
      function id(x){return [0,x,M[3],x]}
      function comp(param,_b7_)
       {var z=_b7_[3],g=_b7_[2],y=_b7_[1],y$0=param[3],f=param[2],x=param[1];
        if(caml_call2(V[1],y$0,y))return [0,x,caml_call2(M[2],f,g),z];
        throw [0,Assert_failure,_a7_]}
      function inj(f)
       {var _b5_=caml_call1(G[4],f),_b6_=caml_call1(M[5],f);
        return [0,caml_call1(G[3],f),_b6_,_b5_]}
      return [0,V,M,E,src,tgt,id,comp,inj]}
    function FreeCategory(_b2_)
     {var _b3_=Free$3(_b2_),_b4_=_b3_[3];
      return [0,
              _b3_[1],
              [0,_b4_[1],_b4_[3],_b4_[2]],
              _b3_[4],
              _b3_[5],
              _b3_[7],
              _b3_[6]]}
    function Pres$7(V,E)
     {var
       GP=Pres$5(V,E),
       _bS_=GP[1],
       _bT_=_bS_[2],
       Free=Free$3([0,_bS_[1],[0,_bT_[1],_bT_[3],_bT_[2]],_bS_[3],_bS_[4]]),
       empty=[0,GP[2],0];
      function add_object(p,x)
       {var _b1_=p[2];return [0,caml_call2(GP[3],p[1],x),_b1_]}
      function add_morphism(p,f,x,y)
       {if(caml_call2(GP[6],p[1],x))
         {if(caml_call2(GP[6],p[1],y))
           {var _b0_=p[2];return [0,caml_call3(GP[4],p[1],f,[0,x,y]),_b0_]}
          throw [0,Assert_failure,_a8_]}
        throw [0,Assert_failure,_a9_]}
      function morphism(p,f)
       {var _bZ_=caml_call2(GP[5],p[1],f);return caml_call1(Free[8],_bZ_)}
      function add_relation(p,f,g){return [0,p[1],[0,[0,f,g],p[2]]]}
      function to_string(p)
       {var graph=caml_call1(GP[7],p[1]),relations=p[2];
        function _bU_(param)
         {var
           g=param[2],
           f=param[1],
           _bW_=caml_call1(Free[3][3],g),
           _bX_=caml_call2(Stdlib[28],cst$132,_bW_),
           _bY_=caml_call1(Free[3][3],f);
          return caml_call2(Stdlib[28],_bY_,_bX_)}
        var
         relations$0=caml_call2(Stdlib_List[19],_bU_,relations),
         relations$1=caml_call2(Stdlib_String[6],cst$133,relations$0),
         _bV_=caml_call2(Stdlib[28],cst$134,relations$1);
        return caml_call2(Stdlib[28],graph,_bV_)}
      return [0,
              GP,
              Free,
              empty,
              add_object,
              add_morphism,
              morphism,
              add_relation,
              to_string]}
    function Monoid(M)
     {function src(param){return 0}
      function tgt(param){return 0}
      var comp=M[2];
      function id(param){return M[3]}
      return [0,Unit,[0,M[1],M[5],M[6]],src,tgt,comp,id]}
    function Graph(C)
     {var V=C[1],E=C[2],src=C[3],tgt=C[4];return [0,V,E,src,tgt]}
    var Alg_Category=[0,Free$3,FreeCategory,Pres$7,Monoid,Graph];
    caml_register_global(324,Alg_Category,"Alg__Category");
    function Regexp(X)
     {function letter(a){return [0,a]}
      function union(r,s){return [1,r,s]}
      var empty=0;
      function concat(r,s){return [2,r,s]}
      function star(r){return [3,r]}
      function unions(param)
       {if(param)
         {var _bR_=param[1];
          if(param[2]){var l=param[2];return [1,_bR_,unions(l)]}
          return _bR_}
        return 0}
      function to_string(r)
       {function aux(l,r)
         {function pa(l$0,s)
           {if(l$0 < l)
             {var _bQ_=caml_call2(Stdlib[28],s,cst$135);
              return caml_call2(Stdlib[28],cst$136,_bQ_)}
            return s}
          if(typeof r === "number")
           return 0 === r?cst_0$1:cst_1$0;
          else
           switch(r[0])
            {case 0:var a=r[1];return caml_call1(X[2],a);
             case 1:
              var
               s=r[2],
               r$0=r[1],
               _bJ_=aux(0,s),
               _bK_=caml_call2(Stdlib[28],cst$137,_bJ_),
               _bL_=aux(0,r$0);
              return pa(0,caml_call2(Stdlib[28],_bL_,_bK_));
             case 2:
              var
               s$0=r[2],
               r$1=r[1],
               _bM_=aux(1,s$0),
               _bN_=caml_call2(Stdlib[28],cst$138,_bM_),
               _bO_=aux(1,r$1);
              return pa(1,caml_call2(Stdlib[28],_bO_,_bN_));
             default:
              var r$2=r[1],_bP_=aux(2,r$2);
              return caml_call2(Stdlib[28],_bP_,cst$139)}}
        return aux(-1,r)}
      function f(r)
       {var r$0=r;
        for(;;)
         {if(typeof r$0 !== "number")
           switch(r$0[0])
            {case 1:
              var _bC_=r$0[1];
              if(typeof _bC_ === "number" && ! _bC_)
               {var r$1=r$0[2],r$0=r$1;continue}
              var _bD_=r$0[2];
              if(typeof _bD_ === "number" && ! _bD_){var r$0=_bC_;continue}
              var s=r$0[2],_bE_=f(s);
              return [1,f(_bC_),_bE_];
             case 2:
              var _bF_=r$0[1];
              if(typeof _bF_ === "number" && ! _bF_)return 0;
              var _bG_=r$0[2];
              if(typeof _bG_ === "number" && ! _bG_)return 0;
              if(typeof _bF_ === "number"){var r$2=r$0[2],r$0=r$2;continue}
              if(typeof r$0[2] === "number"){var r$0=_bF_;continue}
              var s$0=r$0[2],_bH_=f(s$0);
              return [2,f(_bF_),_bH_];
             case 3:
              var _bI_=r$0[1];
              if(typeof _bI_ === "number" && ! _bI_)return 0;
              return [3,f(_bI_)]
             }
          return r$0}}
      function simpl(x)
       {var x$0=x;
        for(;;)
         {var x$1=f(x$0);
          if(caml_equal(x$1,x$0))return x$0;
          var x$0=x$1;
          continue}}
      var Series=Make$0(Int$1);
      function series(param)
       {if(typeof param === "number")
         return 0 === param?Series[6]:Series[7];
        else
         switch(param[0])
          {case 0:return Series[8];
           case 1:
            var b=param[2],a=param[1],_bx_=series(b),_by_=series(a);
            return caml_call2(Series[9],_by_,_bx_);
           case 2:
            var b$0=param[2],a$0=param[1],_bz_=series(b$0),_bA_=series(a$0);
            return caml_call2(Series[11],_bA_,_bz_);
           default:
            var a$1=param[1],_bB_=series(a$1);
            return caml_call1(Series[16],_bB_)}}
      return [0,
              letter,
              union,
              empty,
              concat,
              star,
              unions,
              to_string,
              simpl,
              Series,
              series]}
    function Make$2(X)
     {var
       States=Pow([0,Int[1],Int[2],Int[3]]),
       _a__=[0,States[2],States[4],States[3]],
       T=Map(Prod([0,Int[1],Int[2],Int[3]],X),_a__),
       Regexp$0=Regexp(X);
      function states(aut){return aut[1]}
      function trans(aut,a,x)
       {try
         {var _bv_=caml_call2(T[3],aut[4],[0,a,x]);return _bv_}
        catch(_bw_)
         {_bw_ = caml_wrap_exception(_bw_);
          if(_bw_ === Stdlib[8])return States[5];
          throw _bw_}}
      function add_transition(aut,a,x,b)
       {var
         bb=trans(aut,a,x),
         bb$0=caml_call2(States[7],bb,b),
         transitions=caml_call3(T[4],aut[4],[0,a,x],bb$0);
        return [0,aut[1],aut[2],aut[3],transitions]}
      function create(states,initial,terminal,transitions)
       {var
         terminal$0=caml_call1(States[6],terminal),
         ans=[0,states,initial,terminal$0,T[2]];
        function _bu_(ans,param)
         {var b=param[3],x=param[2],a=param[1];
          return add_transition(ans,a,x,b)}
        return caml_call3(Stdlib_List[25],_bu_,ans,transitions)}
      function kleene(aut)
       {var n=aut[1];
        function init(f)
         {function _bs_(i)
           {function _bt_(j){return caml_call2(f,i,j)}
            return caml_call2(Stdlib_Array[2],n,_bt_)}
          return caml_call2(Stdlib_Array[2],n,_bs_)}
        var
         rr=
          init
           (function(i,j)
             {var r=[0,Regexp$0[3]],_bm_=aut[4];
              function _bn_(param,jj)
               {var
                 a=param[2],
                 i$0=param[1],
                 _bo_=caml_call2(Int[1],i,i$0),
                 _bp_=_bo_?caml_call2(States[8],jj,j):_bo_;
                if(_bp_)
                 {var _bq_=caml_call1(Regexp$0[1],a);
                  r[1] = caml_call2(Regexp$0[2],r[1],_bq_);
                  var _br_=0}
                else
                 var _br_=_bp_;
                return _br_}
              caml_call2(T[6],_bn_,_bm_);
              if(i === j)r[1] = caml_call2(Regexp$0[2],Regexp$0[3],r[1]);
              return r[1]}),
         rr$0=[0,rr],
         _ba_=n - 1 | 0,
         _a$_=0;
        if(! (_ba_ < 0))
         {var k=_a$_;
          for(;;)
           {var
             rr$2=rr$0[1],
             ss=
              init
               (function(k,rr)
                  {return function(i,j)
                    {var
                      _bf_=
                       caml_check_bound(caml_check_bound(rr,k)[1 + k],j)[1 + j],
                      _bg_=
                       caml_check_bound(caml_check_bound(rr,k)[1 + k],k)[1 + k],
                      _bh_=caml_call1(Regexp$0[5],_bg_),
                      _bi_=caml_call2(Regexp$0[4],_bh_,_bf_),
                      _bj_=
                       caml_check_bound(caml_check_bound(rr,i)[1 + i],k)[1 + k],
                      _bk_=caml_call2(Regexp$0[4],_bj_,_bi_),
                      _bl_=
                       caml_check_bound(caml_check_bound(rr,i)[1 + i],j)[1 + j];
                     return caml_call2(Regexp$0[2],_bl_,_bk_)}}
                 (k,rr$2));
            rr$0[1] = ss;
            var _bd_=k + 1 | 0;
            if(_ba_ !== k){var k=_bd_;continue}
            break}}
        var rr$1=rr$0[1],r=[0,Regexp$0[3]],i=aut[2],_bb_=aut[3];
        function _bc_(j)
         {var _be_=caml_check_bound(caml_check_bound(rr$1,i)[1 + i],j)[1 + j];
          r[1] = caml_call2(Regexp$0[2],r[1],_be_);
          return 0}
        caml_call2(States[9],_bc_,_bb_);
        return r[1]}
      return [0,States,T,Regexp$0,states,trans,add_transition,create,kleene]}
    var Alg_Automaton=[0,Regexp,Make$2];
    caml_register_global(325,Alg_Automaton,"Alg__Automaton");
    return}
  (globalThis));


//# 1 "../../.js/js_of_ocaml-compiler.runtime/jsoo_runtime.cma.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_exn_with_js_backtrace=runtime.caml_exn_with_js_backtrace,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Jsoo_runtime_Error_Exn=
      caml_string_of_jsbytes("Jsoo_runtime.Error.Exn"),
     cst_jsError=caml_string_of_jsbytes("jsError"),
     Stdlib_Callback=global_data.Stdlib__Callback,
     Js=[0],
     Sys=[0],
     Exn=[248,cst_Jsoo_runtime_Error_Exn,runtime.caml_fresh_oo_id(0)];
    caml_call2(Stdlib_Callback[2],cst_jsError,[0,Exn,[0]]);
    function raise(exn){throw exn}
    var
     Error=
      [0,
       raise,
       caml_exn_with_js_backtrace,
       runtime.caml_js_error_option_of_exception,
       Exn],
     For_compatibility_only=[0],
     Bigstring=[0],
     Typed_array=[0,Bigstring],
     Int64=[0],
     Jsoo_runtime=[0,Js,Sys,Error,For_compatibility_only,Typed_array,Int64];
    runtime.caml_register_global(4,Jsoo_runtime,"Jsoo_runtime");
    return}
  (globalThis));


//# 1 "../../.js/js_of_ocaml/js_of_ocaml.cma.js"
(function(globalThis)
   {"use strict";
    var
     jsoo_exports=typeof module === "object" && module.exports || globalThis,
     runtime=globalThis.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_array=runtime.caml_string_of_array,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_string_of_jsbytes("parseFloat"),
     cst_parseInt=caml_string_of_jsbytes("parseInt"),
     cst_can_t_retrieve_file_name_n=
      caml_string_of_jsbytes("can't retrieve file name: not implemented"),
     cst_endings=caml_string_of_jsbytes("endings"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_loadstart=caml_string_of_jsbytes("loadstart"),
     cst_progress=caml_string_of_jsbytes("progress"),
     cst_abort=caml_string_of_jsbytes("abort"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_load=caml_string_of_jsbytes("load"),
     cst_loadend=caml_string_of_jsbytes("loadend"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_area$1=caml_string_of_jsbytes("area"),
     cst_audio$1=caml_string_of_jsbytes("audio"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_blockquote$1=caml_string_of_jsbytes("blockquote"),
     cst_body$1=caml_string_of_jsbytes("body"),
     cst_br$1=caml_string_of_jsbytes("br"),
     cst_button$1=caml_string_of_jsbytes("button"),
     cst_canvas$1=caml_string_of_jsbytes("canvas"),
     cst_caption$1=caml_string_of_jsbytes("caption"),
     cst_col$1=caml_string_of_jsbytes("col"),
     cst_colgroup$1=caml_string_of_jsbytes("colgroup"),
     cst_del$1=caml_string_of_jsbytes("del"),
     cst_div$1=caml_string_of_jsbytes("div"),
     cst_dl$1=caml_string_of_jsbytes("dl"),
     cst_embed$1=caml_string_of_jsbytes("embed"),
     cst_fieldset$1=caml_string_of_jsbytes("fieldset"),
     cst_form$1=caml_string_of_jsbytes("form"),
     cst_frame$1=caml_string_of_jsbytes("frame"),
     cst_frameset$1=caml_string_of_jsbytes("frameset"),
     cst_h1$1=caml_string_of_jsbytes("h1"),
     cst_h2$1=caml_string_of_jsbytes("h2"),
     cst_h3$1=caml_string_of_jsbytes("h3"),
     cst_h4$1=caml_string_of_jsbytes("h4"),
     cst_h5$1=caml_string_of_jsbytes("h5"),
     cst_h6$1=caml_string_of_jsbytes("h6"),
     cst_head$1=caml_string_of_jsbytes("head"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_html$1=caml_string_of_jsbytes("html"),
     cst_iframe$1=caml_string_of_jsbytes("iframe"),
     cst_img$1=caml_string_of_jsbytes("img"),
     cst_input$2=caml_string_of_jsbytes("input"),
     cst_ins$1=caml_string_of_jsbytes("ins"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_legend$1=caml_string_of_jsbytes("legend"),
     cst_li$1=caml_string_of_jsbytes("li"),
     cst_link$1=caml_string_of_jsbytes("link"),
     cst_map$1=caml_string_of_jsbytes("map"),
     cst_meta$1=caml_string_of_jsbytes("meta"),
     cst_object$1=caml_string_of_jsbytes("object"),
     cst_ol$1=caml_string_of_jsbytes("ol"),
     cst_optgroup$1=caml_string_of_jsbytes("optgroup"),
     cst_option$1=caml_string_of_jsbytes("option"),
     cst_p$1=caml_string_of_jsbytes("p"),
     cst_param$1=caml_string_of_jsbytes("param"),
     cst_pre$1=caml_string_of_jsbytes("pre"),
     cst_q$1=caml_string_of_jsbytes("q"),
     cst_script$1=caml_string_of_jsbytes("script"),
     cst_select$2=caml_string_of_jsbytes("select"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_table$1=caml_string_of_jsbytes("table"),
     cst_tbody$1=caml_string_of_jsbytes("tbody"),
     cst_td$1=caml_string_of_jsbytes("td"),
     cst_textarea$1=caml_string_of_jsbytes("textarea"),
     cst_tfoot$1=caml_string_of_jsbytes("tfoot"),
     cst_th$1=caml_string_of_jsbytes("th"),
     cst_thead$1=caml_string_of_jsbytes("thead"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_tr$1=caml_string_of_jsbytes("tr"),
     cst_ul$1=caml_string_of_jsbytes("ul"),
     cst_video$1=caml_string_of_jsbytes("video"),
     cst_KeyH=caml_string_of_jsbytes("KeyH"),
     cst_Digit6=caml_string_of_jsbytes("Digit6"),
     cst_BrowserRefresh=caml_string_of_jsbytes("BrowserRefresh"),
     cst_Backslash=caml_string_of_jsbytes("Backslash"),
     cst_AltLeft=caml_string_of_jsbytes("AltLeft"),
     cst_AltRight=caml_string_of_jsbytes("AltRight"),
     cst_ArrowDown=caml_string_of_jsbytes("ArrowDown"),
     cst_ArrowLeft=caml_string_of_jsbytes("ArrowLeft"),
     cst_ArrowRight=caml_string_of_jsbytes("ArrowRight"),
     cst_ArrowUp=caml_string_of_jsbytes("ArrowUp"),
     cst_Backquote=caml_string_of_jsbytes("Backquote"),
     cst_Backspace=caml_string_of_jsbytes("Backspace"),
     cst_BracketLeft=caml_string_of_jsbytes("BracketLeft"),
     cst_BracketRight=caml_string_of_jsbytes("BracketRight"),
     cst_BrowserBack=caml_string_of_jsbytes("BrowserBack"),
     cst_BrowserFavorites=caml_string_of_jsbytes("BrowserFavorites"),
     cst_BrowserForward=caml_string_of_jsbytes("BrowserForward"),
     cst_BrowserHome=caml_string_of_jsbytes("BrowserHome"),
     cst_Delete=caml_string_of_jsbytes("Delete"),
     cst_BrowserSearch=caml_string_of_jsbytes("BrowserSearch"),
     cst_BrowserStop=caml_string_of_jsbytes("BrowserStop"),
     cst_CapsLock=caml_string_of_jsbytes("CapsLock"),
     cst_Comma=caml_string_of_jsbytes("Comma"),
     cst_ContextMenu=caml_string_of_jsbytes("ContextMenu"),
     cst_ControlLeft=caml_string_of_jsbytes("ControlLeft"),
     cst_ControlRight=caml_string_of_jsbytes("ControlRight"),
     cst_Digit0=caml_string_of_jsbytes("Digit0"),
     cst_Digit1=caml_string_of_jsbytes("Digit1"),
     cst_Digit2=caml_string_of_jsbytes("Digit2"),
     cst_Digit3=caml_string_of_jsbytes("Digit3"),
     cst_Digit4=caml_string_of_jsbytes("Digit4"),
     cst_Digit5=caml_string_of_jsbytes("Digit5"),
     cst_F6=caml_string_of_jsbytes("F6"),
     cst_F1=caml_string_of_jsbytes("F1"),
     cst_Digit7=caml_string_of_jsbytes("Digit7"),
     cst_Digit8=caml_string_of_jsbytes("Digit8"),
     cst_Digit9=caml_string_of_jsbytes("Digit9"),
     cst_End=caml_string_of_jsbytes("End"),
     cst_Enter=caml_string_of_jsbytes("Enter"),
     cst_Equal=caml_string_of_jsbytes("Equal"),
     cst_Escape=caml_string_of_jsbytes("Escape"),
     cst_F10=caml_string_of_jsbytes("F10"),
     cst_F11=caml_string_of_jsbytes("F11"),
     cst_F12=caml_string_of_jsbytes("F12"),
     cst_F2=caml_string_of_jsbytes("F2"),
     cst_F3=caml_string_of_jsbytes("F3"),
     cst_F4=caml_string_of_jsbytes("F4"),
     cst_F5=caml_string_of_jsbytes("F5"),
     cst_KeyA=caml_string_of_jsbytes("KeyA"),
     cst_F7=caml_string_of_jsbytes("F7"),
     cst_F8=caml_string_of_jsbytes("F8"),
     cst_F9=caml_string_of_jsbytes("F9"),
     cst_Home=caml_string_of_jsbytes("Home"),
     cst_Insert=caml_string_of_jsbytes("Insert"),
     cst_IntlBackslash=caml_string_of_jsbytes("IntlBackslash"),
     cst_IntlYen=caml_string_of_jsbytes("IntlYen"),
     cst_KeyB=caml_string_of_jsbytes("KeyB"),
     cst_KeyC=caml_string_of_jsbytes("KeyC"),
     cst_KeyD=caml_string_of_jsbytes("KeyD"),
     cst_KeyE=caml_string_of_jsbytes("KeyE"),
     cst_KeyF=caml_string_of_jsbytes("KeyF"),
     cst_KeyG=caml_string_of_jsbytes("KeyG"),
     cst_Numpad4=caml_string_of_jsbytes("Numpad4"),
     cst_KeyX=caml_string_of_jsbytes("KeyX"),
     cst_KeyP=caml_string_of_jsbytes("KeyP"),
     cst_KeyI=caml_string_of_jsbytes("KeyI"),
     cst_KeyJ=caml_string_of_jsbytes("KeyJ"),
     cst_KeyK=caml_string_of_jsbytes("KeyK"),
     cst_KeyL=caml_string_of_jsbytes("KeyL"),
     cst_KeyM=caml_string_of_jsbytes("KeyM"),
     cst_KeyN=caml_string_of_jsbytes("KeyN"),
     cst_KeyO=caml_string_of_jsbytes("KeyO"),
     cst_KeyQ=caml_string_of_jsbytes("KeyQ"),
     cst_KeyR=caml_string_of_jsbytes("KeyR"),
     cst_KeyS=caml_string_of_jsbytes("KeyS"),
     cst_KeyT=caml_string_of_jsbytes("KeyT"),
     cst_KeyU=caml_string_of_jsbytes("KeyU"),
     cst_KeyV=caml_string_of_jsbytes("KeyV"),
     cst_KeyW=caml_string_of_jsbytes("KeyW"),
     cst_MetaRight=caml_string_of_jsbytes("MetaRight"),
     cst_KeyY=caml_string_of_jsbytes("KeyY"),
     cst_KeyZ=caml_string_of_jsbytes("KeyZ"),
     cst_MediaPlayPause=caml_string_of_jsbytes("MediaPlayPause"),
     cst_MediaStop=caml_string_of_jsbytes("MediaStop"),
     cst_MediaTrackNext=caml_string_of_jsbytes("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_string_of_jsbytes("MediaTrackPrevious"),
     cst_MetaLeft=caml_string_of_jsbytes("MetaLeft"),
     cst_Minus=caml_string_of_jsbytes("Minus"),
     cst_NumLock=caml_string_of_jsbytes("NumLock"),
     cst_Numpad0=caml_string_of_jsbytes("Numpad0"),
     cst_Numpad1=caml_string_of_jsbytes("Numpad1"),
     cst_Numpad2=caml_string_of_jsbytes("Numpad2"),
     cst_Numpad3=caml_string_of_jsbytes("Numpad3"),
     cst_PageUp=caml_string_of_jsbytes("PageUp"),
     cst_NumpadDivide=caml_string_of_jsbytes("NumpadDivide"),
     cst_Numpad5=caml_string_of_jsbytes("Numpad5"),
     cst_Numpad6=caml_string_of_jsbytes("Numpad6"),
     cst_Numpad7=caml_string_of_jsbytes("Numpad7"),
     cst_Numpad8=caml_string_of_jsbytes("Numpad8"),
     cst_Numpad9=caml_string_of_jsbytes("Numpad9"),
     cst_NumpadAdd=caml_string_of_jsbytes("NumpadAdd"),
     cst_NumpadDecimal=caml_string_of_jsbytes("NumpadDecimal"),
     cst_NumpadEnter=caml_string_of_jsbytes("NumpadEnter"),
     cst_NumpadEqual=caml_string_of_jsbytes("NumpadEqual"),
     cst_NumpadMultiply=caml_string_of_jsbytes("NumpadMultiply"),
     cst_NumpadSubtract=caml_string_of_jsbytes("NumpadSubtract"),
     cst_OSLeft=caml_string_of_jsbytes("OSLeft"),
     cst_OSRight=caml_string_of_jsbytes("OSRight"),
     cst_PageDown=caml_string_of_jsbytes("PageDown"),
     cst_ShiftRight=caml_string_of_jsbytes("ShiftRight"),
     cst_Pause=caml_string_of_jsbytes("Pause"),
     cst_Period=caml_string_of_jsbytes("Period"),
     cst_PrintScreen=caml_string_of_jsbytes("PrintScreen"),
     cst_Quote=caml_string_of_jsbytes("Quote"),
     cst_ScrollLock=caml_string_of_jsbytes("ScrollLock"),
     cst_Semicolon=caml_string_of_jsbytes("Semicolon"),
     cst_ShiftLeft=caml_string_of_jsbytes("ShiftLeft"),
     cst_Slash=caml_string_of_jsbytes("Slash"),
     cst_Space=caml_string_of_jsbytes("Space"),
     cst_Tab=caml_string_of_jsbytes("Tab"),
     cst_VolumeDown=caml_string_of_jsbytes("VolumeDown"),
     cst_VolumeMute=caml_string_of_jsbytes("VolumeMute"),
     cst_VolumeUp=caml_string_of_jsbytes("VolumeUp"),
     cst_mouseout$0=caml_string_of_jsbytes("mouseout"),
     cst_mouseover$0=caml_string_of_jsbytes("mouseover"),
     cst_video$0=caml_string_of_jsbytes("video"),
     cst_audio$0=caml_string_of_jsbytes("audio"),
     cst_ul$0=caml_string_of_jsbytes("ul"),
     cst_tr$0=caml_string_of_jsbytes("tr"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_thead$0=caml_string_of_jsbytes("thead"),
     cst_th$0=caml_string_of_jsbytes("th"),
     cst_tfoot$0=caml_string_of_jsbytes("tfoot"),
     cst_textarea$0=caml_string_of_jsbytes("textarea"),
     cst_td$0=caml_string_of_jsbytes("td"),
     cst_tbody$0=caml_string_of_jsbytes("tbody"),
     cst_table$0=caml_string_of_jsbytes("table"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_select$1=caml_string_of_jsbytes("select"),
     cst_script$0=caml_string_of_jsbytes("script"),
     cst_q$0=caml_string_of_jsbytes("q"),
     cst_pre$0=caml_string_of_jsbytes("pre"),
     cst_param$0=caml_string_of_jsbytes("param"),
     cst_p$0=caml_string_of_jsbytes("p"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_optgroup$0=caml_string_of_jsbytes("optgroup"),
     cst_ol$0=caml_string_of_jsbytes("ol"),
     cst_object$0=caml_string_of_jsbytes("object"),
     cst_meta$0=caml_string_of_jsbytes("meta"),
     cst_map$0=caml_string_of_jsbytes("map"),
     cst_link$0=caml_string_of_jsbytes("link"),
     cst_li$0=caml_string_of_jsbytes("li"),
     cst_legend$0=caml_string_of_jsbytes("legend"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_ins$0=caml_string_of_jsbytes("ins"),
     cst_input$1=caml_string_of_jsbytes("input"),
     cst_img$0=caml_string_of_jsbytes("img"),
     cst_iframe$0=caml_string_of_jsbytes("iframe"),
     cst_html$0=caml_string_of_jsbytes("html"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_head$0=caml_string_of_jsbytes("head"),
     cst_h6$0=caml_string_of_jsbytes("h6"),
     cst_h5$0=caml_string_of_jsbytes("h5"),
     cst_h4$0=caml_string_of_jsbytes("h4"),
     cst_h3$0=caml_string_of_jsbytes("h3"),
     cst_h2$0=caml_string_of_jsbytes("h2"),
     cst_h1$0=caml_string_of_jsbytes("h1"),
     cst_frame$0=caml_string_of_jsbytes("frame"),
     cst_frameset$0=caml_string_of_jsbytes("frameset"),
     cst_form$0=caml_string_of_jsbytes("form"),
     cst_embed$0=caml_string_of_jsbytes("embed"),
     cst_fieldset$0=caml_string_of_jsbytes("fieldset"),
     cst_dl$0=caml_string_of_jsbytes("dl"),
     cst_div$0=caml_string_of_jsbytes("div"),
     cst_del$0=caml_string_of_jsbytes("del"),
     cst_colgroup$0=caml_string_of_jsbytes("colgroup"),
     cst_col$0=caml_string_of_jsbytes("col"),
     cst_caption$0=caml_string_of_jsbytes("caption"),
     cst_canvas$0=caml_string_of_jsbytes("canvas"),
     cst_button$0=caml_string_of_jsbytes("button"),
     cst_br$0=caml_string_of_jsbytes("br"),
     cst_body$0=caml_string_of_jsbytes("body"),
     cst_blockquote$0=caml_string_of_jsbytes("blockquote"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_area$0=caml_string_of_jsbytes("area"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_iframe=caml_string_of_jsbytes("iframe"),
     cst_frame=caml_string_of_jsbytes("frame"),
     cst_frameset=caml_string_of_jsbytes("frameset"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_noscript=caml_string_of_jsbytes("noscript"),
     cst_dt=caml_string_of_jsbytes("dt"),
     cst_dd=caml_string_of_jsbytes("dd"),
     cst_abbr=caml_string_of_jsbytes("abbr"),
     cst_var=caml_string_of_jsbytes("var"),
     cst_kbd=caml_string_of_jsbytes("kbd"),
     cst_samp=caml_string_of_jsbytes("samp"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_dfn=caml_string_of_jsbytes("dfn"),
     cst_cite=caml_string_of_jsbytes("cite"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_em=caml_string_of_jsbytes("em"),
     cst_small=caml_string_of_jsbytes("small"),
     cst_big=caml_string_of_jsbytes("big"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_i=caml_string_of_jsbytes("i"),
     cst_tt=caml_string_of_jsbytes("tt"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_sup=caml_string_of_jsbytes("sup"),
     cst_sub=caml_string_of_jsbytes("sub"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_tfoot=caml_string_of_jsbytes("tfoot"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_colgroup=caml_string_of_jsbytes("colgroup"),
     cst_col=caml_string_of_jsbytes("col"),
     cst_caption=caml_string_of_jsbytes("caption"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_script=caml_string_of_jsbytes("script"),
     cst_area=caml_string_of_jsbytes("area"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_param=caml_string_of_jsbytes("param"),
     cst_object=caml_string_of_jsbytes("object"),
     cst_img=caml_string_of_jsbytes("img"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_del=caml_string_of_jsbytes("del"),
     cst_ins=caml_string_of_jsbytes("ins"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_blockquote=caml_string_of_jsbytes("blockquote"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_embed=caml_string_of_jsbytes("embed"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_dl=caml_string_of_jsbytes("dl"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_legend=caml_string_of_jsbytes("legend"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_input$0=caml_string_of_jsbytes("input"),
     cst_select$0=caml_string_of_jsbytes("select"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_optgroup=caml_string_of_jsbytes("optgroup"),
     cst_form=caml_string_of_jsbytes("form"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_meta=caml_string_of_jsbytes("meta"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_link=caml_string_of_jsbytes("link"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_html=caml_string_of_jsbytes("html"),
     cst_click=caml_string_of_jsbytes("click"),
     cst_copy=caml_string_of_jsbytes("copy"),
     cst_cut=caml_string_of_jsbytes("cut"),
     cst_paste=caml_string_of_jsbytes("paste"),
     cst_dblclick=caml_string_of_jsbytes("dblclick"),
     cst_mousedown=caml_string_of_jsbytes("mousedown"),
     cst_mouseup=caml_string_of_jsbytes("mouseup"),
     cst_mouseover=caml_string_of_jsbytes("mouseover"),
     cst_mousemove=caml_string_of_jsbytes("mousemove"),
     cst_mouseout=caml_string_of_jsbytes("mouseout"),
     cst_keypress=caml_string_of_jsbytes("keypress"),
     cst_keydown=caml_string_of_jsbytes("keydown"),
     cst_keyup=caml_string_of_jsbytes("keyup"),
     cst_mousewheel=caml_string_of_jsbytes("mousewheel"),
     cst_DOMMouseScroll=caml_string_of_jsbytes("DOMMouseScroll"),
     cst_touchstart=caml_string_of_jsbytes("touchstart"),
     cst_touchmove=caml_string_of_jsbytes("touchmove"),
     cst_touchend=caml_string_of_jsbytes("touchend"),
     cst_touchcancel=caml_string_of_jsbytes("touchcancel"),
     cst_dragstart=caml_string_of_jsbytes("dragstart"),
     cst_dragend=caml_string_of_jsbytes("dragend"),
     cst_dragenter=caml_string_of_jsbytes("dragenter"),
     cst_dragover=caml_string_of_jsbytes("dragover"),
     cst_dragleave=caml_string_of_jsbytes("dragleave"),
     cst_drag=caml_string_of_jsbytes("drag"),
     cst_drop=caml_string_of_jsbytes("drop"),
     cst_hashchange=caml_string_of_jsbytes("hashchange"),
     cst_change=caml_string_of_jsbytes("change"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_timeupdate=caml_string_of_jsbytes("timeupdate"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_focus=caml_string_of_jsbytes("focus"),
     cst_blur=caml_string_of_jsbytes("blur"),
     cst_load$0=caml_string_of_jsbytes("load"),
     cst_unload=caml_string_of_jsbytes("unload"),
     cst_beforeunload=caml_string_of_jsbytes("beforeunload"),
     cst_resize=caml_string_of_jsbytes("resize"),
     cst_orientationchange=caml_string_of_jsbytes("orientationchange"),
     cst_popstate=caml_string_of_jsbytes("popstate"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_abort$0=caml_string_of_jsbytes("abort"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_online=caml_string_of_jsbytes("online"),
     cst_offline=caml_string_of_jsbytes("offline"),
     cst_checking=caml_string_of_jsbytes("checking"),
     cst_noupdate=caml_string_of_jsbytes("noupdate"),
     cst_downloading=caml_string_of_jsbytes("downloading"),
     cst_progress$0=caml_string_of_jsbytes("progress"),
     cst_updateready=caml_string_of_jsbytes("updateready"),
     cst_cached=caml_string_of_jsbytes("cached"),
     cst_obsolete=caml_string_of_jsbytes("obsolete"),
     cst_DOMContentLoaded=caml_string_of_jsbytes("DOMContentLoaded"),
     cst_animationstart=caml_string_of_jsbytes("animationstart"),
     cst_animationend=caml_string_of_jsbytes("animationend"),
     cst_animationiteration=caml_string_of_jsbytes("animationiteration"),
     cst_animationcancel=caml_string_of_jsbytes("animationcancel"),
     cst_canplay=caml_string_of_jsbytes("canplay"),
     cst_canplaythrough=caml_string_of_jsbytes("canplaythrough"),
     cst_durationchange=caml_string_of_jsbytes("durationchange"),
     cst_emptied=caml_string_of_jsbytes("emptied"),
     cst_ended=caml_string_of_jsbytes("ended"),
     cst_gotpointercapture=caml_string_of_jsbytes("gotpointercapture"),
     cst_loadeddata=caml_string_of_jsbytes("loadeddata"),
     cst_loadedmetadata=caml_string_of_jsbytes("loadedmetadata"),
     cst_loadstart$0=caml_string_of_jsbytes("loadstart"),
     cst_lostpointercapture=caml_string_of_jsbytes("lostpointercapture"),
     cst_message=caml_string_of_jsbytes("message"),
     cst_pause=caml_string_of_jsbytes("pause"),
     cst_play=caml_string_of_jsbytes("play"),
     cst_playing=caml_string_of_jsbytes("playing"),
     cst_pointerenter=caml_string_of_jsbytes("pointerenter"),
     cst_pointercancel=caml_string_of_jsbytes("pointercancel"),
     cst_pointerdown=caml_string_of_jsbytes("pointerdown"),
     cst_pointerleave=caml_string_of_jsbytes("pointerleave"),
     cst_pointermove=caml_string_of_jsbytes("pointermove"),
     cst_pointerout=caml_string_of_jsbytes("pointerout"),
     cst_pointerover=caml_string_of_jsbytes("pointerover"),
     cst_pointerup=caml_string_of_jsbytes("pointerup"),
     cst_ratechange=caml_string_of_jsbytes("ratechange"),
     cst_seeked=caml_string_of_jsbytes("seeked"),
     cst_seeking=caml_string_of_jsbytes("seeking"),
     cst_stalled=caml_string_of_jsbytes("stalled"),
     cst_suspend=caml_string_of_jsbytes("suspend"),
     cst_volumechange=caml_string_of_jsbytes("volumechange"),
     cst_waiting=caml_string_of_jsbytes("waiting"),
     cst_Js_of_ocaml_Dom_html_Canva=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_html.Canvas_not_available"),
     cst_checkbox=caml_string_of_jsbytes("checkbox"),
     cst_file=caml_string_of_jsbytes("file"),
     cst_password=caml_string_of_jsbytes("password"),
     cst_radio=caml_string_of_jsbytes("radio"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_submit$0=caml_string_of_jsbytes("submit"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_readystatechange=caml_string_of_jsbytes("readystatechange"),
     cst_loadstart$1=caml_string_of_jsbytes("loadstart"),
     cst_progress$1=caml_string_of_jsbytes("progress"),
     cst_abort$1=caml_string_of_jsbytes("abort"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_load$1=caml_string_of_jsbytes("load"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_loadend$0=caml_string_of_jsbytes("loadend"),
     cst_Worker_onmessage_is_undefi$0=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefi=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_u=
      caml_string_of_jsbytes("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_string_of_jsbytes("webglcontextlost"),
     cst_webglcontextrestored=caml_string_of_jsbytes("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_string_of_jsbytes("webglcontextcreationerror"),
     cst_g=caml_string_of_jsbytes("g"),
     cst=caml_string_of_jsbytes("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_string_of_jsbytes(""),
     cst$13=caml_string_of_jsbytes(""),
     cst$21=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("#"),
     cst$15=caml_string_of_jsbytes("?"),
     cst$20=caml_string_of_jsbytes(""),
     cst$16=caml_string_of_jsbytes("/"),
     cst$17=caml_string_of_jsbytes("/"),
     cst$19=caml_string_of_jsbytes(":"),
     cst$18=caml_string_of_jsbytes(""),
     cst_http$1=caml_string_of_jsbytes("http://"),
     cst$22=caml_string_of_jsbytes(""),
     cst$30=caml_string_of_jsbytes(""),
     cst$23=caml_string_of_jsbytes("#"),
     cst$24=caml_string_of_jsbytes("?"),
     cst$29=caml_string_of_jsbytes(""),
     cst$25=caml_string_of_jsbytes("/"),
     cst$26=caml_string_of_jsbytes("/"),
     cst$28=caml_string_of_jsbytes(":"),
     cst$27=caml_string_of_jsbytes(""),
     cst_https$1=caml_string_of_jsbytes("https://"),
     cst$31=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst$32=caml_string_of_jsbytes("#"),
     cst$33=caml_string_of_jsbytes("?"),
     cst$35=caml_string_of_jsbytes(""),
     cst$34=caml_string_of_jsbytes("/"),
     cst_file$2=caml_string_of_jsbytes("file://"),
     cst$12=caml_string_of_jsbytes(""),
     cst$11=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes(""),
     cst$9=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes(""),
     cst$7=caml_string_of_jsbytes(""),
     cst$6=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes("="),
     cst$5=caml_string_of_jsbytes("&"),
     cst$2=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_file$0=caml_string_of_jsbytes("file"),
     cst_file$1=caml_string_of_jsbytes("file:"),
     cst_http=caml_string_of_jsbytes("http"),
     cst_http$0=caml_string_of_jsbytes("http:"),
     cst_https=caml_string_of_jsbytes("https"),
     cst_https$0=caml_string_of_jsbytes("https:"),
     cst$1=caml_string_of_jsbytes(" "),
     cst_2B=caml_string_of_jsbytes("%2B"),
     cst_Js_of_ocaml_Url_Local_exn=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Local_exn"),
     cst$0=caml_string_of_jsbytes("+"),
     cst_Js_of_ocaml_Url_Not_an_htt=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0=
      caml_string_of_jsbytes
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_string_of_jsbytes
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     s=caml_string_of_jsbytes("4.0.0"),
     git_version=caml_string_of_jsbytes("8ae6b13"),
     cst$38=caml_string_of_jsbytes(""),
     cst$41=caml_string_of_jsbytes("+"),
     cst_Jstable_keys=caml_string_of_jsbytes("Jstable.keys"),
     t5=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     cst_is_not_a_valid_length$0=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_string_of_jsbytes("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_string_of_jsbytes("length conversion error: "),
     cst_deg$0=caml_string_of_jsbytes("deg"),
     cst_grad$0=caml_string_of_jsbytes("grad"),
     cst_rad$0=caml_string_of_jsbytes("rad"),
     cst_turns$0=caml_string_of_jsbytes("turns"),
     cst_deg=caml_string_of_jsbytes("deg"),
     cst_grad=caml_string_of_jsbytes("grad"),
     cst_rad=caml_string_of_jsbytes("rad"),
     cst_turns=caml_string_of_jsbytes("turns"),
     cst_is_not_a_valid_length=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_d_d_s_S=caml_string_of_jsbytes("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=
      caml_string_of_jsbytes("length conversion error: "),
     cst_pc$0=caml_string_of_jsbytes("pc"),
     cst_ch$0=caml_string_of_jsbytes("ch"),
     cst_cm$0=caml_string_of_jsbytes("cm"),
     cst_em$1=caml_string_of_jsbytes("em"),
     cst_ex$0=caml_string_of_jsbytes("ex"),
     cst_gd$0=caml_string_of_jsbytes("gd"),
     cst_in$0=caml_string_of_jsbytes("in"),
     cst_mm$0=caml_string_of_jsbytes("mm"),
     cst_pt$0=caml_string_of_jsbytes("pt"),
     cst_px$0=caml_string_of_jsbytes("px"),
     cst_rem$0=caml_string_of_jsbytes("rem"),
     cst_vh$0=caml_string_of_jsbytes("vh"),
     cst_vm$0=caml_string_of_jsbytes("vm"),
     cst_vw$0=caml_string_of_jsbytes("vw"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_em$0=caml_string_of_jsbytes("em"),
     cst_ex=caml_string_of_jsbytes("ex"),
     cst_px=caml_string_of_jsbytes("px"),
     cst_gd=caml_string_of_jsbytes("gd"),
     cst_rem=caml_string_of_jsbytes("rem"),
     cst_vw=caml_string_of_jsbytes("vw"),
     cst_vh=caml_string_of_jsbytes("vh"),
     cst_vm=caml_string_of_jsbytes("vm"),
     cst_ch=caml_string_of_jsbytes("ch"),
     cst_mm=caml_string_of_jsbytes("mm"),
     cst_cm=caml_string_of_jsbytes("cm"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_pt=caml_string_of_jsbytes("pt"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst$40=caml_string_of_jsbytes("): "),
     cst_color_conversion_error$0=
      caml_string_of_jsbytes("color conversion error ("),
     cst$39=caml_string_of_jsbytes("): "),
     cst_color_conversion_error=
      caml_string_of_jsbytes("color conversion error ("),
     cst_is_not_a_valid_color$0=
      caml_string_of_jsbytes(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_string_of_jsbytes("rgb"),
     cst_rgba=caml_string_of_jsbytes("rgba"),
     cst_rgb$0=caml_string_of_jsbytes("rgb"),
     cst_rgba$0=caml_string_of_jsbytes("rgba"),
     cst_hsl=caml_string_of_jsbytes("hsl"),
     cst_hsla=caml_string_of_jsbytes("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_string_of_jsbytes("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_string_of_jsbytes(" is not a valid color"),
     cst_is_out_of_valid_range=
      caml_string_of_jsbytes(" is out of valid range"),
     partial=[8,[0,0,0],0,0,[12,41,0]],
     partial$0=[12,41,0],
     partial$1=[0,0,0],
     cst_lightgrey$0=caml_string_of_jsbytes("lightgrey"),
     cst_darkslategray$0=caml_string_of_jsbytes("darkslategray"),
     cst_cornsilk$0=caml_string_of_jsbytes("cornsilk"),
     cst_blue$0=caml_string_of_jsbytes("blue"),
     cst_aliceblue$0=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite$0=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua$0=caml_string_of_jsbytes("aqua"),
     cst_aquamarine$0=caml_string_of_jsbytes("aquamarine"),
     cst_azure$0=caml_string_of_jsbytes("azure"),
     cst_beige$0=caml_string_of_jsbytes("beige"),
     cst_bisque$0=caml_string_of_jsbytes("bisque"),
     cst_black$0=caml_string_of_jsbytes("black"),
     cst_blanchedalmond$0=caml_string_of_jsbytes("blanchedalmond"),
     cst_blueviolet$0=caml_string_of_jsbytes("blueviolet"),
     cst_brown$0=caml_string_of_jsbytes("brown"),
     cst_burlywood$0=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue$0=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse$0=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate$0=caml_string_of_jsbytes("chocolate"),
     cst_coral$0=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue$0=caml_string_of_jsbytes("cornflowerblue"),
     cst_darkkhaki$0=caml_string_of_jsbytes("darkkhaki"),
     cst_crimson$0=caml_string_of_jsbytes("crimson"),
     cst_cyan$0=caml_string_of_jsbytes("cyan"),
     cst_darkblue$0=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan$0=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod$0=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray$0=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen$0=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey$0=caml_string_of_jsbytes("darkgrey"),
     cst_darkmagenta$0=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen$0=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange$0=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid$0=caml_string_of_jsbytes("darkorchid"),
     cst_darkred$0=caml_string_of_jsbytes("darkred"),
     cst_darksalmon$0=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen$0=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue$0=caml_string_of_jsbytes("darkslateblue"),
     cst_greenyellow$0=caml_string_of_jsbytes("greenyellow"),
     cst_floralwhite$0=caml_string_of_jsbytes("floralwhite"),
     cst_darkslategrey$0=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise$0=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet$0=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink$0=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue$0=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray$0=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey$0=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue$0=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick$0=caml_string_of_jsbytes("firebrick"),
     cst_forestgreen$0=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia$0=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro$0=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite$0=caml_string_of_jsbytes("ghostwhite"),
     cst_gold$0=caml_string_of_jsbytes("gold"),
     cst_goldenrod$0=caml_string_of_jsbytes("goldenrod"),
     cst_gray$0=caml_string_of_jsbytes("gray"),
     cst_green$0=caml_string_of_jsbytes("green"),
     cst_lavenderblush$0=caml_string_of_jsbytes("lavenderblush"),
     cst_grey$0=caml_string_of_jsbytes("grey"),
     cst_honeydew$0=caml_string_of_jsbytes("honeydew"),
     cst_hotpink$0=caml_string_of_jsbytes("hotpink"),
     cst_indianred$0=caml_string_of_jsbytes("indianred"),
     cst_indigo$0=caml_string_of_jsbytes("indigo"),
     cst_ivory$0=caml_string_of_jsbytes("ivory"),
     cst_khaki$0=caml_string_of_jsbytes("khaki"),
     cst_lavender$0=caml_string_of_jsbytes("lavender"),
     cst_lawngreen$0=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon$0=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue$0=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral$0=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan$0=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray$0=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen$0=caml_string_of_jsbytes("lightgreen"),
     cst_paleturquoise$0=caml_string_of_jsbytes("paleturquoise"),
     cst_mediumslateblue$0=caml_string_of_jsbytes("mediumslateblue"),
     cst_limegreen$0=caml_string_of_jsbytes("limegreen"),
     cst_lightpink$0=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon$0=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen$0=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue$0=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray$0=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey$0=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue$0=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow$0=caml_string_of_jsbytes("lightyellow"),
     cst_lime$0=caml_string_of_jsbytes("lime"),
     cst_linen$0=caml_string_of_jsbytes("linen"),
     cst_magenta$0=caml_string_of_jsbytes("magenta"),
     cst_maroon$0=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine$0=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue$0=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid$0=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple$0=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen$0=caml_string_of_jsbytes("mediumseagreen"),
     cst_navy$0=caml_string_of_jsbytes("navy"),
     cst_mediumspringgreen$0=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise$0=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred$0=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue$0=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream$0=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose$0=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin$0=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite$0=caml_string_of_jsbytes("navajowhite"),
     cst_oldlace$0=caml_string_of_jsbytes("oldlace"),
     cst_olive$0=caml_string_of_jsbytes("olive"),
     cst_olivedrab$0=caml_string_of_jsbytes("olivedrab"),
     cst_orange$0=caml_string_of_jsbytes("orange"),
     cst_orangered$0=caml_string_of_jsbytes("orangered"),
     cst_orchid$0=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod$0=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen$0=caml_string_of_jsbytes("palegreen"),
     cst_skyblue$0=caml_string_of_jsbytes("skyblue"),
     cst_rosybrown$0=caml_string_of_jsbytes("rosybrown"),
     cst_palevioletred$0=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip$0=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff$0=caml_string_of_jsbytes("peachpuff"),
     cst_peru$0=caml_string_of_jsbytes("peru"),
     cst_pink$0=caml_string_of_jsbytes("pink"),
     cst_plum$0=caml_string_of_jsbytes("plum"),
     cst_powderblue$0=caml_string_of_jsbytes("powderblue"),
     cst_purple$0=caml_string_of_jsbytes("purple"),
     cst_red$0=caml_string_of_jsbytes("red"),
     cst_royalblue$0=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown$0=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon$0=caml_string_of_jsbytes("salmon"),
     cst_sandybrown$0=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen$0=caml_string_of_jsbytes("seagreen"),
     cst_seashell$0=caml_string_of_jsbytes("seashell"),
     cst_sienna$0=caml_string_of_jsbytes("sienna"),
     cst_silver$0=caml_string_of_jsbytes("silver"),
     cst_thistle$0=caml_string_of_jsbytes("thistle"),
     cst_slateblue$0=caml_string_of_jsbytes("slateblue"),
     cst_slategray$0=caml_string_of_jsbytes("slategray"),
     cst_slategrey$0=caml_string_of_jsbytes("slategrey"),
     cst_snow$0=caml_string_of_jsbytes("snow"),
     cst_springgreen$0=caml_string_of_jsbytes("springgreen"),
     cst_steelblue$0=caml_string_of_jsbytes("steelblue"),
     cst_tan$0=caml_string_of_jsbytes("tan"),
     cst_teal$0=caml_string_of_jsbytes("teal"),
     cst_tomato$0=caml_string_of_jsbytes("tomato"),
     cst_turquoise$0=caml_string_of_jsbytes("turquoise"),
     cst_violet$0=caml_string_of_jsbytes("violet"),
     cst_wheat$0=caml_string_of_jsbytes("wheat"),
     cst_white$0=caml_string_of_jsbytes("white"),
     cst_whitesmoke$0=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow$0=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen$0=caml_string_of_jsbytes("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_string_of_jsbytes(" is not a valid color name"),
     cst_aliceblue=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua=caml_string_of_jsbytes("aqua"),
     cst_aquamarine=caml_string_of_jsbytes("aquamarine"),
     cst_azure=caml_string_of_jsbytes("azure"),
     cst_beige=caml_string_of_jsbytes("beige"),
     cst_bisque=caml_string_of_jsbytes("bisque"),
     cst_black=caml_string_of_jsbytes("black"),
     cst_blanchedalmond=caml_string_of_jsbytes("blanchedalmond"),
     cst_blue=caml_string_of_jsbytes("blue"),
     cst_blueviolet=caml_string_of_jsbytes("blueviolet"),
     cst_brown=caml_string_of_jsbytes("brown"),
     cst_burlywood=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate=caml_string_of_jsbytes("chocolate"),
     cst_coral=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue=caml_string_of_jsbytes("cornflowerblue"),
     cst_cornsilk=caml_string_of_jsbytes("cornsilk"),
     cst_crimson=caml_string_of_jsbytes("crimson"),
     cst_cyan=caml_string_of_jsbytes("cyan"),
     cst_darkblue=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey=caml_string_of_jsbytes("darkgrey"),
     cst_darkkhaki=caml_string_of_jsbytes("darkkhaki"),
     cst_darkmagenta=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid=caml_string_of_jsbytes("darkorchid"),
     cst_darkred=caml_string_of_jsbytes("darkred"),
     cst_darksalmon=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue=caml_string_of_jsbytes("darkslateblue"),
     cst_darkslategray=caml_string_of_jsbytes("darkslategray"),
     cst_darkslategrey=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick=caml_string_of_jsbytes("firebrick"),
     cst_floralwhite=caml_string_of_jsbytes("floralwhite"),
     cst_forestgreen=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite=caml_string_of_jsbytes("ghostwhite"),
     cst_gold=caml_string_of_jsbytes("gold"),
     cst_goldenrod=caml_string_of_jsbytes("goldenrod"),
     cst_gray=caml_string_of_jsbytes("gray"),
     cst_grey=caml_string_of_jsbytes("grey"),
     cst_green=caml_string_of_jsbytes("green"),
     cst_greenyellow=caml_string_of_jsbytes("greenyellow"),
     cst_honeydew=caml_string_of_jsbytes("honeydew"),
     cst_hotpink=caml_string_of_jsbytes("hotpink"),
     cst_indianred=caml_string_of_jsbytes("indianred"),
     cst_indigo=caml_string_of_jsbytes("indigo"),
     cst_ivory=caml_string_of_jsbytes("ivory"),
     cst_khaki=caml_string_of_jsbytes("khaki"),
     cst_lavender=caml_string_of_jsbytes("lavender"),
     cst_lavenderblush=caml_string_of_jsbytes("lavenderblush"),
     cst_lawngreen=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen=caml_string_of_jsbytes("lightgreen"),
     cst_lightgrey=caml_string_of_jsbytes("lightgrey"),
     cst_lightpink=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow=caml_string_of_jsbytes("lightyellow"),
     cst_lime=caml_string_of_jsbytes("lime"),
     cst_limegreen=caml_string_of_jsbytes("limegreen"),
     cst_linen=caml_string_of_jsbytes("linen"),
     cst_magenta=caml_string_of_jsbytes("magenta"),
     cst_maroon=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen=caml_string_of_jsbytes("mediumseagreen"),
     cst_mediumslateblue=caml_string_of_jsbytes("mediumslateblue"),
     cst_mediumspringgreen=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite=caml_string_of_jsbytes("navajowhite"),
     cst_navy=caml_string_of_jsbytes("navy"),
     cst_oldlace=caml_string_of_jsbytes("oldlace"),
     cst_olive=caml_string_of_jsbytes("olive"),
     cst_olivedrab=caml_string_of_jsbytes("olivedrab"),
     cst_orange=caml_string_of_jsbytes("orange"),
     cst_orangered=caml_string_of_jsbytes("orangered"),
     cst_orchid=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen=caml_string_of_jsbytes("palegreen"),
     cst_paleturquoise=caml_string_of_jsbytes("paleturquoise"),
     cst_palevioletred=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff=caml_string_of_jsbytes("peachpuff"),
     cst_peru=caml_string_of_jsbytes("peru"),
     cst_pink=caml_string_of_jsbytes("pink"),
     cst_plum=caml_string_of_jsbytes("plum"),
     cst_powderblue=caml_string_of_jsbytes("powderblue"),
     cst_purple=caml_string_of_jsbytes("purple"),
     cst_red=caml_string_of_jsbytes("red"),
     cst_rosybrown=caml_string_of_jsbytes("rosybrown"),
     cst_royalblue=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon=caml_string_of_jsbytes("salmon"),
     cst_sandybrown=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen=caml_string_of_jsbytes("seagreen"),
     cst_seashell=caml_string_of_jsbytes("seashell"),
     cst_sienna=caml_string_of_jsbytes("sienna"),
     cst_silver=caml_string_of_jsbytes("silver"),
     cst_skyblue=caml_string_of_jsbytes("skyblue"),
     cst_slateblue=caml_string_of_jsbytes("slateblue"),
     cst_slategray=caml_string_of_jsbytes("slategray"),
     cst_slategrey=caml_string_of_jsbytes("slategrey"),
     cst_snow=caml_string_of_jsbytes("snow"),
     cst_springgreen=caml_string_of_jsbytes("springgreen"),
     cst_steelblue=caml_string_of_jsbytes("steelblue"),
     cst_tan=caml_string_of_jsbytes("tan"),
     cst_teal=caml_string_of_jsbytes("teal"),
     cst_thistle=caml_string_of_jsbytes("thistle"),
     cst_tomato=caml_string_of_jsbytes("tomato"),
     cst_turquoise=caml_string_of_jsbytes("turquoise"),
     cst_violet=caml_string_of_jsbytes("violet"),
     cst_wheat=caml_string_of_jsbytes("wheat"),
     cst_white=caml_string_of_jsbytes("white"),
     cst_whitesmoke=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen=caml_string_of_jsbytes("yellowgreen"),
     cst_vkern$0=caml_string_of_jsbytes("vkern"),
     cst_view$0=caml_string_of_jsbytes("view"),
     cst_use$0=caml_string_of_jsbytes("use"),
     cst_tspan$0=caml_string_of_jsbytes("tspan"),
     cst_tref$0=caml_string_of_jsbytes("tref"),
     cst_title$3=caml_string_of_jsbytes("title"),
     cst_textpath$0=caml_string_of_jsbytes("textpath"),
     cst_text$1=caml_string_of_jsbytes("text"),
     cst_symbol$0=caml_string_of_jsbytes("symbol"),
     cst_switch$0=caml_string_of_jsbytes("switch"),
     cst_svg$0=caml_string_of_jsbytes("svg"),
     cst_style$3=caml_string_of_jsbytes("style"),
     cst_stop$0=caml_string_of_jsbytes("stop"),
     cst_set$0=caml_string_of_jsbytes("set"),
     cst_script$3=caml_string_of_jsbytes("script"),
     cst_rect$0=caml_string_of_jsbytes("rect"),
     cst_radialgradient$0=caml_string_of_jsbytes("radialgradient"),
     cst_polyline$0=caml_string_of_jsbytes("polyline"),
     cst_polygon$0=caml_string_of_jsbytes("polygon"),
     cst_pattern$0=caml_string_of_jsbytes("pattern"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_mpath$0=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph$0=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata$0=caml_string_of_jsbytes("metadata"),
     cst_mask$0=caml_string_of_jsbytes("mask"),
     cst_lineargradient$0=caml_string_of_jsbytes("lineargradient"),
     cst_line$0=caml_string_of_jsbytes("line"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_hkern$0=caml_string_of_jsbytes("hkern"),
     cst_glyphref$0=caml_string_of_jsbytes("glyphref"),
     cst_glyph$0=caml_string_of_jsbytes("glyph"),
     cst_g$1=caml_string_of_jsbytes("g"),
     cst_foreignobject=caml_string_of_jsbytes("foreignobject"),
     cst_font_face_uri$0=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src$0=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name$0=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format$0=caml_string_of_jsbytes("font-face-format"),
     cst_font_face$0=caml_string_of_jsbytes("font-face"),
     cst_font$0=caml_string_of_jsbytes("font"),
     cst_filter$0=caml_string_of_jsbytes("filter"),
     cst_ellipse$0=caml_string_of_jsbytes("ellipse"),
     cst_desc$0=caml_string_of_jsbytes("desc"),
     cst_defs$0=caml_string_of_jsbytes("defs"),
     cst_cursor$0=caml_string_of_jsbytes("cursor"),
     cst_clippath$0=caml_string_of_jsbytes("clippath"),
     cst_circle$0=caml_string_of_jsbytes("circle"),
     cst_animatetransform$0=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion$0=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor$0=caml_string_of_jsbytes("animatecolor"),
     cst_animate$0=caml_string_of_jsbytes("animate"),
     cst_altglyphitem$0=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef$0=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph$0=caml_string_of_jsbytes("altglyph"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_vkern=caml_string_of_jsbytes("vkern"),
     cst_view=caml_string_of_jsbytes("view"),
     cst_use=caml_string_of_jsbytes("use"),
     cst_tspan=caml_string_of_jsbytes("tspan"),
     cst_tref=caml_string_of_jsbytes("tref"),
     cst_title$2=caml_string_of_jsbytes("title"),
     cst_textpath=caml_string_of_jsbytes("textpath"),
     cst_text$0=caml_string_of_jsbytes("text"),
     cst_symbol=caml_string_of_jsbytes("symbol"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_style$2=caml_string_of_jsbytes("style"),
     cst_stop=caml_string_of_jsbytes("stop"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_script$2=caml_string_of_jsbytes("script"),
     cst_rect=caml_string_of_jsbytes("rect"),
     cst_radialgradient=caml_string_of_jsbytes("radialgradient"),
     cst_polyline=caml_string_of_jsbytes("polyline"),
     cst_polygon=caml_string_of_jsbytes("polygon"),
     cst_pattern=caml_string_of_jsbytes("pattern"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_mpath=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata=caml_string_of_jsbytes("metadata"),
     cst_mask=caml_string_of_jsbytes("mask"),
     cst_lineargradient=caml_string_of_jsbytes("lineargradient"),
     cst_line=caml_string_of_jsbytes("line"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_hkern=caml_string_of_jsbytes("hkern"),
     cst_glyphref=caml_string_of_jsbytes("glyphref"),
     cst_glyph=caml_string_of_jsbytes("glyph"),
     cst_g$0=caml_string_of_jsbytes("g"),
     cst_foreignObject=caml_string_of_jsbytes("foreignObject"),
     cst_font_face_uri=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format=caml_string_of_jsbytes("font-face-format"),
     cst_font_face=caml_string_of_jsbytes("font-face"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_ellipse=caml_string_of_jsbytes("ellipse"),
     cst_desc=caml_string_of_jsbytes("desc"),
     cst_defs=caml_string_of_jsbytes("defs"),
     cst_cursor=caml_string_of_jsbytes("cursor"),
     cst_clippath=caml_string_of_jsbytes("clippath"),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_animatetransform=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor=caml_string_of_jsbytes("animatecolor"),
     cst_animate=caml_string_of_jsbytes("animate"),
     cst_altglyphitem=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph=caml_string_of_jsbytes("altglyph"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_Js_of_ocaml_Dom_svg_SVGErr=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_svg.SVGError"),
     Stdlib_String=global_data.Stdlib__String,
     Stdlib_Char=global_data.Stdlib__Char,
     Stdlib=global_data.Stdlib,
     Jsoo_runtime=global_data.Jsoo_runtime,
     Stdlib_Printexc=global_data.Stdlib__Printexc,
     Assert_failure=global_data.Assert_failure,
     Stdlib_List=global_data.Stdlib__List,
     Stdlib_Array=global_data.Stdlib__Array,
     Stdlib_Uchar=global_data.Stdlib__Uchar,
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib_Obj=global_data.Stdlib__Obj,
     Js_of_ocaml=[0];
    caml_register_global(1635,Js_of_ocaml,"Js_of_ocaml__");
    var
     Poly=[0],
     _g_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom.ml"),351,67],
     _h_=[0,caml_string_of_jsbytes("transparent")],
     _i_=[0,caml_string_of_jsbytes("native")],
     _m_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2850,58],
     _l_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2849,61],
     _k_=
      [0,
       [11,
        caml_string_of_jsbytes("getElementById_exn: "),
        [3,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("getElementById_exn: %S not found")],
     _o_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/form.ml"),178,13],
     _n_=[0,1],
     _p_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/regexp.ml"),34,64],
     _q_=[0,caml_string_of_jsbytes(""),0],
     _ck_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cl_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cm_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cn_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b8_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b9_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b__=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b$_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ca_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cb_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cc_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cd_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ce_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cf_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cg_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ch_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ci_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cj_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b7_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("aliceblue"),
         caml_string_of_jsbytes("antiquewhite"),
         caml_string_of_jsbytes("aqua"),
         caml_string_of_jsbytes("aquamarine"),
         caml_string_of_jsbytes("azure"),
         caml_string_of_jsbytes("beige"),
         caml_string_of_jsbytes("bisque"),
         caml_string_of_jsbytes("black"),
         caml_string_of_jsbytes("blanchedalmond"),
         caml_string_of_jsbytes("blue"),
         caml_string_of_jsbytes("blueviolet"),
         caml_string_of_jsbytes("brown"),
         caml_string_of_jsbytes("burlywood"),
         caml_string_of_jsbytes("cadetblue"),
         caml_string_of_jsbytes("chartreuse"),
         caml_string_of_jsbytes("chocolate"),
         caml_string_of_jsbytes("coral"),
         caml_string_of_jsbytes("cornflowerblue"),
         caml_string_of_jsbytes("cornsilk"),
         caml_string_of_jsbytes("crimson"),
         caml_string_of_jsbytes("cyan"),
         caml_string_of_jsbytes("darkblue"),
         caml_string_of_jsbytes("darkcyan"),
         caml_string_of_jsbytes("darkgoldenrod"),
         caml_string_of_jsbytes("darkgray"),
         caml_string_of_jsbytes("darkgreen"),
         caml_string_of_jsbytes("darkgrey"),
         caml_string_of_jsbytes("darkkhaki"),
         caml_string_of_jsbytes("darkmagenta"),
         caml_string_of_jsbytes("darkolivegreen"),
         caml_string_of_jsbytes("darkorange"),
         caml_string_of_jsbytes("darkorchid"),
         caml_string_of_jsbytes("darkred"),
         caml_string_of_jsbytes("darksalmon"),
         caml_string_of_jsbytes("darkseagreen"),
         caml_string_of_jsbytes("darkslateblue"),
         caml_string_of_jsbytes("darkslategray"),
         caml_string_of_jsbytes("darkslategrey"),
         caml_string_of_jsbytes("darkturquoise"),
         caml_string_of_jsbytes("darkviolet"),
         caml_string_of_jsbytes("deeppink"),
         caml_string_of_jsbytes("deepskyblue"),
         caml_string_of_jsbytes("dimgray"),
         caml_string_of_jsbytes("dimgrey"),
         caml_string_of_jsbytes("dodgerblue"),
         caml_string_of_jsbytes("firebrick"),
         caml_string_of_jsbytes("floralwhite"),
         caml_string_of_jsbytes("forestgreen"),
         caml_string_of_jsbytes("fuchsia"),
         caml_string_of_jsbytes("gainsboro"),
         caml_string_of_jsbytes("ghostwhite"),
         caml_string_of_jsbytes("gold"),
         caml_string_of_jsbytes("goldenrod"),
         caml_string_of_jsbytes("gray"),
         caml_string_of_jsbytes("green"),
         caml_string_of_jsbytes("greenyellow"),
         caml_string_of_jsbytes("grey"),
         caml_string_of_jsbytes("honeydew"),
         caml_string_of_jsbytes("hotpink"),
         caml_string_of_jsbytes("indianred"),
         caml_string_of_jsbytes("indigo"),
         caml_string_of_jsbytes("ivory"),
         caml_string_of_jsbytes("khaki"),
         caml_string_of_jsbytes("lavender"),
         caml_string_of_jsbytes("lavenderblush"),
         caml_string_of_jsbytes("lawngreen"),
         caml_string_of_jsbytes("lemonchiffon"),
         caml_string_of_jsbytes("lightblue"),
         caml_string_of_jsbytes("lightcoral"),
         caml_string_of_jsbytes("lightcyan"),
         caml_string_of_jsbytes("lightgoldenrodyellow"),
         caml_string_of_jsbytes("lightgray"),
         caml_string_of_jsbytes("lightgreen"),
         caml_string_of_jsbytes("lightgrey"),
         caml_string_of_jsbytes("lightpink"),
         caml_string_of_jsbytes("lightsalmon"),
         caml_string_of_jsbytes("lightseagreen"),
         caml_string_of_jsbytes("lightskyblue"),
         caml_string_of_jsbytes("lightslategray"),
         caml_string_of_jsbytes("lightslategrey"),
         caml_string_of_jsbytes("lightsteelblue"),
         caml_string_of_jsbytes("lightyellow"),
         caml_string_of_jsbytes("lime"),
         caml_string_of_jsbytes("limegreen"),
         caml_string_of_jsbytes("linen"),
         caml_string_of_jsbytes("magenta"),
         caml_string_of_jsbytes("maroon"),
         caml_string_of_jsbytes("mediumaquamarine"),
         caml_string_of_jsbytes("mediumblue"),
         caml_string_of_jsbytes("mediumorchid"),
         caml_string_of_jsbytes("mediumpurple"),
         caml_string_of_jsbytes("mediumseagreen"),
         caml_string_of_jsbytes("mediumslateblue"),
         caml_string_of_jsbytes("mediumspringgreen"),
         caml_string_of_jsbytes("mediumturquoise"),
         caml_string_of_jsbytes("mediumvioletred"),
         caml_string_of_jsbytes("midnightblue"),
         caml_string_of_jsbytes("mintcream"),
         caml_string_of_jsbytes("mistyrose"),
         caml_string_of_jsbytes("moccasin"),
         caml_string_of_jsbytes("navajowhite"),
         caml_string_of_jsbytes("navy"),
         caml_string_of_jsbytes("oldlace"),
         caml_string_of_jsbytes("olive"),
         caml_string_of_jsbytes("olivedrab"),
         caml_string_of_jsbytes("orange"),
         caml_string_of_jsbytes("orangered"),
         caml_string_of_jsbytes("orchid"),
         caml_string_of_jsbytes("palegoldenrod"),
         caml_string_of_jsbytes("palegreen"),
         caml_string_of_jsbytes("paleturquoise"),
         caml_string_of_jsbytes("palevioletred"),
         caml_string_of_jsbytes("papayawhip"),
         caml_string_of_jsbytes("peachpuff"),
         caml_string_of_jsbytes("peru"),
         caml_string_of_jsbytes("pink"),
         caml_string_of_jsbytes("plum"),
         caml_string_of_jsbytes("powderblue"),
         caml_string_of_jsbytes("purple"),
         caml_string_of_jsbytes("red"),
         caml_string_of_jsbytes("rosybrown"),
         caml_string_of_jsbytes("royalblue"),
         caml_string_of_jsbytes("saddlebrown"),
         caml_string_of_jsbytes("salmon"),
         caml_string_of_jsbytes("sandybrown"),
         caml_string_of_jsbytes("seagreen"),
         caml_string_of_jsbytes("seashell"),
         caml_string_of_jsbytes("sienna"),
         caml_string_of_jsbytes("silver"),
         caml_string_of_jsbytes("skyblue"),
         caml_string_of_jsbytes("slateblue"),
         caml_string_of_jsbytes("slategray"),
         caml_string_of_jsbytes("slategrey"),
         caml_string_of_jsbytes("snow"),
         caml_string_of_jsbytes("springgreen"),
         caml_string_of_jsbytes("steelblue"),
         caml_string_of_jsbytes("tan"),
         caml_string_of_jsbytes("teal"),
         caml_string_of_jsbytes("thistle"),
         caml_string_of_jsbytes("tomato"),
         caml_string_of_jsbytes("turquoise"),
         caml_string_of_jsbytes("violet"),
         caml_string_of_jsbytes("wheat"),
         caml_string_of_jsbytes("white"),
         caml_string_of_jsbytes("whitesmoke"),
         caml_string_of_jsbytes("yellow"),
         caml_string_of_jsbytes("yellowgreen")]),
     _b6_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_string_of_jsbytes("#%02X%02X%02X")],
     _b0_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("rgb(%d,%d,%d)")],
     _b1_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_string_of_jsbytes("rgb(%d%%,%d%%,%d%%)")],
     _b2_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,[0,0,0],0,0,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d,%d,%d,%f)")],
     _b3_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d%%,%d%%,%d%%,%f)")],
     _b4_=
      [0,
       [11,
        caml_string_of_jsbytes("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("hsl(%d,%d%%,%d%%)")],
     _b5_=
      [0,
       [11,
        caml_string_of_jsbytes("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,
            37,
            [12,44,[4,0,0,0,[12,37,[12,44,[8,partial$1,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("hsla(%d,%d%%,%d%%,%f)")],
     _x_=[0,240,248,255],
     _y_=[0,250,235,215],
     _z_=[0,0,255,255],
     _A_=[0,127,255,212],
     _B_=[0,240,255,255],
     _C_=[0,245,245,220],
     _D_=[0,255,228,196],
     _E_=[0,0,0,0],
     _F_=[0,255,235,205],
     _G_=[0,0,0,255],
     _H_=[0,138,43,226],
     _I_=[0,165,42,42],
     _J_=[0,222,184,135],
     _K_=[0,95,158,160],
     _L_=[0,127,255,0],
     _M_=[0,210,105,30],
     _N_=[0,255,127,80],
     _O_=[0,100,149,237],
     _P_=[0,255,248,220],
     _Q_=[0,220,20,60],
     _R_=[0,0,255,255],
     _S_=[0,0,0,139],
     _T_=[0,0,139,139],
     _U_=[0,184,134,11],
     _V_=[0,169,169,169],
     _W_=[0,0,100,0],
     _X_=[0,169,169,169],
     _Y_=[0,189,183,107],
     _Z_=[0,139,0,139],
     ___=[0,85,107,47],
     _$_=[0,255,140,0],
     _aa_=[0,153,50,204],
     _ab_=[0,139,0,0],
     _ac_=[0,233,150,122],
     _ad_=[0,143,188,143],
     _ae_=[0,72,61,139],
     _af_=[0,47,79,79],
     _ag_=[0,47,79,79],
     _ah_=[0,0,206,209],
     _ai_=[0,148,0,211],
     _aj_=[0,255,20,147],
     _ak_=[0,0,191,255],
     _al_=[0,105,105,105],
     _am_=[0,105,105,105],
     _an_=[0,30,144,255],
     _ao_=[0,178,34,34],
     _ap_=[0,255,250,240],
     _aq_=[0,34,139,34],
     _ar_=[0,255,0,255],
     _as_=[0,220,220,220],
     _at_=[0,248,248,255],
     _au_=[0,255,215,0],
     _av_=[0,218,165,32],
     _aw_=[0,128,128,128],
     _ax_=[0,128,128,128],
     _ay_=[0,0,128,0],
     _az_=[0,173,255,47],
     _aA_=[0,240,255,240],
     _aB_=[0,255,105,180],
     _aC_=[0,205,92,92],
     _aD_=[0,75,0,130],
     _aE_=[0,255,255,240],
     _aF_=[0,240,230,140],
     _aG_=[0,230,230,250],
     _aH_=[0,255,240,245],
     _aI_=[0,124,252,0],
     _aJ_=[0,255,250,205],
     _aK_=[0,173,216,230],
     _aL_=[0,240,128,128],
     _aM_=[0,224,255,255],
     _aN_=[0,250,250,210],
     _aO_=[0,211,211,211],
     _aP_=[0,144,238,144],
     _aQ_=[0,211,211,211],
     _aR_=[0,255,182,193],
     _aS_=[0,255,160,122],
     _aT_=[0,32,178,170],
     _aU_=[0,135,206,250],
     _aV_=[0,119,136,153],
     _aW_=[0,119,136,153],
     _aX_=[0,176,196,222],
     _aY_=[0,255,255,224],
     _aZ_=[0,0,255,0],
     _a0_=[0,50,205,50],
     _a1_=[0,250,240,230],
     _a2_=[0,255,0,255],
     _a3_=[0,128,0,0],
     _a4_=[0,102,205,170],
     _a5_=[0,0,0,205],
     _a6_=[0,186,85,211],
     _a7_=[0,147,112,219],
     _a8_=[0,60,179,113],
     _a9_=[0,123,104,238],
     _a__=[0,0,250,154],
     _a$_=[0,72,209,204],
     _ba_=[0,199,21,133],
     _bb_=[0,25,25,112],
     _bc_=[0,245,255,250],
     _bd_=[0,255,228,225],
     _be_=[0,255,228,181],
     _bf_=[0,255,222,173],
     _bg_=[0,0,0,128],
     _bh_=[0,253,245,230],
     _bi_=[0,128,128,0],
     _bj_=[0,107,142,35],
     _bk_=[0,255,165,0],
     _bl_=[0,255,69,0],
     _bm_=[0,218,112,214],
     _bn_=[0,238,232,170],
     _bo_=[0,152,251,152],
     _bp_=[0,175,238,238],
     _bq_=[0,219,112,147],
     _br_=[0,255,239,213],
     _bs_=[0,255,218,185],
     _bt_=[0,205,133,63],
     _bu_=[0,255,192,203],
     _bv_=[0,221,160,221],
     _bw_=[0,176,224,230],
     _bx_=[0,128,0,128],
     _by_=[0,255,0,0],
     _bz_=[0,188,143,143],
     _bA_=[0,65,105,225],
     _bB_=[0,139,69,19],
     _bC_=[0,250,128,114],
     _bD_=[0,244,164,96],
     _bE_=[0,46,139,87],
     _bF_=[0,255,245,238],
     _bG_=[0,160,82,45],
     _bH_=[0,192,192,192],
     _bI_=[0,135,206,235],
     _bJ_=[0,106,90,205],
     _bK_=[0,112,128,144],
     _bL_=[0,112,128,144],
     _bM_=[0,255,250,250],
     _bN_=[0,0,255,127],
     _bO_=[0,70,130,180],
     _bP_=[0,210,180,140],
     _bQ_=[0,0,128,128],
     _bR_=[0,216,191,216],
     _bS_=[0,255,99,71],
     _bT_=[0,64,224,208],
     _bU_=[0,238,130,238],
     _bV_=[0,245,222,179],
     _bW_=[0,255,255,255],
     _bX_=[0,245,245,245],
     _bY_=[0,255,255,0],
     _bZ_=[0,154,205,50];
    function symbol(x,y){return x < y?1:0}
    function symbol$0(x,y){return x <= y?1:0}
    function symbol$1(x,y){return x !== y?1:0}
    function symbol$2(x,y){return x === y?1:0}
    function symbol$3(x,y){return y < x?1:0}
    function symbol$4(x,y){return y <= x?1:0}
    var compare=runtime.caml_int_compare;
    function equal(x,y){return x === y?1:0}
    function max(x,y){return y <= x?x:y}
    function min(x,y){return x <= y?x:y}
    var
     Int_replace_polymorphic_compar=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
     make=Stdlib_String[1],
     init=Stdlib_String[2],
     empty=Stdlib_String[3],
     of_bytes=Stdlib_String[4],
     to_bytes=Stdlib_String[5],
     concat=Stdlib_String[6],
     cat=Stdlib_String[7],
     compare$0=Stdlib_String[9],
     starts_with=Stdlib_String[10],
     ends_with=Stdlib_String[11],
     contains_from=Stdlib_String[12],
     rcontains_from=Stdlib_String[13],
     contains=Stdlib_String[14],
     sub=Stdlib_String[15],
     split_on_char=Stdlib_String[16],
     map=Stdlib_String[17],
     mapi=Stdlib_String[18],
     fold_left=Stdlib_String[19],
     fold_right=Stdlib_String[20],
     for_all=Stdlib_String[21],
     exists=Stdlib_String[22],
     trim=Stdlib_String[23],
     escaped=Stdlib_String[24],
     uppercase_ascii=Stdlib_String[25],
     lowercase_ascii=Stdlib_String[26],
     capitalize_ascii=Stdlib_String[27],
     uncapitalize_ascii=Stdlib_String[28],
     iter=Stdlib_String[29],
     iteri=Stdlib_String[30],
     index_from=Stdlib_String[31],
     index_from_opt=Stdlib_String[32],
     rindex_from=Stdlib_String[33],
     rindex_from_opt=Stdlib_String[34],
     index=Stdlib_String[35],
     index_opt=Stdlib_String[36],
     rindex=Stdlib_String[37],
     rindex_opt=Stdlib_String[38],
     to_seq=Stdlib_String[39],
     to_seqi=Stdlib_String[40],
     of_seq=Stdlib_String[41],
     get_utf_8_uchar=Stdlib_String[42],
     is_valid_utf_8=Stdlib_String[43],
     get_utf_16be_uchar=Stdlib_String[44],
     is_valid_utf_16be=Stdlib_String[45],
     get_utf_16le_uchar=Stdlib_String[46],
     is_valid_utf_16le=Stdlib_String[47],
     blit=Stdlib_String[48],
     copy=Stdlib_String[49],
     fill=Stdlib_String[50],
     uppercase=Stdlib_String[51],
     lowercase=Stdlib_String[52],
     capitalize=Stdlib_String[53],
     uncapitalize=Stdlib_String[54],
     get_uint8=Stdlib_String[55],
     get_int8=Stdlib_String[56],
     get_uint16_ne=Stdlib_String[57],
     get_uint16_be=Stdlib_String[58],
     get_uint16_le=Stdlib_String[59],
     get_int16_ne=Stdlib_String[60],
     get_int16_be=Stdlib_String[61],
     get_int16_le=Stdlib_String[62],
     get_int32_ne=Stdlib_String[63],
     get_int32_be=Stdlib_String[64],
     get_int32_le=Stdlib_String[65],
     get_int64_ne=Stdlib_String[66],
     get_int64_be=Stdlib_String[67],
     get_int64_le=Stdlib_String[68];
    function equal$0(x,y){return runtime.caml_string_equal(x,y)}
    var
     String=
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
     chr=Stdlib_Char[1],
     escaped$0=Stdlib_Char[2],
     lowercase$0=Stdlib_Char[3],
     uppercase$0=Stdlib_Char[4],
     lowercase_ascii$0=Stdlib_Char[5],
     uppercase_ascii$0=Stdlib_Char[6],
     compare$1=Stdlib_Char[7];
    function equal$1(x,y){return x === y?1:0}
    var
     Char=
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
     symbol$5=Int_replace_polymorphic_compar[1],
     symbol$6=Int_replace_polymorphic_compar[2],
     symbol$7=Int_replace_polymorphic_compar[3],
     symbol$8=Int_replace_polymorphic_compar[4],
     symbol$9=Int_replace_polymorphic_compar[5],
     symbol$10=Int_replace_polymorphic_compar[6],
     compare$2=Int_replace_polymorphic_compar[7],
     equal$2=Int_replace_polymorphic_compar[8],
     max$0=Int_replace_polymorphic_compar[9],
     min$0=Int_replace_polymorphic_compar[10],
     Js_of_ocaml_Import=
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
    caml_register_global(1638,Js_of_ocaml_Import,"Js_of_ocaml__Import");
    var global=globalThis,Unsafe=[0,global],no_handler=null,t39=undefined;
    function return$0(_gO_){return _gO_}
    function map$0(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function bind(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function test(x){return 1 - (x == no_handler?1:0)}
    function iter$0(x,f)
     {var _gN_=1 - (x == no_handler?1:0);return _gN_?caml_call1(f,x):_gN_}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    function option(x){if(x){var x$0=x[1];return x$0}return no_handler}
    function to_option(x)
     {function _gM_(x){return [0,x]}
      return case$0(x,function(param){return 0},_gM_)}
    var
     Opt=
      [0,
       no_handler,
       return$0,
       map$0,
       bind,
       test,
       iter$0,
       case$0,
       get,
       option,
       to_option];
    function return$1(_gL_){return _gL_}
    function map$1(x,f){return x === t39?t39:caml_call1(f,x)}
    function bind$0(x,f){return x === t39?t39:caml_call1(f,x)}
    function test$0(x){return x !== t39?1:0}
    function iter$1(x,f)
     {var _gK_=x !== t39?1:0;return _gK_?caml_call1(f,x):_gK_}
    function case$1(x,f,g){return x === t39?caml_call1(f,0):caml_call1(g,x)}
    function get$0(x,f){return x === t39?caml_call1(f,0):x}
    function option$0(x){if(x){var x$0=x[1];return x$0}return t39}
    function to_option$0(x)
     {function _gJ_(x){return [0,x]}
      return case$1(x,function(param){return 0},_gJ_)}
    var
     Optdef=
      [0,
       t39,
       return$1,
       map$1,
       bind$0,
       test$0,
       iter$1,
       case$1,
       get$0,
       option$0,
       to_option$0];
    function coerce(x,f,g)
     {function _gH_(param){return caml_call1(g,x)}
      var _gI_=caml_call1(f,x);
      return caml_call2(Opt[8],_gI_,_gH_)}
    function coerce_opt(x,f,g)
     {function _gF_(param){return caml_call1(g,x)}
      var _gG_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_gG_,_gF_)}
    var
     t25=true,
     t4=false,
     string_constr=Unsafe[1].String,
     t11=Unsafe[1].RegExp,
     t4$0=Unsafe[1].Object;
    function object_keys(t3){return t4$0.keys(t3)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_gE_){return _gE_}
    function match_result(_gD_){return _gD_}
    var
     t122=Unsafe[1].Date,
     math=Unsafe[1].Math,
     error_constr=Unsafe[1].Error,
     include=Jsoo_runtime[3],
     raise=include[1],
     attach_js_backtrace=include[2],
     of_exn=include[3],
     Error=include[4];
    function name(e){return caml_string_of_jsstring(e.name)}
    function message(e){return caml_string_of_jsstring(e.message)}
    function stack(e)
     {var _gC_=caml_call2(Opt[3],e.stack,caml_string_of_jsstring);
      return caml_call1(Opt[10],_gC_)}
    function to_string(e){return caml_string_of_jsstring(e.toString())}
    function raise_js_error(e){return caml_call1(raise,e)}
    function string_of_error(e){return to_string(e)}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseFloat):s$0}
    function _a_(param)
     {if(param[1] === Error){var e=param[2];return [0,to_string(e)]}return 0}
    caml_call1(Stdlib_Printexc[9],_a_);
    function _b_(e)
     {return e instanceof array_length
              ?0
              :[0,caml_string_of_jsstring(e.toString())]}
    caml_call1(Stdlib_Printexc[9],_b_);
    function export_js(field,x){return jsoo_exports[field] = x}
    function export$0(field,x)
     {return export_js(caml_jsstring_of_string(field),x)}
    function export_all(obj)
     {var
       t27=object_keys(obj),
       t26=
        caml_js_wrap_callback
         (function(key,param,_gB_){return export_js(key,obj[key])});
      return t27.forEach(t26)}
    var _c_=runtime.caml_js_error_of_exception;
    function _d_(_gA_){return _gA_}
    var
     _e_=
      [0,
       to_string,
       name,
       message,
       stack,
       raise,
       attach_js_backtrace,
       of_exn,
       Error,
       function(_gz_){return _gz_},
       _d_];
    function _f_(_gy_){return _gy_}
    var
     Js_of_ocaml_Js=
      [0,
       no_handler,
       function(_gx_){return _gx_},
       t39,
       _f_,
       Opt,
       Optdef,
       t25,
       t4,
       string_constr,
       t11,
       t11,
       t11,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       t122,
       t122,
       t122,
       t122,
       t122,
       t122,
       t122,
       t122,
       t122,
       math,
       error_constr,
       _e_,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       attach_js_backtrace,
       _c_,
       Error];
    caml_register_global(1642,Js_of_ocaml_Js,"Js_of_ocaml__Js");
    function list_of_nodeList(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(caml_call2(symbol$5,i,length))
         {var _gw_=nodeList.item(i),match=caml_call1(Opt[10],_gw_);
          if(match)
           {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        return caml_call1(Stdlib_List[9],acc)}}
    var
     disconnected=1,
     preceding=2,
     following=4,
     contains$0=8,
     contained_by=16,
     implementation_specific=32;
    function has(t,mask){return caml_call2(symbol$8,t & mask,mask)}
    function add(x,y){return x | y}
    var
     DocumentPosition=
      [0,
       disconnected,
       preceding,
       following,
       contains$0,
       contained_by,
       implementation_specific,
       has,
       add,
       add];
    function appendChild(p,n){p.appendChild(n);return 0}
    function removeChild(p,n){p.removeChild(n);return 0}
    function replaceChild(p,n,o){p.replaceChild(n,o);return 0}
    function insertBefore(p,n,o){p.insertBefore(n,o);return 0}
    function nodeType(e)
     {var match=e.nodeType;
      if(match)
       switch(match - 1 | 0)
        {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}
      return [3,e]}
    function cast(e,t){return e.nodeType === t?e:no_handler}
    function element(e){return cast(e,1)}
    function text(e)
     {if(3 !== e.nodeType && 4 !== e.nodeType)return no_handler;return e}
    function attr(e){return cast(e,2)}
    function handler(f)
     {return function(e)
       {if(caml_call1(Opt[5],e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var t18=event,t17=caml_call1(f,t18);
        if(1 - (t17 | 0))t18.returnValue = t17;
        return t17}}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var t21=event,t20=caml_call2(f,this$0,t21);
                 if(1 - (t20 | 0))t21.returnValue = t20;
                 return t20})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _gt_(param)
       {function _gv_(param){throw Stdlib[8]}
        return caml_call2(Opt[8],e.srcElement,_gv_)}
      var t27=caml_call2(Opt[8],e.target,_gt_);
      if(t27 instanceof Unsafe[1].Node)
       {if(3 === t27.nodeType)
         {var _gu_=function(param){throw [0,Assert_failure,_g_]};
          return caml_call2(Opt[8],t27.parentNode,_gu_)}
        return t27}
      return t27}
    function make$0(s){return caml_jsstring_of_string(s)}
    var Event=[0,make$0];
    function addEventListenerWithOptions(t50,t47,capture,once,passive,t48)
     {if(t50.addEventListener === t39)
       {var
         t34="on".concat(t47),
         t35=
          function(e)
           {var _gq_=[0,t48,e,[0]];
            return function(_gr_,_gs_)
             {return runtime.caml_js_call(_gq_,_gr_,_gs_)}};
        t50.attachEvent(t34,t35);
        return function(param){return t50.detachEvent(t34,t35)}}
      var t49={};
      function iter(t,f){if(t){var b=t[1];return caml_call1(f,b)}return 0}
      iter(capture,function(t37){return t49.capture = t37});
      iter(once,function(t39){return t49.once = t39});
      iter(passive,function(t41){return t49.passive = t41});
      t50.addEventListener(t47,t48,t49);
      return function(param){return t50.removeEventListener(t47,t48,t49)}}
    function addEventListener(e,typ,h,capt)
     {return addEventListenerWithOptions(e,typ,[0,capt],0,0,h)}
    function removeEventListener(id){return caml_call1(id,0)}
    function preventDefault(t54)
     {if(caml_call1(Optdef[5],t54.preventDefault))return t54.preventDefault();
      var t53=! ! 0;
      return t54.returnValue = t53}
    function createCustomEvent(bubbles,cancelable,detail,t62)
     {function opt_iter(f,param)
       {if(param){var x=param[1];return caml_call1(f,x)}return 0}
      var t63={};
      opt_iter(function(x){var t55=! ! x;return t63.bubbles = t55},bubbles);
      opt_iter
       (function(x){var t57=! ! x;return t63.cancelable = t57},cancelable);
      opt_iter(function(t59){return t63.detail = t59},detail);
      var t64=Unsafe[1].CustomEvent;
      return new t64(t62,t63)}
    var
     Js_of_ocaml_Dom=
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0,element,text,attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
    caml_register_global(1645,Js_of_ocaml_Dom,"Js_of_ocaml__Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     t11$0=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set;
    function get$1(a,i){return a[i]}
    function unsafe_get(a,i){return a[i]}
    var dataView=Unsafe[1].DataView;
    function of_arrayBuffer(ab)
     {var uint8=new t11$0(ab);return caml_string_of_array(uint8)}
    var
     Js_of_ocaml_Typed_array=
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       runtime.caml_ba_to_typed_array,
       runtime.caml_ba_from_typed_array,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       t11$0,
       t11$0,
       t11$0,
       t11$0,
       t11$0,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get$1,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0,of_arrayBuffer,caml_string_of_array]];
    caml_register_global
     (1646,Js_of_ocaml_Typed_array,"Js_of_ocaml__Typed_array");
    var t3=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function blob_raw(contentType,endings,a)
     {var _gm_=0;
      if(endings)
       var _gn_=116179762 <= endings[1]?_h_:_i_,_go_=_gn_;
      else
       var _go_=0;
      var
       _gp_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_go_],_gm_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(v)
             {var v$0=v[1];return [0,[0,name,caml_jsstring_of_string(v$0)]]}
            return 0},
          _gp_),
       options$0=
        options
         ?runtime.caml_js_object(caml_call1(Stdlib_Array[12],options))
         :t39,
       t1=caml_js_from_array(a);
      return new t3(t1,options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,caml_jsstring_of_string(s)])}
    function blob_from_any(contentType,endings,l)
     {function _gk_(param)
       {var _gl_=param[1];
        if(155580615 === _gl_){var s=param[2];return s}
        if(486041214 <= _gl_)
         {if(1037850489 <= _gl_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _gl_)
         {var s$0=param[2];return caml_jsstring_of_string(s$0)}
        var b=param[2];
        return b}
      var l$0=caml_call2(Stdlib_List[19],_gk_,l);
      return blob_raw(contentType,endings,caml_call1(Stdlib_Array[12],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(match$0){var name$0=match$0[1];return name$0}
      return caml_call1(Stdlib[2],cst_can_t_retrieve_file_name_n)}
    var doc_constr=Unsafe[1].Document;
    function document(e){return e instanceof doc_constr?e:no_handler}
    function blob(e){return e instanceof t3?e:no_handler}
    function string(e){return typeof e === "string"?e:no_handler}
    function arrayBuffer$0(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(Event[1],cst_loadstart),
     progress=caml_call1(Event[1],cst_progress),
     abort=caml_call1(Event[1],cst_abort),
     error=caml_call1(Event[1],cst_error),
     load=caml_call1(Event[1],cst_load),
     loadend=caml_call1(Event[1],cst_loadend),
     ReaderEvent=[0,loadstart,progress,abort,error,load,loadend],
     fileReader=Unsafe[1].FileReader,
     Js_of_ocaml_File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,document,blob,function(_gj_){return _gj_},string,arrayBuffer$0],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
    caml_register_global(1648,Js_of_ocaml_File,"Js_of_ocaml__File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(Event[1],cst_click),
     copy$0=caml_call1(Event[1],cst_copy),
     cut=caml_call1(Event[1],cst_cut),
     paste=caml_call1(Event[1],cst_paste),
     dblclick=caml_call1(Event[1],cst_dblclick),
     mousedown=caml_call1(Event[1],cst_mousedown),
     mouseup=caml_call1(Event[1],cst_mouseup),
     mouseover=caml_call1(Event[1],cst_mouseover),
     mousemove=caml_call1(Event[1],cst_mousemove),
     mouseout=caml_call1(Event[1],cst_mouseout),
     keypress=caml_call1(Event[1],cst_keypress),
     keydown=caml_call1(Event[1],cst_keydown),
     keyup=caml_call1(Event[1],cst_keyup),
     mousewheel=caml_call1(Event[1],cst_mousewheel),
     DOMMouseScroll=caml_call1(Event[1],cst_DOMMouseScroll),
     touchstart=caml_call1(Event[1],cst_touchstart),
     touchmove=caml_call1(Event[1],cst_touchmove),
     touchend=caml_call1(Event[1],cst_touchend),
     touchcancel=caml_call1(Event[1],cst_touchcancel),
     dragstart=caml_call1(Event[1],cst_dragstart),
     dragend=caml_call1(Event[1],cst_dragend),
     dragenter=caml_call1(Event[1],cst_dragenter),
     dragover=caml_call1(Event[1],cst_dragover),
     dragleave=caml_call1(Event[1],cst_dragleave),
     drag=caml_call1(Event[1],cst_drag),
     drop=caml_call1(Event[1],cst_drop),
     hashchange=caml_call1(Event[1],cst_hashchange),
     change=caml_call1(Event[1],cst_change),
     input=caml_call1(Event[1],cst_input),
     timeupdate=caml_call1(Event[1],cst_timeupdate),
     submit=caml_call1(Event[1],cst_submit),
     scroll=caml_call1(Event[1],cst_scroll),
     focus=caml_call1(Event[1],cst_focus),
     blur=caml_call1(Event[1],cst_blur),
     load$0=caml_call1(Event[1],cst_load$0),
     unload=caml_call1(Event[1],cst_unload),
     beforeunload=caml_call1(Event[1],cst_beforeunload),
     resize=caml_call1(Event[1],cst_resize),
     orientationchange=caml_call1(Event[1],cst_orientationchange),
     popstate=caml_call1(Event[1],cst_popstate),
     error$0=caml_call1(Event[1],cst_error$0),
     abort$0=caml_call1(Event[1],cst_abort$0),
     select=caml_call1(Event[1],cst_select),
     online=caml_call1(Event[1],cst_online),
     offline=caml_call1(Event[1],cst_offline),
     checking=caml_call1(Event[1],cst_checking),
     noupdate=caml_call1(Event[1],cst_noupdate),
     downloading=caml_call1(Event[1],cst_downloading),
     progress$0=caml_call1(Event[1],cst_progress$0),
     updateready=caml_call1(Event[1],cst_updateready),
     cached=caml_call1(Event[1],cst_cached),
     obsolete=caml_call1(Event[1],cst_obsolete),
     domContentLoaded=caml_call1(Event[1],cst_DOMContentLoaded),
     animationstart=caml_call1(Event[1],cst_animationstart),
     animationend=caml_call1(Event[1],cst_animationend),
     animationiteration=caml_call1(Event[1],cst_animationiteration),
     animationcancel=caml_call1(Event[1],cst_animationcancel),
     canplay=caml_call1(Event[1],cst_canplay),
     canplaythrough=caml_call1(Event[1],cst_canplaythrough),
     durationchange=caml_call1(Event[1],cst_durationchange),
     emptied=caml_call1(Event[1],cst_emptied),
     ended=caml_call1(Event[1],cst_ended),
     gotpointercapture=caml_call1(Event[1],cst_gotpointercapture),
     loadeddata=caml_call1(Event[1],cst_loadeddata),
     loadedmetadata=caml_call1(Event[1],cst_loadedmetadata),
     loadstart$0=caml_call1(Event[1],cst_loadstart$0),
     lostpointercapture=caml_call1(Event[1],cst_lostpointercapture),
     message$0=caml_call1(Event[1],cst_message),
     pause=caml_call1(Event[1],cst_pause),
     play=caml_call1(Event[1],cst_play),
     playing=caml_call1(Event[1],cst_playing),
     pointerenter=caml_call1(Event[1],cst_pointerenter),
     pointercancel=caml_call1(Event[1],cst_pointercancel),
     pointerdown=caml_call1(Event[1],cst_pointerdown),
     pointerleave=caml_call1(Event[1],cst_pointerleave),
     pointermove=caml_call1(Event[1],cst_pointermove),
     pointerout=caml_call1(Event[1],cst_pointerout),
     pointerover=caml_call1(Event[1],cst_pointerover),
     pointerup=caml_call1(Event[1],cst_pointerup),
     ratechange=caml_call1(Event[1],cst_ratechange),
     seeked=caml_call1(Event[1],cst_seeked),
     seeking=caml_call1(Event[1],cst_seeking),
     stalled=caml_call1(Event[1],cst_stalled),
     suspend=caml_call1(Event[1],cst_suspend),
     volumechange=caml_call1(Event[1],cst_volumechange),
     waiting=caml_call1(Event[1],cst_waiting),
     make$1=Event[1],
     Event$0=
      [0,
       click,
       copy$0,
       cut,
       paste,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       gotpointercapture,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       lostpointercapture,
       message$0,
       pause,
       play,
       playing,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       make$1],
     d="2d";
    function location_origin(loc)
     {function _gh_(o){return o}
      function _gi_(param)
       {var t8=loc.protocol,t7=loc.hostname,t9=loc.port;
        if
         (caml_call2(symbol$8,t8.length,0)
          &&
          caml_call2(symbol$8,t7.length,0))
         return "";
        var t13=t8.concat("//",t7);
        if(caml_call2(symbol$9,t9.length,0))
         {var t12=loc.port;return t13.concat(":",t12)}
        return t13}
      return caml_call3(Optdef[7],loc.origin,_gi_,_gh_)}
    var _j_=Unsafe[1],t87=_j_.document;
    function getElementById(id)
     {function _ge_(pnode){return pnode}
      function _gf_(param){throw Stdlib[8]}
      var t15=caml_jsstring_of_string(id),_gg_=t87.getElementById(t15);
      return caml_call3(Opt[7],_gg_,_gf_,_ge_)}
    function getElementById_exn(id)
     {function _ga_(pnode){return pnode}
      function _gb_(param)
       {var _gd_=caml_call2(Stdlib_Printf[4],_k_,id);
        return caml_call1(Stdlib[2],_gd_)}
      var t17=caml_jsstring_of_string(id),_gc_=t87.getElementById(t17);
      return caml_call3(Opt[7],_gc_,_gb_,_ga_)}
    function getElementById_opt(id)
     {var t19=caml_jsstring_of_string(id),_f$_=t87.getElementById(t19);
      return caml_call1(Opt[10],_f$_)}
    function getElementById_coerce(id,coerce)
     {function _f7_(e)
       {var _f__=caml_call1(coerce,e);return caml_call1(Opt[10],_f__)}
      function _f8_(param){return 0}
      var t21=caml_jsstring_of_string(id),_f9_=t87.getElementById(t21);
      return caml_call3(Opt[7],_f9_,_f8_,_f7_)}
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(t24,name)
     {var t23=caml_jsstring_of_string(name);return t24.createElement(t23)}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type && 0 === name)return createElement(doc,elt);
        var _f1_=createElementSyntax[1];
        if(785140586 === _f1_)
         {try
           {var
             el=t87.createElement('<input name="x">'),
             _f4_=el.tagName.toLowerCase() === "input"?1:0,
             _f5_=_f4_?el.name === "x"?1:0:_f4_,
             _f2_=_f5_}
          catch(_f6_){var _f2_=0}
          var _f3_=_f2_?982028505:-1003883683;
          createElementSyntax[1] = _f3_;
          continue}
        if(982028505 <= _f1_)
         {var t40=new array_length();
          t40.push("<",caml_jsstring_of_string(elt));
          opt_iter
           (type,
            function(t)
             {var t34=caml_js_html_escape(t);
              t40.push(' type="',t34,'"');
              return 0});
          opt_iter
           (name,
            function(n)
             {var t38=caml_js_html_escape(n);
              t40.push(' name="',t38,'"');
              return 0});
          t40.push(">");
          return doc.createElement(t40.join(""))}
        var t28=createElement(doc,elt);
        opt_iter(type,function(t25){return t28.type = t25});
        opt_iter(name,function(t27){return t28.name = t27});
        return t28}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      [248,cst_Js_of_ocaml_Dom_html_Canva,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var t52=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],t52.getContext))throw Canvas_not_available;
      return t52}
    var
     html_element=Unsafe[1].HTMLElement,
     element$0=
      html_element === t39
       ?function(e){return e.innerHTML === t39?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function unsafeCoerce(tag,e)
     {var t56=e.tagName,_f0_=caml_jsstring_of_string(tag);
      return t56.toLowerCase() === _f0_?e:no_handler}
    function a(e){return unsafeCoerce(cst_a$0,e)}
    function area(e){return unsafeCoerce(cst_area$0,e)}
    function base(e){return unsafeCoerce(cst_base$0,e)}
    function blockquote(e){return unsafeCoerce(cst_blockquote$0,e)}
    function body(e){return unsafeCoerce(cst_body$0,e)}
    function br(e){return unsafeCoerce(cst_br$0,e)}
    function button(e){return unsafeCoerce(cst_button$0,e)}
    function canvas(e){return unsafeCoerce(cst_canvas$0,e)}
    function caption(e){return unsafeCoerce(cst_caption$0,e)}
    function col(e){return unsafeCoerce(cst_col$0,e)}
    function colgroup(e){return unsafeCoerce(cst_colgroup$0,e)}
    function del(e){return unsafeCoerce(cst_del$0,e)}
    function div(e){return unsafeCoerce(cst_div$0,e)}
    function dl(e){return unsafeCoerce(cst_dl$0,e)}
    function fieldset(e){return unsafeCoerce(cst_fieldset$0,e)}
    function embed(e){return unsafeCoerce(cst_embed$0,e)}
    function form(e){return unsafeCoerce(cst_form$0,e)}
    function frameset(e){return unsafeCoerce(cst_frameset$0,e)}
    function frame(e){return unsafeCoerce(cst_frame$0,e)}
    function h1(e){return unsafeCoerce(cst_h1$0,e)}
    function h2(e){return unsafeCoerce(cst_h2$0,e)}
    function h3(e){return unsafeCoerce(cst_h3$0,e)}
    function h4(e){return unsafeCoerce(cst_h4$0,e)}
    function h5(e){return unsafeCoerce(cst_h5$0,e)}
    function h6(e){return unsafeCoerce(cst_h6$0,e)}
    function head(e){return unsafeCoerce(cst_head$0,e)}
    function hr(e){return unsafeCoerce(cst_hr$0,e)}
    function html(e){return unsafeCoerce(cst_html$0,e)}
    function iframe(e){return unsafeCoerce(cst_iframe$0,e)}
    function img(e){return unsafeCoerce(cst_img$0,e)}
    function input$0(e){return unsafeCoerce(cst_input$1,e)}
    function ins(e){return unsafeCoerce(cst_ins$0,e)}
    function label(e){return unsafeCoerce(cst_label$0,e)}
    function legend(e){return unsafeCoerce(cst_legend$0,e)}
    function li(e){return unsafeCoerce(cst_li$0,e)}
    function link(e){return unsafeCoerce(cst_link$0,e)}
    function map$2(e){return unsafeCoerce(cst_map$0,e)}
    function meta(e){return unsafeCoerce(cst_meta$0,e)}
    function object(e){return unsafeCoerce(cst_object$0,e)}
    function ol(e){return unsafeCoerce(cst_ol$0,e)}
    function optgroup(e){return unsafeCoerce(cst_optgroup$0,e)}
    function option$1(e){return unsafeCoerce(cst_option$0,e)}
    function p(e){return unsafeCoerce(cst_p$0,e)}
    function param(e){return unsafeCoerce(cst_param$0,e)}
    function pre(e){return unsafeCoerce(cst_pre$0,e)}
    function q(e){return unsafeCoerce(cst_q$0,e)}
    function script(e){return unsafeCoerce(cst_script$0,e)}
    function select$0(e){return unsafeCoerce(cst_select$1,e)}
    function style(e){return unsafeCoerce(cst_style$0,e)}
    function table(e){return unsafeCoerce(cst_table$0,e)}
    function tbody(e){return unsafeCoerce(cst_tbody$0,e)}
    function td(e){return unsafeCoerce(cst_td$0,e)}
    function textarea(e){return unsafeCoerce(cst_textarea$0,e)}
    function tfoot(e){return unsafeCoerce(cst_tfoot$0,e)}
    function th(e){return unsafeCoerce(cst_th$0,e)}
    function thead(e){return unsafeCoerce(cst_thead$0,e)}
    function title(e){return unsafeCoerce(cst_title$0,e)}
    function tr(e){return unsafeCoerce(cst_tr$0,e)}
    function ul(e){return unsafeCoerce(cst_ul$0,e)}
    function audio(e){return unsafeCoerce(cst_audio$0,e)}
    function video(e){return unsafeCoerce(cst_video$0,e)}
    function unsafeCoerceEvent(constr,ev)
     {if(constr !== t39 && ev instanceof constr)return ev;return no_handler}
    function mouseEvent(ev){return unsafeCoerceEvent(Unsafe[1].MouseEvent,ev)}
    function keyboardEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].KeyboardEvent,ev)}
    function wheelEvent(ev){return unsafeCoerceEvent(Unsafe[1].WheelEvent,ev)}
    function mouseScrollEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MouseScrollEvent,ev)}
    function popStateEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].PopStateEvent,ev)}
    function messageEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MessageEvent,ev)}
    function eventRelatedTarget(e)
     {function _fX_(param)
       {var match=caml_string_of_jsstring(e.type);
        if(caml_string_notequal(match,cst_mouseout$0))
         {if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
          var _fY_=function(param){throw [0,Assert_failure,_l_]};
          return caml_call2(Optdef[8],e.fromElement,_fY_)}
        function _fZ_(param){throw [0,Assert_failure,_m_]}
        return caml_call2(Optdef[8],e.toElement,_fZ_)}
      return caml_call2(Optdef[8],e.relatedTarget,_fX_)}
    function eventAbsolutePosition(e)
     {var t70=t87.body,t71=t87.documentElement;
      return [0,
              (e.clientX + t70.scrollLeft | 0) + t71.scrollLeft | 0,
              (e.clientY + t70.scrollTop | 0) + t71.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _fT_(x)
       {function _fV_(y){return [0,x,y]}
        function _fW_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_fW_,_fV_)}
      function _fU_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_fU_,_fT_)}
    function elementClientPosition(e)
     {var t80=e.getBoundingClientRect(),t81=t87.body,t82=t87.documentElement;
      return [0,
              ((t80.left | 0) - t81.clientLeft | 0) - t82.clientLeft | 0,
              ((t80.top | 0) - t81.clientTop | 0) - t82.clientTop | 0]}
    function getDocumentScroll(param)
     {var t88=t87.body,t89=t87.documentElement;
      return [0,
              t88.scrollLeft + t89.scrollLeft | 0,
              t88.scrollTop + t89.scrollTop | 0]}
    function buttonPressed(ev)
     {function _fR_(x){return x}
      function _fS_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(! (3 < switcher >>> 0))
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_fS_,_fR_)}
    function addMousewheelEventListenerWith(e,capture,once,passive,h)
     {var t96=createDiv(t87);
      t96.setAttribute("onmousewheel","return;");
      if(typeof t96.onmousewheel === "function")
       {var
         _fN_=
          handler
           (function(e)
             {function _fP_(param){return 0}
              var
               dx=
                (- caml_call2(Optdef[8],e.wheelDeltaX,_fP_) | 0) / 40 | 0;
              function _fQ_(param){return e.wheelDelta}
              var
               dy=
                (- caml_call2(Optdef[8],e.wheelDeltaY,_fQ_) | 0) / 40 | 0;
              return caml_call3(h,e,dx,dy)});
        return addEventListenerWithOptions
                (e,Event$0[14],capture,once,passive,_fN_)}
      var
       _fO_=
        handler
         (function(e)
           {var d=e.detail;
            return e.axis === e.HORIZONTAL
                    ?caml_call3(h,e,d,0)
                    :caml_call3(h,e,0,d)});
      return addEventListenerWithOptions
              (e,Event$0[15],capture,once,passive,_fO_)}
    function addMousewheelEventListener(e,h,capt)
     {return addMousewheelEventListenerWith(e,[0,capt],0,0,h)}
    function f(v)
     {var
       match=caml_string_of_jsstring(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function try_key_code_left(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        switch(param - 16 | 0)
         {case 0:return 90;case 1:return 86;default:return 92}
      return 0}
    function try_key_code_right(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        switch(param - 16 | 0)
         {case 0:return 91;case 1:return 87;default:return 93}
      return 0}
    function try_key_code_numpad(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(! (15 < switcher >>> 0))
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        switch(param - 12 | 0)
         {case 0:return 73;
          case 1:return 83;
          case 21:return 77;
          case 22:return 71;
          case 23:return 69;
          case 24:return 75;
          case 25:return 72;
          case 26:return 76;
          case 27:return 74;
          case 28:return 70;
          case 33:return 68;
          case 34:return 81
          }
      return 0}
    function try_key_code_normal(param)
     {var switcher=param - 8 | 0;
      if(! (214 < switcher >>> 0))
       {var _fM_=switcher;
        if(67 <= _fM_)
         switch(_fM_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_fM_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function make_unidentified(param){return 0}
    function run_next(value,f,v){return v?v:caml_call1(f,value)}
    function symbol$11(x,f){return caml_call1(f,x)}
    function of_event(evt)
     {var _fF_=evt.keyCode;
      function _fG_(_fL_){return run_next(_fF_,try_key_code_normal,_fL_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _fH_=make_unidentified;
      else
       switch(switcher)
        {case 0:
          var
           _fC_=evt.keyCode,
           _fH_=function(_fJ_){return run_next(_fC_,try_key_code_left,_fJ_)};
          break;
         case 1:
          var
           _fD_=evt.keyCode,
           _fH_=function(_fI_){return run_next(_fD_,try_key_code_right,_fI_)};
          break;
         default:
          var
           _fE_=evt.keyCode,
           _fH_=function(_fK_){return run_next(_fE_,try_key_code_numpad,_fK_)}}
      var value=evt.code;
      return symbol$11
              (symbol$11
                (symbol$11
                  (0,
                   function(v)
                    {return v?v:caml_call3(Optdef[7],value,make_unidentified,f)}),
                 _fH_),
               _fG_)}
    function char_of_int(value)
     {if(caml_call2(symbol$5,0,value))
       try
        {var _fA_=[0,caml_call1(Stdlib_Uchar[8],value)];return _fA_}
       catch(_fB_){return 0}
      return 0}
    function empty_string(param){return ""}
    function none(param){return 0}
    function of_event$0(evt)
     {var t110=caml_call2(Optdef[8],evt.key,empty_string),match=t110.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,none,char_of_int)
              :1 === match?char_of_int(t110.charCodeAt(0) | 0):0}
    function element$1(_fz_){return _fz_}
    function tagged(e)
     {var t112=e.tagName,tag=caml_string_of_jsbytes(t112.toLowerCase());
      if(caml_call2(symbol$8,caml_ml_string_length(tag),0))return [61,e];
      var match=runtime.caml_string_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _fx_(e){return [0,tagged(e)]}
      function _fy_(param){return 0}
      return caml_call3(Opt[7],e,_fy_,_fx_)}
    function taggedEvent(ev)
     {function _ff_(ev){return [0,ev]}
      function _fg_(param)
       {function _fi_(ev){return [1,ev]}
        function _fj_(param)
         {function _fl_(ev){return [3,ev]}
          function _fm_(param)
           {function _fo_(ev){return [4,ev]}
            function _fp_(param)
             {function _fr_(ev){return [5,ev]}
              function _fs_(param)
               {function _fu_(ev){return [2,ev]}
                function _fv_(param){return [6,ev]}
                var _fw_=messageEvent(ev);
                return caml_call3(Opt[7],_fw_,_fv_,_fu_)}
              var _ft_=popStateEvent(ev);
              return caml_call3(Opt[7],_ft_,_fs_,_fr_)}
            var _fq_=mouseScrollEvent(ev);
            return caml_call3(Opt[7],_fq_,_fp_,_fo_)}
          var _fn_=wheelEvent(ev);
          return caml_call3(Opt[7],_fn_,_fm_,_fl_)}
        var _fk_=keyboardEvent(ev);
        return caml_call3(Opt[7],_fk_,_fj_,_fi_)}
      var _fh_=mouseEvent(ev);
      return caml_call3(Opt[7],_fh_,_fg_,_ff_)}
    function opt_taggedEvent(ev)
     {function _fd_(ev){return [0,taggedEvent(ev)]}
      function _fe_(param){return 0}
      return caml_call3(Opt[7],ev,_fe_,_fd_)}
    function stopPropagation(ev)
     {function _fb_(param){return ev.stopPropagation()}
      function _fc_(param){return ev.cancelBubble = t25}
      return caml_call3(Optdef[7],ev.stopPropagation,_fc_,_fb_)}
    var
     requestAnimationFrame=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _j_.requestAnimationFrame,
             [0,
              _j_.mozRequestAnimationFrame,
              [0,
               _j_.webkitRequestAnimationFrame,
               [0,
                _j_.oRequestAnimationFrame,
                [0,_j_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _e__=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(Stdlib_List[38],_e__,l),
             _e$_=function(callback){return req(callback)};
            return _e$_}
          catch(_fa_)
           {_fa_ = caml_wrap_exception(_fa_);
            if(_fa_ === Stdlib[8])
             {var
               now=function(param){var t123=new t122();return t123.getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0.?0.:dt;
                last[1] = t;
                _j_.setTimeout(callback,dt$0);
                return 0}}
            throw _fa_}});
    function hasPushState(param)
     {var t128=_j_.history;return caml_call1(Optdef[5],t128.pushState)}
    function hasPlaceholder(param)
     {var t129=createInput(0,0,t87);
      return caml_call1(Optdef[5],t129.placeholder)}
    function hasRequired(param)
     {var t130=createInput(0,0,t87);
      return caml_call1(Optdef[5],t130.required)}
    var overflow_limit=2147483000.;
    function setTimeout(callback,d)
     {var id=[0,0];
      function loop(step,param)
       {if(2147483000. < step)
         var remain=step - 2147483000.,step$0=overflow_limit;
        else
         var remain=0.,step$0=step;
        var
         cb=remain == 0.?callback:function(_e9_){return loop(remain,_e9_)},
         t131=caml_js_wrap_callback(cb);
        id[1] = [0,_j_.setTimeout(t131,step$0)];
        return 0}
      loop(d,0);
      return id}
    function clearTimeout(id)
     {var _e8_=id[1];
      if(_e8_){var x=_e8_[1];id[1] = 0;return _j_.clearTimeout(x)}
      return 0}
    function js_array_of_collection(c){return [].slice.call(c)}
    var
     Js_of_ocaml_Dom_html=
      [0,
       d,
       t87,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _j_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       Event$0,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,of_event,try_key_code_normal],
       [0,of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$1,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element$0,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map$2,
        meta,
        object,
        ol,
        optgroup,
        option$1,
        p,
        param,
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent,
        messageEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
    caml_register_global(1651,Js_of_ocaml_Dom_html,"Js_of_ocaml__Dom_html");
    var formData=Unsafe[1].FormData,formData_form=Unsafe[1].FormData;
    function filter_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map$0(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function have_content(elt)
     {var
       t3=elt.name,
       _e6_=caml_call2(symbol$9,t3.length,0),
       _e7_=_e6_?1 - (elt.disabled | 0):_e6_;
      return _e7_}
    function form_elements(get,form)
     {var t34=form.elements,i$2=t34.length - 1 | 0,acc=0,i=i$2;
      for(;;)
       {if(caml_call2(symbol$5,i,0))
         {var
           _eX_=
            function(v$2)
             {var match$3=tagged(v$2);
              switch(match$3[0])
               {case 31:
                 var v=match$3[1];
                 if(get)var sth=get[1],get$0=sth;else var get$0=0;
                 if(have_content(v))
                  {var
                    name$1=caml_string_of_jsstring(v.name),
                    value=v.value,
                    t20=v.type,
                    match=caml_string_of_jsbytes(t20.toLowerCase());
                   if(caml_string_notequal(match,cst_checkbox))
                    {if(! caml_string_notequal(match,cst_file))
                      {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                       var match$0=caml_call1(Optdef[10],v.files);
                       if(match$0)
                        {var list=match$0[1];
                         if(caml_call2(symbol$8,list.length,0))
                          return [0,[0,name$1,[0,-976970511,""]],0];
                         var match$1=caml_call1(Optdef[10],v.multiple);
                         if(match$1 && match$1[1])
                          {var
                            _e1_=function(t28){return list.item(t28)},
                            _e2_=caml_call2(Stdlib_Array[2],list.length,_e1_),
                            _e3_=caml_call1(Stdlib_Array[11],_e2_);
                           return filter_map$0
                                   (function(f)
                                     {var match=caml_call1(Opt[10],f);
                                      if(match)
                                       {var file=match[1];return [0,[0,name$1,[0,781515420,file]]]}
                                      return 0},
                                    _e3_)}
                         var _e4_=list.item(0),match$2=caml_call1(Opt[10],_e4_);
                         if(match$2)
                          {var file=match$2[1];
                           return [0,[0,name$1,[0,781515420,file]],0]}
                         return 0}
                       return 0}
                     var switch$0=0;
                     if(caml_string_notequal(match,cst_password))
                      {if(caml_string_notequal(match,cst_radio))
                        {var switch$1=0;
                         if
                          (caml_string_notequal(match,cst_reset)
                           &&
                           caml_string_notequal(match,cst_submit$0))
                          {if(caml_string_notequal(match,cst_text))
                            return [0,[0,name$1,[0,-976970511,value]],0];
                           switch$0 = 1;
                           switch$1 = 1}
                         if(! switch$1)return 0}}
                     else
                      switch$0 = 1;
                     if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
                   return v.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0}
                 return 0;
                case 48:
                 var v$0=match$3[1];
                 if(have_content(v$0))
                  {var name$0=caml_string_of_jsstring(v$0.name);
                   if(v$0.multiple | 0)
                    {var
                      _eZ_=
                       function(i)
                        {var t13=v$0.options,_e5_=t13.item(i);
                         return caml_call1(Opt[10],_e5_)},
                      t10=v$0.options,
                      options=caml_call2(Stdlib_Array[2],t10.length,_eZ_),
                      _e0_=caml_call1(Stdlib_Array[11],options);
                     return filter_map$0
                             (function(param)
                               {if(param)
                                 {var e=param[1];
                                  return e.selected | 0
                                          ?[0,[0,name$0,[0,-976970511,e.value]]]
                                          :0}
                                return 0},
                              _e0_)}
                   return [0,[0,name$0,[0,-976970511,v$0.value]],0]}
                 return 0;
                case 53:
                 var v$1=match$3[1];
                 if(have_content(v$1))
                  {var name=caml_string_of_jsstring(v$1.name);
                   return [0,[0,name,[0,-976970511,v$1.value]],0]}
                 return 0;
                default:return 0}},
           _eY_=caml_call2(Stdlib_List[19],_eX_,acc);
          return caml_call1(Stdlib_List[14],_eY_)}
        var t32=form.elements,_eW_=t32.item(i),match=caml_call1(Opt[10],_eW_);
        if(match)
         {var x=match[1],i$0=i - 1 | 0,acc$0=[0,x,acc],acc=acc$0,i=i$0;
          continue}
        var i$1=i - i | 0,i=i$1;
        continue}}
    function append(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_eU_=form_elt[2],_eV_=form_elt[1];
      if(781515420 <= _eU_[1])
       {var file=_eU_[2],t38=caml_jsstring_of_string(_eV_);
        return f.append(t38,file)}
      var s=_eU_[2],t35=caml_jsstring_of_string(_eV_);
      return f.append(t35,s)}
    function empty_form_contents(param)
     {var match=caml_call1(Optdef[10],formData);
      if(match){var constr=match[1];return [0,808620462,new constr()]}
      return [0,891486873,[0,0]]}
    function post_form_contents(form)
     {var contents=empty_form_contents(0),_eR_=form_elements(0,form);
      function _eS_(_eT_){return append(contents,_eT_)}
      caml_call2(Stdlib_List[17],_eS_,_eR_);
      return contents}
    function get_form_contents(form)
     {var _eO_=form_elements(_n_,form);
      function _eP_(param)
       {var _eQ_=param[2];
        if(typeof _eQ_ !== "number" && -976970511 === _eQ_[1])
         {var s=_eQ_[2],name=param[1];
          return [0,name,caml_string_of_jsstring(s)]}
        throw [0,Assert_failure,_o_]}
      return caml_call2(Stdlib_List[19],_eP_,_eO_)}
    var
     Js_of_ocaml_Form=
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
    caml_register_global(1652,Js_of_ocaml_Form,"Js_of_ocaml__Form");
    var
     readystatechange=caml_call1(Event[1],cst_readystatechange),
     loadstart$1=caml_call1(Event[1],cst_loadstart$1),
     progress$1=caml_call1(Event[1],cst_progress$1),
     abort$1=caml_call1(Event[1],cst_abort$1),
     error$1=caml_call1(Event[1],cst_error$1),
     load$1=caml_call1(Event[1],cst_load$1),
     timeout=caml_call1(Event[1],cst_timeout),
     loadend$0=caml_call1(Event[1],cst_loadend$0),
     Event$1=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       loadend$0],
     Js_of_ocaml_XmlHttpRequest=[0,runtime.caml_xmlhttprequest_create,Event$1];
    caml_register_global
     (1653,Js_of_ocaml_XmlHttpRequest,"Js_of_ocaml__XmlHttpRequest");
    var t2=Unsafe[1].Worker;
    function create(script)
     {var t1=caml_jsstring_of_string(script);return new t2(t1)}
    function import_scripts(scripts)
     {if(Unsafe[1].importScripts === t39)
       caml_call1(Stdlib[1],cst_Worker_import_scripts_is_u);
      var _eL_=caml_call1(Stdlib_Array[12],scripts);
      function _eM_(s){return caml_jsstring_of_string(s)}
      var _eN_=caml_call2(Stdlib_Array[15],_eM_,_eL_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_eN_)}
    function set_onmessage(handler)
     {if(Unsafe[1].onmessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      var t7=caml_js_wrap_callback(js_handler);
      return Unsafe[1].onmessage = t7}
    function post_message(t10)
     {if(Unsafe[1].postMessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi$0);
      return Unsafe[1].postMessage(t10)}
    var
     Js_of_ocaml_Worker=
      [0,create,import_scripts,set_onmessage,post_message];
    caml_register_global(1654,Js_of_ocaml_Worker,"Js_of_ocaml__Worker");
    var webSocket=Unsafe[1].WebSocket;
    function is_supported(param){return caml_call1(Optdef[5],webSocket)}
    var Js_of_ocaml_WebSockets=[0,webSocket,webSocket,webSocket,is_supported];
    caml_register_global
     (1655,Js_of_ocaml_WebSockets,"Js_of_ocaml__WebSockets");
    var
     defaultContextAttributes=
      {"alpha":t25,
       "depth":t25,
       "stencil":t4,
       "antialias":t25,
       "premultipliedAlpha":t4,
       "preserveDrawingBuffer":t4,
       "preferLowPowerToHighPerformance":t4,
       "failIfMajorPerformanceCaveat":t4},
     webglcontextlost=caml_call1(Event$0[87],cst_webglcontextlost),
     webglcontextrestored=caml_call1(Event$0[87],cst_webglcontextrestored),
     webglcontextcreationerror=
      caml_call1(Event$0[87],cst_webglcontextcreationerror),
     Event$2=
      [0,webglcontextlost,webglcontextrestored,webglcontextcreationerror];
    function getContext(t3)
     {var ctx=t3.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:t3.getContext("experimental-webgl")}
    function getContextWithAttributes(t9,t8)
     {var ctx=t9.getContext("webgl",t8);
      return caml_call1(Opt[5],ctx)?ctx:t9.getContext("experimental-webgl",t8)}
    var
     Js_of_ocaml_WebGL=
      [0,defaultContextAttributes,Event$2,getContext,getContextWithAttributes];
    caml_register_global(1656,Js_of_ocaml_WebGL,"Js_of_ocaml__WebGL");
    function regexp(s)
     {var t0=caml_jsbytes_of_string(s);return new t11(t0,"g")}
    function regexp_case_fold(s)
     {var t3=caml_jsbytes_of_string(s);return new t11(t3,"gi")}
    function regexp_with_flag(s,f)
     {var
       t7=caml_jsstring_of_string(caml_call2(Stdlib[28],cst_g,f)),
       t6=caml_jsbytes_of_string(s);
      return new t11(t6,t7)}
    function blunt_str_array_get(a,i)
     {function _eK_(param){throw [0,Assert_failure,_p_]}
      return caml_string_of_jsbytes(caml_call2(Optdef[8],a[i],_eK_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       t11=caml_jsbytes_of_string(s),
       _eI_=r.exec(t11),
       _eJ_=caml_call2(Opt[3],_eI_,match_result);
      return caml_call1(Opt[10],_eJ_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      var t15=caml_jsbytes_of_string(s);
      function _eF_(t17){return [0,t17.index,t17]}
      var _eG_=r.exec(t15),_eH_=caml_call2(Opt[3],_eG_,_eF_);
      return caml_call1(Opt[10],_eH_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _eE_=caml_call2(Optdef[3],r[i],caml_string_of_jsbytes);
      return caml_call1(Optdef[10],_eE_)}
    var t21=new t11("[$]","g");
    function quote_repl(s)
     {var t23=caml_jsbytes_of_string(s);return t23.replace(t21,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      var t27=quote_repl(s_by),t28=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t28.replace(r,t27))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=match?match$0?"mi":"i":match$0?"m":"",
       t32=r.source,
       t35=new t11(t32,flags),
       t36=quote_repl(s_by),
       t37=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t37.replace(t35,t36))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(caml_call2(symbol$5,idx,0))return accu;
        var
         idx$0=idx - 1 | 0,
         accu$0=[0,blunt_str_array_get(a,idx),accu],
         accu=accu$0,
         idx=idx$0;
        continue}}
    function split(r,s)
     {r.lastIndex = 0;
      var t42=caml_jsbytes_of_string(s);
      return list_of_js_array(t42.split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      var t47=caml_jsbytes_of_string(s);
      return list_of_js_array(t47.split(r,i))}
    var t48=regexp(cst);
    function quote(s)
     {var t50=caml_jsbytes_of_string(s);
      return caml_string_of_jsbytes(t50.replace(t48,"\\$&"))}
    function regexp_string(s){return regexp(quote(s))}
    function regexp_string_case_fold(s){return regexp_case_fold(quote(s))}
    var
     Js_of_ocaml_Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1657,Js_of_ocaml_Regexp,"Js_of_ocaml__Regexp");
    var Local_exn=[248,cst_Js_of_ocaml_Url_Local_exn,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var plus_re=regexp_string(cst$0),t14=new t11("\\+","g");
    function urldecode_js_string_string(s)
     {t14.lastIndex = 0;
      return caml_string_of_jsbytes(unescape(s.replace(t14," ")))}
    function urldecode(s)
     {return caml_string_of_jsbytes
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(with_plus)
       {var s$0=caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)));
        return global_replace(plus_re,s$0,cst_2B)}
      return caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)))}
    var
     Not_an_http_protocol=
      [248,cst_Js_of_ocaml_Url_Not_an_htt,caml_fresh_oo_id(0)],
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _eC_=caml_call3(String[30],s,i,47),j=_eC_}
        catch(_eD_)
         {_eD_ = caml_wrap_exception(_eD_);
          if(_eD_ !== Stdlib[8])throw _eD_;
          var j=l}
        var word=caml_call3(String[14],s,i,j - i | 0);
        return caml_call2(symbol$10,j,l)?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a && ! caml_string_notequal(a[1],cst$2))
       {var _eB_=a[2];
        if(! _eB_)return 0;
        if(! caml_string_notequal(_eB_[1],cst$3) && ! _eB_[2])return _q_}
      return a}
    function encode_arguments(l)
     {function _ew_(param)
       {var
         v=param[2],
         n=param[1],
         _ey_=urlencode(0,v),
         _ez_=caml_call2(Stdlib[28],cst$4,_ey_),
         _eA_=urlencode(0,n);
        return caml_call2(Stdlib[28],_eA_,_ez_)}
      var _ex_=caml_call2(Stdlib_List[19],_ew_,l);
      return caml_call2(String[6],cst$5,_ex_)}
    function decode_arguments_js_string(s)
     {var
       t0=caml_jsstring_of_string(caml_call2(String[1],1,38)),
       t18=s.split(t0),
       len=t18.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(caml_call2(symbol$5,idx$0,0))return acc;
          try
           {var
             _eo_=idx$0 - 1 | 0,
             _ep_=
              function(s)
               {function _eu_(param)
                 {var
                   y=param[2],
                   x=param[1],
                   _ev_=urldecode_js_string_string(y);
                  return [0,urldecode_js_string_string(x),_ev_]}
                var
                 t2=caml_jsstring_of_string(caml_call2(String[1],1,61)),
                 t5=s.indexOf(t2);
                if(caml_call2(symbol$5,t5,0))
                 var _et_=t39;
                else
                 var
                  t7=t5 + 1 | 0,
                  _es_=s.slice(t7),
                  _et_=[0,s.slice(0,t5),_es_];
                return caml_call3(Optdef[7],_et_,interrupt,_eu_)},
             _eq_=
              aux
               ([0,caml_call3(Optdef[7],t18[idx$0],interrupt,_ep_),acc],_eo_);
            return _eq_}
          catch(_er_)
           {_er_ = caml_wrap_exception(_er_);
            if(_er_ === Local_exn)
             {var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
            throw _er_}}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     t19=caml_jsbytes_of_string(cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0),
     t24=new t11(t19),
     t21$0=caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee),
     t26=new t11(t21$0);
    function url_of_js_string(s)
     {function _d7_(res)
       {var
         prot_string=caml_call2(Optdef[8],res[1],interrupt),
         match=caml_string_of_jsbytes(prot_string.toLowerCase());
        if
         (caml_string_notequal(match,cst_file$0)
          &&
          caml_string_notequal(match,cst_file$1))
         {var switch$0=0;
          if
           (caml_string_notequal(match,cst_http)
            &&
            caml_string_notequal(match,cst_http$0))
           {var switch$1=0;
            if
             (caml_string_notequal(match,cst_https)
              &&
              caml_string_notequal(match,cst_https$0))
             switch$1 = 1;
            if(! switch$1){var ssl=1;switch$0 = 2}}
          else
           switch$0 = 1;
          var switch$2=0;
          switch(switch$0)
           {case 1:var ssl=0;switch$2 = 1;break;
            case 0:break;
            default:switch$2 = 1}
          if(switch$2)
           {var
             _ef_=function(param){return caml_jsbytes_of_string(cst$7)},
             path_str=
              urldecode_js_string_string(caml_call2(Optdef[8],res[6],_ef_)),
             _eg_=function(param){return caml_jsbytes_of_string(cst$8)},
             _eh_=
              urldecode_js_string_string(caml_call2(Optdef[8],res[10],_eg_)),
             _ei_=function(param){return caml_jsbytes_of_string(cst$9)},
             _ej_=
              decode_arguments_js_string(caml_call2(Optdef[8],res[8],_ei_)),
             _ek_=path_of_path_string(path_str),
             _el_=function(param){return caml_jsbytes_of_string(cst$10)},
             s=caml_string_of_jsbytes(caml_call2(Optdef[8],res[4],_el_)),
             _em_=
              caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
             url=
              [0,
               urldecode_js_string_string
                (caml_call2(Optdef[8],res[2],interrupt)),
               _em_,
               _ek_,
               path_str,
               _ej_,
               _eh_],
             _en_=ssl?[1,url]:[0,url];
            return [0,_en_]}}
        throw Not_an_http_protocol}
      function _d8_(param)
       {function _d__(res)
         {var
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],res[2],interrupt));
          function _eb_(param){return caml_jsbytes_of_string(cst$11)}
          var _ec_=caml_string_of_jsbytes(caml_call2(Optdef[8],res[6],_eb_));
          function _ed_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _ee_=
            decode_arguments_js_string(caml_call2(Optdef[8],res[4],_ed_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_ee_,_ec_]]]}
        function _d$_(param){return 0}
        var _ea_=t26.exec(s);
        return caml_call3(Opt[7],_ea_,_d$_,_d__)}
      var _d9_=t24.exec(s);
      return caml_call3(Opt[7],_d9_,_d8_,_d7_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var _du_=urlencode(0,frag),_dv_=caml_call2(Stdlib[28],cst$14,_du_);
         else
          var _dv_=cst$21;
         if(args)
          var
           _dw_=encode_arguments(args),
           _dx_=caml_call2(Stdlib[28],cst$15,_dw_);
         else
          var _dx_=cst$20;
         var
          _dy_=caml_call2(Stdlib[28],_dx_,_dv_),
          _dz_=function(x){return urlencode(0,x)},
          _dA_=caml_call2(Stdlib_List[19],_dz_,path),
          _dB_=caml_call2(String[6],cst$16,_dA_),
          _dC_=caml_call2(Stdlib[28],_dB_,_dy_),
          _dD_=caml_call2(Stdlib[28],cst$17,_dC_);
         if(80 === port)
          var _dE_=cst$18;
         else
          var
           _dI_=caml_call1(Stdlib[33],port),
           _dE_=caml_call2(Stdlib[28],cst$19,_dI_);
         var
          _dF_=caml_call2(Stdlib[28],_dE_,_dD_),
          _dG_=urlencode(0,host),
          _dH_=caml_call2(Stdlib[28],_dG_,_dF_);
         return caml_call2(Stdlib[28],cst_http$1,_dH_);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _dJ_=urlencode(0,frag$0),
           _dK_=caml_call2(Stdlib[28],cst$23,_dJ_);
         else
          var _dK_=cst$30;
         if(args$0)
          var
           _dL_=encode_arguments(args$0),
           _dM_=caml_call2(Stdlib[28],cst$24,_dL_);
         else
          var _dM_=cst$29;
         var
          _dN_=caml_call2(Stdlib[28],_dM_,_dK_),
          _dO_=function(x){return urlencode(0,x)},
          _dP_=caml_call2(Stdlib_List[19],_dO_,path$0),
          _dQ_=caml_call2(String[6],cst$25,_dP_),
          _dR_=caml_call2(Stdlib[28],_dQ_,_dN_),
          _dS_=caml_call2(Stdlib[28],cst$26,_dR_);
         if(443 === port$0)
          var _dT_=cst$27;
         else
          var
           _dX_=caml_call1(Stdlib[33],port$0),
           _dT_=caml_call2(Stdlib[28],cst$28,_dX_);
         var
          _dU_=caml_call2(Stdlib[28],_dT_,_dS_),
          _dV_=urlencode(0,host$0),
          _dW_=caml_call2(Stdlib[28],_dV_,_dU_);
         return caml_call2(Stdlib[28],cst_https$1,_dW_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _dY_=urlencode(0,frag$1),
           _dZ_=caml_call2(Stdlib[28],cst$32,_dY_);
         else
          var _dZ_=cst$36;
         if(args$1)
          var
           _d0_=encode_arguments(args$1),
           _d1_=caml_call2(Stdlib[28],cst$33,_d0_);
         else
          var _d1_=cst$35;
         var
          _d2_=caml_call2(Stdlib[28],_d1_,_dZ_),
          _d3_=function(x){return urlencode(0,x)},
          _d4_=caml_call2(Stdlib_List[19],_d3_,path$1),
          _d5_=caml_call2(String[6],cst$34,_d4_),
          _d6_=caml_call2(Stdlib[28],_d5_,_d2_);
         return caml_call2(Stdlib[28],cst_file$2,_d6_)}}
    var _r_=caml_call1(Optdef[2],_j_.location);
    if(caml_call1(Optdef[5],_r_))
     var _s_=_j_.location;
    else
     var
      t42=function(param,_dt_){return 0},
      t41$0=function(param,_ds_){return 0},
      t40=function(param){return 0},
      _s_=
       {"href":"",
        "protocol":"",
        "host":"",
        "hostname":"",
        "port":"",
        "pathname":"",
        "search":"",
        "hash":"",
        "origin":t39,
        "reload":caml_js_wrap_meth_callback(t40),
        "replace":caml_js_wrap_meth_callback(t41$0),
        "assign":caml_js_wrap_meth_callback(t42)};
    var
     host=urldecode_js_string_string(_s_.hostname),
     protocol=urldecode_js_string_string(_s_.protocol),
     _t_=0,
     port=
      function(param)
        {try
          {var _dq_=[0,caml_int_of_string(caml_string_of_jsbytes(_s_.port))];
           return _dq_}
         catch(_dr_)
          {_dr_ = caml_wrap_exception(_dr_);
           if(_dr_[1] === Stdlib[7])return 0;
           throw _dr_}}
       (_t_),
     path_string=urldecode_js_string_string(_s_.pathname),
     path=path_of_path_string(path_string),
     t49=_s_.search;
    if(t49.charAt(0) === "?")
     var t52=_s_.search,_u_=t52.slice(1);
    else
     var _u_=_s_.search;
    var arguments$0=decode_arguments_js_string(_u_);
    function get_fragment(param)
     {function _dn_(res){return caml_string_of_jsstring(res[1])}
      function _do_(param){return cst$37}
      var t57=new t11("#(.*)"),t58=_s_.href,_dp_=t58.match(t57);
      return caml_call3(Opt[7],_dp_,_do_,_dn_)}
    function set_fragment(s)
     {var t59=caml_jsbytes_of_string(urlencode(0,s));return _s_.hash = t59}
    function get$2(param){return url_of_js_string(_s_.href)}
    function set$0(u)
     {var t62=caml_jsbytes_of_string(string_of_url(u));return _s_.href = t62}
    var
     as_string=urldecode_js_string_string(_s_.href),
     Js_of_ocaml_Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$2,
        set$0,
        as_string]];
    caml_register_global(1659,Js_of_ocaml_Url,"Js_of_ocaml__Url");
    var Js_of_ocaml_Lib_version=[0,s,git_version];
    caml_register_global
     (1660,Js_of_ocaml_Lib_version,"Js_of_ocaml__Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Stdlib[60],name);
      caml_call2(Stdlib[66],oc,content);
      return caml_call1(Stdlib[76],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_string_of_jsbytes(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    function unmount(path){return runtime.caml_unmount(path)}
    if(caml_call2(String[68],git_version,cst$38))
     var js_of_ocaml_version=s;
    else
     var
      _co_=caml_call2(Stdlib[28],cst$41,git_version),
      js_of_ocaml_version=caml_call2(Stdlib[28],s,_co_);
    var
     _v_=runtime.caml_create_file,
     _w_=runtime.caml_read_file_content,
     Js_of_ocaml_Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_dm_){return runtime.caml_list_mount_point(_dm_)},
       unmount,
       mount,
       _w_,
       _v_,
       update_file,
       js_of_ocaml_version];
    caml_register_global(1661,Js_of_ocaml_Sys_js,"Js_of_ocaml__Sys_js");
    function empty_resize_observer_options(param){return {}}
    var t2$0=Unsafe[1].ResizeObserver;
    function is_supported$0(param){return caml_call1(Optdef[5],t2$0)}
    function observe(node,f,box,param)
     {var t1=caml_js_wrap_callback(f),t4=new t2$0(t1);
      if(box)
       {var box$0=box[1],t8={};t8.box = box$0;t4.observe(node,t8)}
      else
       t4.observe(node);
      return t4}
    var
     Js_of_ocaml_ResizeObserver=
      [0,empty_resize_observer_options,t2$0,is_supported$0,observe];
    caml_register_global
     (1662,Js_of_ocaml_ResizeObserver,"Js_of_ocaml__ResizeObserver");
    var t4$1=Unsafe[1].PerformanceObserver;
    function is_supported$1(param){return caml_call1(Optdef[5],t4$1)}
    function observe$0(entry_types,f)
     {var
       _dl_=
        caml_call1
         (caml_call1(Stdlib_List[19],caml_jsstring_of_string),entry_types),
       t1=caml_js_from_array(caml_call1(Stdlib_Array[12],_dl_)),
       t5={};
      t5.entryTypes = t1;
      var t3=caml_js_wrap_callback(f),t6=new t4$1(t3);
      t6.observe(t5);
      return t6}
    var Js_of_ocaml_PerformanceObserve=[0,t4$1,is_supported$1,observe$0];
    caml_register_global
     (1663,Js_of_ocaml_PerformanceObserve,"Js_of_ocaml__PerformanceObserver");
    function empty_mutation_observer_init(param){return {}}
    var t2$1=Unsafe[1].MutationObserver;
    function is_supported$2(param){return caml_call1(Optdef[5],t2$1)}
    function observe$1
     (node,
      f,
      child_list,
      attributes,
      character_data,
      subtree,
      attribute_old_value,
      character_data_old_value,
      attribute_filter,
      param)
     {function opt_iter(x,f)
       {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
      var t1=caml_js_wrap_callback(f),t19=new t2$1(t1),t18={};
      opt_iter(child_list,function(t3){return t18.childList = t3});
      opt_iter(attributes,function(t5){return t18.attributes = t5});
      opt_iter(character_data,function(t7){return t18.characterData = t7});
      opt_iter(subtree,function(t9){return t18.subtree = t9});
      opt_iter
       (attribute_old_value,function(t11){return t18.attributeOldValue = t11});
      opt_iter
       (character_data_old_value,
        function(t13){return t18.characterDataOldValue = t13});
      opt_iter
       (attribute_filter,
        function(l)
         {var t15=caml_js_from_array(caml_call1(Stdlib_Array[12],l));
          return t18.attributeFilter = t15});
      t19.observe(node,t18);
      return t19}
    var
     Js_of_ocaml_MutationObserver=
      [0,empty_mutation_observer_init,t2$1,is_supported$2,observe$1];
    caml_register_global
     (1664,Js_of_ocaml_MutationObserver,"Js_of_ocaml__MutationObserver");
    var t1=Unsafe[1].Object;
    function create$0(param){return new t1()}
    function add$0(t,k,v){return t[k.concat("_")] = v}
    function remove(t,k){return delete t[k.concat("_")]}
    function find(t,k){return t[k.concat("_")]}
    function keys(t)
     {var
       t10=Unsafe[1].Object,
       t11=t10.keys(t),
       res=[0,0],
       _dh_=t11.length - 1 | 0,
       _dg_=0;
      if(! (_dh_ < 0))
       {var i=_dg_;
        for(;;)
         {var
           _di_=function(param){return caml_call1(Stdlib[2],cst_Jstable_keys)},
           t15=caml_call2(Optdef[8],t11[i],_di_),
           t14=t15.length - 1 | 0,
           _dj_=res[1];
          res[1] = [0,t15.substring(0,t14),_dj_];
          var _dk_=i + 1 | 0;
          if(_dh_ !== i){var i=_dk_;continue}
          break}}
      return caml_call1(Stdlib_List[9],res[1])}
    var Js_of_ocaml_Jstable=[0,create$0,add$0,remove,find,keys];
    caml_register_global(1665,Js_of_ocaml_Jstable,"Js_of_ocaml__Jstable");
    var t11$1=Unsafe[1].JSON;
    function reviver(this$0,key,value)
     {if(typeof value === "string")return caml_string_of_jsbytes(value);
      if
       (value instanceof array_length
        &&
        4
        ===
        value.length
        &&
        255
        ===
        value[0])
       return runtime.caml_int64_create_lo_mi_hi(value[1],value[2],value[3]);
      return value}
    var t3$0=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(t2){return t11$1.parse(t2,t3$0)}
    var mlInt64_constr=t5.constructor;
    function t10(key,value)
     {var _df_=Stdlib_Obj[13];
      return caml_call2(symbol$8,runtime.caml_obj_tag(value),_df_)
              ?caml_jsbytes_of_string(value)
              :value instanceof mlInt64_constr
                ?caml_js_from_array([0,255,value.lo,value.mi,value.hi])
                :value}
    function output(t9){return t11$1.stringify(t9,t10)}
    var Js_of_ocaml_Json=[0,output,unsafe_input];
    caml_register_global(1667,Js_of_ocaml_Json,"Js_of_ocaml__Json");
    function string_of_name(param)
     {var _de_=param;
      if(74 <= _de_)
       {if(111 <= _de_)
         switch(_de_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_de_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _de_)
       switch(_de_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_de_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function name_of_string(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      var _dd_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color_name);
      throw [0,Stdlib[6],_dd_]}
    function rgb_of_name(param)
     {var _dc_=param;
      if(74 <= _dc_)
       {if(111 <= _dc_)
         switch(_dc_)
          {case 111:return _bq_;
           case 112:return _br_;
           case 113:return _bs_;
           case 114:return _bt_;
           case 115:return _bu_;
           case 116:return _bv_;
           case 117:return _bw_;
           case 118:return _bx_;
           case 119:return _by_;
           case 120:return _bz_;
           case 121:return _bA_;
           case 122:return _bB_;
           case 123:return _bC_;
           case 124:return _bD_;
           case 125:return _bE_;
           case 126:return _bF_;
           case 127:return _bG_;
           case 128:return _bH_;
           case 129:return _bI_;
           case 130:return _bJ_;
           case 131:return _bK_;
           case 132:return _bL_;
           case 133:return _bM_;
           case 134:return _bN_;
           case 135:return _bO_;
           case 136:return _bP_;
           case 137:return _bQ_;
           case 138:return _bR_;
           case 139:return _bS_;
           case 140:return _bT_;
           case 141:return _bU_;
           case 142:return _bV_;
           case 143:return _bW_;
           case 144:return _bX_;
           case 145:return _bY_;
           default:return _bZ_}
        switch(_dc_)
         {case 74:return _aR_;
          case 75:return _aS_;
          case 76:return _aT_;
          case 77:return _aU_;
          case 78:return _aV_;
          case 79:return _aW_;
          case 80:return _aX_;
          case 81:return _aY_;
          case 82:return _aZ_;
          case 83:return _a0_;
          case 84:return _a1_;
          case 85:return _a2_;
          case 86:return _a3_;
          case 87:return _a4_;
          case 88:return _a5_;
          case 89:return _a6_;
          case 90:return _a7_;
          case 91:return _a8_;
          case 92:return _a9_;
          case 93:return _a__;
          case 94:return _a$_;
          case 95:return _ba_;
          case 96:return _bb_;
          case 97:return _bc_;
          case 98:return _bd_;
          case 99:return _be_;
          case 100:return _bf_;
          case 101:return _bg_;
          case 102:return _bh_;
          case 103:return _bi_;
          case 104:return _bj_;
          case 105:return _bk_;
          case 106:return _bl_;
          case 107:return _bm_;
          case 108:return _bn_;
          case 109:return _bo_;
          default:return _bp_}}
      if(37 <= _dc_)
       switch(_dc_)
        {case 37:return _ag_;
         case 38:return _ah_;
         case 39:return _ai_;
         case 40:return _aj_;
         case 41:return _ak_;
         case 42:return _al_;
         case 43:return _am_;
         case 44:return _an_;
         case 45:return _ao_;
         case 46:return _ap_;
         case 47:return _aq_;
         case 48:return _ar_;
         case 49:return _as_;
         case 50:return _at_;
         case 51:return _au_;
         case 52:return _av_;
         case 53:return _aw_;
         case 54:return _ax_;
         case 55:return _ay_;
         case 56:return _az_;
         case 57:return _aA_;
         case 58:return _aB_;
         case 59:return _aC_;
         case 60:return _aD_;
         case 61:return _aE_;
         case 62:return _aF_;
         case 63:return _aG_;
         case 64:return _aH_;
         case 65:return _aI_;
         case 66:return _aJ_;
         case 67:return _aK_;
         case 68:return _aL_;
         case 69:return _aM_;
         case 70:return _aN_;
         case 71:return _aO_;
         case 72:return _aP_;
         default:return _aQ_}
      switch(_dc_)
       {case 0:return _x_;
        case 1:return _y_;
        case 2:return _z_;
        case 3:return _A_;
        case 4:return _B_;
        case 5:return _C_;
        case 6:return _D_;
        case 7:return _E_;
        case 8:return _F_;
        case 9:return _G_;
        case 10:return _H_;
        case 11:return _I_;
        case 12:return _J_;
        case 13:return _K_;
        case 14:return _L_;
        case 15:return _M_;
        case 16:return _N_;
        case 17:return _O_;
        case 18:return _P_;
        case 19:return _Q_;
        case 20:return _R_;
        case 21:return _S_;
        case 22:return _T_;
        case 23:return _U_;
        case 24:return _V_;
        case 25:return _W_;
        case 26:return _X_;
        case 27:return _Y_;
        case 28:return _Z_;
        case 29:return ___;
        case 30:return _$_;
        case 31:return _aa_;
        case 32:return _ab_;
        case 33:return _ac_;
        case 34:return _ad_;
        case 35:return _ae_;
        default:return _af_}}
    function rgb(a,r,g,b)
     {if(a){var a$0=a[1];return [3,[0,r,g,b,a$0]]}return [1,[0,r,g,b]]}
    function hsl(a,h,s,l)
     {if(a){var a$0=a[1];return [6,[0,h,s,l,a$0]]}return [5,[0,h,s,l]]}
    function string_of_t(param)
     {switch(param[0])
       {case 0:var n=param[1];return string_of_name(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Stdlib_Printf[4],_b0_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Stdlib_Printf[4],_b1_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Stdlib_Printf[4],_b2_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Stdlib_Printf[4],_b3_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Stdlib_Printf[4],_b4_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Stdlib_Printf[4],_b5_,h$0,s$0,l$0,a$1)}}
    function hex_of_rgb(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var
         _c__=caml_call2(symbol$5,i,0),
         _c$_=_c__ || caml_call2(symbol$9,i,255);
        if(_c$_)
         {var
           _da_=caml_call1(Stdlib[33],i),
           _db_=caml_call2(Stdlib[28],_da_,cst_is_out_of_valid_range);
          throw [0,Stdlib[6],_db_]}
        return _c$_}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Stdlib_Printf[4],_b6_,red,green,blue)}
    function js_t_of_js_string(s)
     {var
       t0=caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d),
       t13=new t11(t0),
       t2=caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0),
       t17=new t11(t2),
       t4=caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d),
       t15=new t11(t4),
       t6=caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0),
       t19=new t11(t6),
       t8=caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d),
       t21=new t11(t8),
       t10=caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d),
       t23=new t11(t10);
      if
       (!
        (t13.test(s) | 0)
        &&
        !
        (t15.test(s) | 0)
        &&
        !
        (t17.test(s) | 0)
        &&
        !
        (t19.test(s) | 0)
        &&
        !
        (t21.test(s) | 0)
        &&
        !
        (t23.test(s) | 0))
       {var _c7_=caml_string_of_jsstring(s);
        if(caml_call2(Stdlib_List[36],_c7_,_b7_))return s;
        var
         _c8_=caml_string_of_jsstring(s),
         _c9_=caml_call2(Stdlib[28],_c8_,cst_is_not_a_valid_color);
        throw [0,Stdlib[6],_c9_]}
      return s}
    function js(c)
     {if(0 === c[0])
       {var n=c[1];return caml_jsstring_of_string(string_of_name(n))}
      return caml_jsstring_of_string(string_of_t(c))}
    function ml(c)
     {var s=caml_string_of_jsstring(c);
      try
       {var _cU_=[0,name_of_string(s)];return _cU_}
      catch(_cV_)
       {_cV_ = caml_wrap_exception(_cV_);
        if(_cV_[1] === Stdlib[6])
         {var
           fail=
            function(param)
             {var _c6_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color$0);
              throw [0,Stdlib[6],_c6_]},
           re_rgb=regexp(cst_rgba_d_d_d_d_d),
           re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
           re_hsl=regexp(cst_hsla_d_d_d_d_d),
           i_of_s_o=
            function(param)
             {if(param)
               {var i=param[1];
                try
                 {var _c4_=caml_int_of_string(i);return _c4_}
                catch(_c5_)
                 {_c5_ = caml_wrap_exception(_c5_);
                  if(_c5_[1] === Stdlib[6])
                   var s=_c5_[2];
                  else
                   {if(_c5_[1] !== Stdlib[7])throw _c5_;var s=_c5_[2]}
                  var
                   _c1_=caml_call2(Stdlib[28],cst$39,s),
                   _c2_=caml_call2(Stdlib[28],i,_c1_),
                   _c3_=caml_call2(Stdlib[28],cst_color_conversion_error,_c2_);
                  throw [0,Stdlib[6],_c3_]}}
              return fail(0)},
           f_of_s=
            function(f)
             {try
               {var _cZ_=caml_float_of_string(f);return _cZ_}
              catch(_c0_)
               {_c0_ = caml_wrap_exception(_c0_);
                if(_c0_[1] === Stdlib[6])
                 var s=_c0_[2];
                else
                 {if(_c0_[1] !== Stdlib[7])throw _c0_;var s=_c0_[2]}
                var
                 _cW_=caml_call2(Stdlib[28],cst$40,s),
                 _cX_=caml_call2(Stdlib[28],f,_cW_),
                 _cY_=caml_call2(Stdlib[28],cst_color_conversion_error$0,_cX_);
                throw [0,Stdlib[6],_cY_]}},
           match=string_match(re_rgb,s,0);
          if(match)
           {var
             r=match[1],
             red=matched_group(r,2),
             green=matched_group(r,3),
             blue=matched_group(r,4),
             alpha=matched_group(r,5),
             match$0=matched_group(r,1);
            if(match$0)
             {var _cC_=match$0[1];
              if(! caml_string_notequal(_cC_,cst_rgb))
               {if(alpha)return fail(0);
                var _cG_=i_of_s_o(blue),_cH_=i_of_s_o(green);
                return [1,[0,i_of_s_o(red),_cH_,_cG_]]}
              if(! caml_string_notequal(_cC_,cst_rgba))
               {if(alpha)
                 {var
                   a=alpha[1],
                   _cD_=f_of_s(a),
                   _cE_=i_of_s_o(blue),
                   _cF_=i_of_s_o(green);
                  return [3,[0,i_of_s_o(red),_cF_,_cE_,_cD_]]}
                return fail(0)}}
            return fail(0)}
          var match$1=string_match(re_rgb_pct,s,0);
          if(match$1)
           {var
             r$0=match$1[1],
             red$0=matched_group(r$0,2),
             green$0=matched_group(r$0,3),
             blue$0=matched_group(r$0,4),
             alpha$0=matched_group(r$0,5),
             match$2=matched_group(r$0,1);
            if(match$2)
             {var _cI_=match$2[1];
              if(! caml_string_notequal(_cI_,cst_rgb$0))
               {if(alpha$0)return fail(0);
                var _cM_=i_of_s_o(blue$0),_cN_=i_of_s_o(green$0);
                return [2,[0,i_of_s_o(red$0),_cN_,_cM_]]}
              if(! caml_string_notequal(_cI_,cst_rgba$0))
               {if(alpha$0)
                 {var
                   a$0=alpha$0[1],
                   _cJ_=f_of_s(a$0),
                   _cK_=i_of_s_o(blue$0),
                   _cL_=i_of_s_o(green$0);
                  return [4,[0,i_of_s_o(red$0),_cL_,_cK_,_cJ_]]}
                return fail(0)}}
            return fail(0)}
          var match$3=string_match(re_hsl,s,0);
          if(match$3)
           {var
             r$1=match$3[1],
             red$1=matched_group(r$1,2),
             green$1=matched_group(r$1,3),
             blue$1=matched_group(r$1,4),
             alpha$1=matched_group(r$1,5),
             match$4=matched_group(r$1,1);
            if(match$4)
             {var _cO_=match$4[1];
              if(! caml_string_notequal(_cO_,cst_hsl))
               {if(alpha$1)return fail(0);
                var _cS_=i_of_s_o(blue$1),_cT_=i_of_s_o(green$1);
                return [5,[0,i_of_s_o(red$1),_cT_,_cS_]]}
              if(! caml_string_notequal(_cO_,cst_hsla))
               {if(alpha$1)
                 {var
                   a$1=alpha$1[1],
                   _cP_=f_of_s(a$1),
                   _cQ_=i_of_s_o(blue$1),
                   _cR_=i_of_s_o(green$1);
                  return [6,[0,i_of_s_o(red$1),_cR_,_cQ_,_cP_]]}
                return fail(0)}}
            return fail(0)}
          return fail(0)}
        throw _cV_}}
    function string_of_t$0(param)
     {if(typeof param === "number")
       return cst_0;
      else
       switch(param[0])
        {case 0:
          var f=param[1];return caml_call3(Stdlib_Printf[4],_b8_,f,cst_em$0);
         case 1:
          var f$0=param[1];
          return caml_call3(Stdlib_Printf[4],_b9_,f$0,cst_ex);
         case 2:
          var f$1=param[1];
          return caml_call3(Stdlib_Printf[4],_b__,f$1,cst_px);
         case 3:
          var f$2=param[1];
          return caml_call3(Stdlib_Printf[4],_b$_,f$2,cst_gd);
         case 4:
          var f$3=param[1];
          return caml_call3(Stdlib_Printf[4],_ca_,f$3,cst_rem);
         case 5:
          var f$4=param[1];
          return caml_call3(Stdlib_Printf[4],_cb_,f$4,cst_vw);
         case 6:
          var f$5=param[1];
          return caml_call3(Stdlib_Printf[4],_cc_,f$5,cst_vh);
         case 7:
          var f$6=param[1];
          return caml_call3(Stdlib_Printf[4],_cd_,f$6,cst_vm);
         case 8:
          var f$7=param[1];
          return caml_call3(Stdlib_Printf[4],_ce_,f$7,cst_ch);
         case 9:
          var f$8=param[1];
          return caml_call3(Stdlib_Printf[4],_cf_,f$8,cst_mm);
         case 10:
          var f$9=param[1];
          return caml_call3(Stdlib_Printf[4],_cg_,f$9,cst_cm);
         case 11:
          var f$10=param[1];
          return caml_call3(Stdlib_Printf[4],_ch_,f$10,cst_in);
         case 12:
          var f$11=param[1];
          return caml_call3(Stdlib_Printf[4],_ci_,f$11,cst_pt);
         default:
          var f$12=param[1];
          return caml_call3(Stdlib_Printf[4],_cj_,f$12,cst_pc)}}
    function js$0(t){return caml_jsstring_of_string(string_of_t$0(t))}
    function ml$0(t)
     {var s=caml_string_of_jsstring(t);
      if(caml_call2(String[68],s,cst_0$0))return 0;
      function fail(param)
       {var _cB_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length);
        throw [0,Stdlib[6],_cB_]}
      var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cz_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cy_=caml_call2(Stdlib[28],cst_length_conversion_error,s$0);
              throw [0,Stdlib[6],_cy_]}
            throw exn}
          var f$0=_cz_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cA_=match$1[1],switch$0=caml_string_compare(_cA_,cst_pc$0);
          if(0 <= switch$0)
           {if(! (0 < switch$0))return [13,f$0];
            if(! caml_string_notequal(_cA_,cst_pt$0))return [12,f$0];
            if(! caml_string_notequal(_cA_,cst_px$0))return [2,f$0];
            if(! caml_string_notequal(_cA_,cst_rem$0))return [4,f$0];
            if(! caml_string_notequal(_cA_,cst_vh$0))return [6,f$0];
            if(! caml_string_notequal(_cA_,cst_vm$0))return [7,f$0];
            if(! caml_string_notequal(_cA_,cst_vw$0))return [5,f$0]}
          else
           {if(! caml_string_notequal(_cA_,cst_ch$0))return [8,f$0];
            if(! caml_string_notequal(_cA_,cst_cm$0))return [10,f$0];
            if(! caml_string_notequal(_cA_,cst_em$1))return [0,f$0];
            if(! caml_string_notequal(_cA_,cst_ex$0))return [1,f$0];
            if(! caml_string_notequal(_cA_,cst_gd$0))return [3,f$0];
            if(! caml_string_notequal(_cA_,cst_in$0))return [11,f$0];
            if(! caml_string_notequal(_cA_,cst_mm$0))return [9,f$0]}
          return fail(0)}
        return fail(0)}
      return fail(0)}
    var Length=[0,string_of_t$0,js$0,ml$0];
    function string_of_t$1(param)
     {switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_Printf[4],_ck_,f,cst_deg);
        case 1:
         var f$0=param[1];
         return caml_call3(Stdlib_Printf[4],_cl_,f$0,cst_grad);
        case 2:
         var f$1=param[1];
         return caml_call3(Stdlib_Printf[4],_cm_,f$1,cst_rad);
        default:
         var f$2=param[1];
         return caml_call3(Stdlib_Printf[4],_cn_,f$2,cst_turns)}}
    function js$1(t){return caml_jsstring_of_string(string_of_t$1(t))}
    function ml$1(j)
     {var s=caml_string_of_jsstring(j),re=regexp(cst_d_d_deg_grad_rad_turns);
      function fail(param)
       {var _cx_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length$0);
        throw [0,Stdlib[6],_cx_]}
      var match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cv_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cu_=caml_call2(Stdlib[28],cst_length_conversion_error$0,s$0);
              throw [0,Stdlib[6],_cu_]}
            throw exn}
          var f$0=_cv_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cw_=match$1[1];
          if(! caml_string_notequal(_cw_,cst_deg$0))return [0,f$0];
          if(! caml_string_notequal(_cw_,cst_grad$0))return [1,f$0];
          if(! caml_string_notequal(_cw_,cst_rad$0))return [2,f$0];
          if(! caml_string_notequal(_cw_,cst_turns$0))return [3,f$0]}
        return fail(0)}
      return fail(0)}
    var
     Angle=[0,string_of_t$1,js$1,ml$1],
     Js_of_ocaml_CSS=
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
    caml_register_global(1668,Js_of_ocaml_CSS,"Js_of_ocaml__CSS");
    function listen(opt,target,typ,cb)
     {if(opt)var sth=opt[1],capture=sth;else var capture=0;
      var _ct_=! ! capture;
      return addEventListener
              (target,
               typ,
               full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
               _ct_)}
    var Js_of_ocaml_Dom_events=[0,Event$0,listen,removeEventListener];
    caml_register_global
     (1669,Js_of_ocaml_Dom_events,"Js_of_ocaml__Dom_events");
    var
     t0="http://www.w3.org/2000/svg",
     SVGError=[248,cst_Js_of_ocaml_Dom_svg_SVGErr,caml_fresh_oo_id(0)];
    function createElement$0(t2,name)
     {var t1=caml_jsstring_of_string(name);
      return t2.createElementNS("http://www.w3.org/2000/svg",t1)}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignObject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createPattern(doc){return unsafeCreateElement$0(doc,cst_pattern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,document$0=Unsafe[1].document;
    function getElementById$0(id)
     {function _cq_(e){if(e instanceof svg_element)return e;throw Stdlib[8]}
      function _cr_(param){throw Stdlib[8]}
      var
       t6=caml_jsstring_of_string(id),
       t7=Unsafe[1].document,
       _cs_=t7.getElementById(t6);
      return caml_call3(Opt[7],_cs_,_cr_,_cq_)}
    function element$2(e){return e instanceof svg_element?e:no_handler}
    function unsafeCoerce$0(e,tag)
     {var t9=e.tagName,_cp_=caml_jsstring_of_string(tag);
      return t9.toLowerCase() === _cp_?e:no_handler}
    function a$0(e){return unsafeCoerce$0(e,cst_a$3)}
    function altGlyph(e){return unsafeCoerce$0(e,cst_altglyph$0)}
    function altGlyphDef(e){return unsafeCoerce$0(e,cst_altglyphdef$0)}
    function altGlyphItem(e){return unsafeCoerce$0(e,cst_altglyphitem$0)}
    function animate(e){return unsafeCoerce$0(e,cst_animate$0)}
    function animateColor(e){return unsafeCoerce$0(e,cst_animatecolor$0)}
    function animateMotion(e){return unsafeCoerce$0(e,cst_animatemotion$0)}
    function animateTransform(e)
     {return unsafeCoerce$0(e,cst_animatetransform$0)}
    function circle(e){return unsafeCoerce$0(e,cst_circle$0)}
    function clipPath(e){return unsafeCoerce$0(e,cst_clippath$0)}
    function cursor(e){return unsafeCoerce$0(e,cst_cursor$0)}
    function defs(e){return unsafeCoerce$0(e,cst_defs$0)}
    function desc(e){return unsafeCoerce$0(e,cst_desc$0)}
    function ellipse(e){return unsafeCoerce$0(e,cst_ellipse$0)}
    function filter(e){return unsafeCoerce$0(e,cst_filter$0)}
    function font(e){return unsafeCoerce$0(e,cst_font$0)}
    function fontFace(e){return unsafeCoerce$0(e,cst_font_face$0)}
    function fontFaceFormat(e)
     {return unsafeCoerce$0(e,cst_font_face_format$0)}
    function fontFaceName(e){return unsafeCoerce$0(e,cst_font_face_name$0)}
    function fontFaceSrc(e){return unsafeCoerce$0(e,cst_font_face_src$0)}
    function fontFaceUri(e){return unsafeCoerce$0(e,cst_font_face_uri$0)}
    function foreignObject(e){return unsafeCoerce$0(e,cst_foreignobject)}
    function g(e){return unsafeCoerce$0(e,cst_g$1)}
    function glyph(e){return unsafeCoerce$0(e,cst_glyph$0)}
    function glyphRef(e){return unsafeCoerce$0(e,cst_glyphref$0)}
    function hkern(e){return unsafeCoerce$0(e,cst_hkern$0)}
    function image(e){return unsafeCoerce$0(e,cst_image$0)}
    function lineElement(e){return unsafeCoerce$0(e,cst_line$0)}
    function linearElement(e){return unsafeCoerce$0(e,cst_lineargradient$0)}
    function mask(e){return unsafeCoerce$0(e,cst_mask$0)}
    function metaData(e){return unsafeCoerce$0(e,cst_metadata$0)}
    function missingGlyph(e){return unsafeCoerce$0(e,cst_missing_glyph$0)}
    function mPath(e){return unsafeCoerce$0(e,cst_mpath$0)}
    function path$0(e){return unsafeCoerce$0(e,cst_path$0)}
    function pattern(e){return unsafeCoerce$0(e,cst_pattern$0)}
    function polygon(e){return unsafeCoerce$0(e,cst_polygon$0)}
    function polyline(e){return unsafeCoerce$0(e,cst_polyline$0)}
    function radialgradient(e){return unsafeCoerce$0(e,cst_radialgradient$0)}
    function rect(e){return unsafeCoerce$0(e,cst_rect$0)}
    function script$0(e){return unsafeCoerce$0(e,cst_script$3)}
    function set$1(e){return unsafeCoerce$0(e,cst_set$0)}
    function stop(e){return unsafeCoerce$0(e,cst_stop$0)}
    function style$0(e){return unsafeCoerce$0(e,cst_style$3)}
    function svg(e){return unsafeCoerce$0(e,cst_svg$0)}
    function switch$0(e){return unsafeCoerce$0(e,cst_switch$0)}
    function symbol$12(e){return unsafeCoerce$0(e,cst_symbol$0)}
    function textElement(e){return unsafeCoerce$0(e,cst_text$1)}
    function textpath(e){return unsafeCoerce$0(e,cst_textpath$0)}
    function title$0(e){return unsafeCoerce$0(e,cst_title$3)}
    function tref(e){return unsafeCoerce$0(e,cst_tref$0)}
    function tspan(e){return unsafeCoerce$0(e,cst_tspan$0)}
    function use(e){return unsafeCoerce$0(e,cst_use$0)}
    function view(e){return unsafeCoerce$0(e,cst_view$0)}
    function vkern(e){return unsafeCoerce$0(e,cst_vkern$0)}
    var
     Js_of_ocaml_Dom_svg=
      [0,
       t0,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document$0,
       getElementById$0,
       [0,
        element$2,
        a$0,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path$0,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script$0,
        set$1,
        stop,
        style$0,
        svg,
        switch$0,
        symbol$12,
        textElement,
        textpath,
        title$0,
        tref,
        tspan,
        use,
        view,
        vkern]];
    caml_register_global(1670,Js_of_ocaml_Dom_svg,"Js_of_ocaml__Dom_svg");
    function withCredentials(b)
     {var t1={},t0=! ! b;t1.withCredentials = t0;return t1}
    var
     eventSource=Unsafe[1].EventSource,
     eventSource_options=Unsafe[1].EventSource,
     Js_of_ocaml_EventSource=
      [0,withCredentials,eventSource,eventSource_options,addEventListener];
    caml_register_global
     (1671,Js_of_ocaml_EventSource,"Js_of_ocaml__EventSource");
    var
     console=runtime.caml_js_get_console(0),
     Js_of_ocaml_Firebug=[0,console];
    caml_register_global(1672,Js_of_ocaml_Firebug,"Js_of_ocaml__Firebug");
    function empty_position_options(param){return {}}
    var
     t1$0=Unsafe[1].navigator,
     geolocation=caml_call1(Optdef[5],t1$0)?t1$0.geolocation:t1$0;
    function is_supported$3(param){return caml_call1(Optdef[5],geolocation)}
    var
     Js_of_ocaml_Geolocation=
      [0,empty_position_options,geolocation,is_supported$3];
    caml_register_global
     (1673,Js_of_ocaml_Geolocation,"Js_of_ocaml__Geolocation");
    function empty_intersection_observer_op(param){return {}}
    var intersectionObserver_unsafe=Unsafe[1].IntersectionObserver;
    function is_supported$4(param)
     {return caml_call1(Optdef[5],intersectionObserver_unsafe)}
    var
     Js_of_ocaml_IntersectionObserv=
      [0,
       empty_intersection_observer_op,
       is_supported$4,
       intersectionObserver_unsafe];
    caml_register_global
     (1674,Js_of_ocaml_IntersectionObserv,"Js_of_ocaml__IntersectionObserver");
    function object_options(param){return {"localeMatcher":"best fit"}}
    function options(param)
     {return {"localeMatcher":"best fit",
              "usage":"sort",
              "sensitivity":"variant",
              "ignorePunctuation":t4,
              "numeric":t4,
              "caseFirst":"false"}}
    var Collator=[0,object_options,options];
    function options$0(param)
     {return {"localeMatcher":"best fit",
              "timeZone":t39,
              "hour12":t39,
              "hourCycle":t39,
              "formatMatcher":"best fit",
              "weekday":t39,
              "era":t39,
              "year":t39,
              "month":t39,
              "day":t39,
              "hour":t39,
              "minute":t39,
              "second":t39,
              "timeZoneName":t39}}
    var DateTimeFormat=[0,object_options,options$0];
    function options$1(param)
     {return {"localeMatcher":"best fit",
              "style":"decimal",
              "currency":t39,
              "currencyDisplay":t39,
              "useGrouping":t25,
              "minimumIntegerDigits":t39,
              "minimumFractionDigits":t39,
              "maximumFractionDigits":t39,
              "minimumSignificantDigits":t39,
              "maximumSignificantDigits":t39}}
    var NumberFormat=[0,object_options,options$1];
    function options$2(param)
     {return {"localeMatcher":"best fit","type":"cardinal"}}
    var
     PluralRules=[0,object_options,options$2],
     intl=Unsafe[1].Intl,
     t35=Unsafe[1].Intl,
     collator_constr=t35.Collator,
     t37=Unsafe[1].Intl,
     dateTimeFormat_constr=t37.DateTimeFormat,
     t39$0=Unsafe[1].Intl,
     numberFormat_constr=t39$0.NumberFormat,
     t41=Unsafe[1].Intl,
     pluralRules_constr=t41.PluralRules;
    function is_supported$5(param){return caml_call1(Optdef[5],intl)}
    var
     Js_of_ocaml_Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported$5];
    caml_register_global(1675,Js_of_ocaml_Intl,"Js_of_ocaml__Intl");
    var Js_of_ocaml$0=[0];
    caml_register_global(1676,Js_of_ocaml$0,"Js_of_ocaml");
    return}
  (globalThis));


//# 1 ".bergman.eobjs/byte/dune__exe.cmo.js"
(function(globalThis)
   {"use strict";
    var runtime=globalThis.jsoo_runtime,Dune_exe=[0];
    runtime.caml_register_global(0,Dune_exe,"Dune__exe");
    return}
  (globalThis));


//# 1 ".bergman.eobjs/byte/dune__exe__Pol.cmo.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_1=caml_string_of_jsbytes("1"),
     cst_0=caml_string_of_jsbytes("0"),
     cst=caml_string_of_jsbytes("*"),
     cst$0=caml_string_of_jsbytes("+"),
     cst$1=caml_string_of_jsbytes("-"),
     cst$2=caml_string_of_jsbytes("-"),
     Stdlib=global_data.Stdlib,
     Stdlib_String=global_data.Stdlib__String;
    function to_string(p)
     {function aux(param)
       {if(typeof param === "number")
         return 0 === param?cst_1:cst_0;
        else
         switch(param[0])
          {case 0:
            var
             q=param[2],
             p=param[1],
             _a_=aux(q),
             _b_=caml_call2(Stdlib[28],cst,_a_),
             _c_=aux(p);
            return caml_call2(Stdlib[28],_c_,_b_);
           case 1:var c=param[1];return caml_call2(Stdlib_String[1],1,c);
           case 2:
            var
             q$0=param[2],
             p$0=param[1],
             _d_=aux(q$0),
             _e_=caml_call2(Stdlib[28],cst$0,_d_),
             _f_=aux(p$0);
            return caml_call2(Stdlib[28],_f_,_e_);
           case 3:
            var
             q$1=param[2],
             p$1=param[1],
             _g_=aux(q$1),
             _h_=caml_call2(Stdlib[28],cst$1,_g_),
             _i_=aux(p$1);
            return caml_call2(Stdlib[28],_i_,_h_);
           default:
            var p$2=param[1],_j_=aux(p$2);
            return caml_call2(Stdlib[28],cst$2,_j_)}}
      return aux(p)}
    var Dune_exe_Pol=[0,to_string];
    runtime.caml_register_global(8,Dune_exe_Pol,"Dune__exe__Pol");
    return}
  (globalThis));


//# 1 ".bergman.eobjs/byte/dune__exe__Parser.cmo.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parser=caml_string_of_jsbytes("parser"),
     cst_unexpected_number=caml_string_of_jsbytes("unexpected number"),
     yylhs=
      caml_string_of_jsbytes
       ("\xff\xff\x01\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x02\0\x03\0\x03\0\0\0"),
     yylen=
      caml_string_of_jsbytes
       ("\x02\0\x02\0\x03\0\x03\0\x03\0\x03\0\x01\0\x01\0\x02\0\x03\0\x02\0\x01\0\x02\0"),
     yydefred=
      caml_string_of_jsbytes
       ("\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\f\0\0\0\x06\0\b\0\0\0\n\0\0\0\0\0\0\0\0\0\x01\0\t\0\0\0\0\0\0\0\x05\0"),
     yydgoto=caml_string_of_jsbytes("\x02\0\x07\0\b\0\t\0"),
     yysindex=
      caml_string_of_jsbytes
       ("\xff\xff\x03\xff\0\0\0\0\x03\xff\x03\xff\xfd\xfe\0\0\x13\0\0\0\0\0\x19\xff\0\0\x03\xff\x03\xff\x03\xff\x07\xff\0\0\0\0\xfe\xfe\xfe\xfe\t\xff\0\0"),
     yyrindex=
      caml_string_of_jsbytes
       ("\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\r\0\x07\0\0\0"),
     yygindex=caml_string_of_jsbytes("\0\0\0\0\x0b\0\x06\0"),
     yytable=
      caml_string_of_jsbytes
       ("\x01\0\x0b\0\x0f\0\x10\0\x03\0\x06\0\x04\0\x03\0\x16\0\x05\0\x02\0\x06\0\f\0\x04\0\x10\0\n\0\x0b\0\0\0\0\0\x11\0\0\0\0\0\0\0\0\0\x13\0\x14\0\x15\0\r\0\x0e\0\x0f\0\x10\0\0\0\xx0b\0\x0b\0\x0b\0\x0b\0\0\0\x0b\0\x03\0\x03\0\x03\0\x02\0\x02\0\x03\0\x04\0\x04\0\x02\0\0\0\0\0\x04\0\r\0\x0e\0\x0f\0\x10\0"),
     yycheck=
      caml_string_of_jsbytes
       ("\x01\0\0\0\x04\x01\x05\x01\x01\x01\b\x01\x03\x01\0\0\x01\x01\x06\x01\0\0\b\x01\x06\0\0\0\x05\x01\x04\0\x05\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\x0e\0\x0f\0\x02\x01\x03\x01\x04\x01\x05\x01\xff\xff\x07\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x01\x03\x01\x04\x01\x05\x01\xff\xff\x07\x01\x02\x01\x03\x01\x04\x01\x02\x01\x03\x01\x07\x01\x02\x01\x03\x01\x07\x01\xff\xff\xff\xff\x07\x01\x02\x01\x03\x01\x04\x01\x05\x01"),
     yynames_const=
      caml_string_of_jsbytes("ADD\0SUB\0MUL\0POW\0LPAR\0RPAR\0EOF\0"),
     yynames_block=caml_string_of_jsbytes("INT\0CHAR\0"),
     Stdlib_Parsing=global_data.Stdlib__Parsing,
     Stdlib=global_data.Stdlib,
     _a_=[0,258,259,260,261,262,263,0,0];
    function muls(param)
     {if(param)
       {var _o_=param[1];
        if(param[2]){var l=param[2];return [0,_o_,muls(l)]}
        return _o_}
      return 0}
    function pow(p,n){return 0 === n?0:1 === n?p:[0,p,pow(p,n - 1 | 0)]}
    var
     yytransl_const=_a_.slice(),
     yytransl_block=[0,257,264,0],
     yytablesize=280;
    function _b_(caml_parser_env)
     {var _n_=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      throw [0,Stdlib_Parsing[12],_n_]}
    function _c_(caml_parser_env)
     {var _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return [0,[1,_1],0]}
    function _d_(caml_parser_env)
     {var
       _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,1),
       _2=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return [0,[1,_1],_2]}
    function _e_(caml_parser_env)
     {var _2=caml_call2(Stdlib_Parsing[14],caml_parser_env,1);return _2}
    function _f_(caml_parser_env)
     {var _2=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);return [4,_2]}
    function _g_(caml_parser_env)
     {var _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return 0 === _1?1:1 === _1?0:caml_call1(Stdlib[2],cst_unexpected_number)}
    function _h_(caml_parser_env)
     {var _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);return muls(_1)}
    function _i_(caml_parser_env)
     {var
       _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,2),
       _3=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return pow(_1,_3)}
    function _j_(caml_parser_env)
     {var
       _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,2),
       _3=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return [3,_1,_3]}
    function _k_(caml_parser_env)
     {var
       _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,2),
       _3=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return [0,_1,_3]}
    function _l_(caml_parser_env)
     {var
       _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,2),
       _3=caml_call2(Stdlib_Parsing[14],caml_parser_env,0);
      return [2,_1,_3]}
    function _m_(caml_parser_env)
     {var _1=caml_call2(Stdlib_Parsing[14],caml_parser_env,1);return _1}
    var
     yyact=
      [0,
       function(param){return caml_call1(Stdlib[2],cst_parser)},
       _m_,
       _l_,
       _k_,
       _j_,
       _i_,
       _h_,
       _g_,
       _f_,
       _e_,
       _d_,
       _c_,
       _b_],
     yytables=
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       yytablesize,
       yytable,
       yycheck,
       Stdlib_Parsing[16],
       yynames_const,
       yynames_block];
    function main(lexfun,lexbuf)
     {return caml_call4(Stdlib_Parsing[13],yytables,1,lexfun,lexbuf)}
    var Dune_exe_Parser=[0,main];
    runtime.caml_register_global(16,Dune_exe_Parser,"Dune__exe__Parser");
    return}
  (globalThis));


//# 1 ".bergman.eobjs/byte/dune__exe__Lexer.cmo.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xf6\xff\x01\0\xf8\xffK\0\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\b\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x02\0\0\0\0\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x05\0\b\0\n\0\0\0\t\0\0\0\0\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\x07\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     Stdlib_Lexing=global_data.Stdlib__Lexing;
    function token$0(counter,lexbuf)
     {var _a_=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return ocaml_lex_token_rec$0(counter$0,lexbuf,_a_)}
      return caml_trampoline_return(ocaml_lex_token_rec$0,[0,lexbuf,_a_])}
    function ocaml_lex_token_rec$0(counter,lexbuf,ocaml_lex_state)
     {var ocaml_lex_state$0=ocaml_lex_state;
      for(;;)
       {var
         ocaml_lex_state$1=
          caml_call3
           (Stdlib_Lexing[20],ocaml_lex_tables,ocaml_lex_state$0,lexbuf);
        if(9 < ocaml_lex_state$1 >>> 0)
         {caml_call1(lexbuf[1],lexbuf);
          var ocaml_lex_state$0=ocaml_lex_state$1;
          continue}
        switch(ocaml_lex_state$1)
         {case 0:return 0;
          case 1:return 1;
          case 2:return 2;
          case 3:return 3;
          case 4:return 4;
          case 5:return 5;
          case 6:
           var n=caml_call3(Stdlib_Lexing[16],lexbuf,lexbuf[5],lexbuf[6]);
           return [0,runtime.caml_int_of_string(n)];
          case 7:
           var c=caml_call2(Stdlib_Lexing[18],lexbuf,lexbuf[5]);return [1,c];
          case 8:
           if(counter < 50)
            {var counter$0=counter + 1 | 0;return token$0(counter$0,lexbuf)}
           return caml_trampoline_return(token$0,[0,lexbuf]);
          default:return 6}}}
    function token(lexbuf){return caml_trampoline(token$0(0,lexbuf))}
    function ocaml_lex_token_rec(lexbuf,ocaml_lex_state)
     {return caml_trampoline(ocaml_lex_token_rec$0(0,lexbuf,ocaml_lex_state))}
    var Dune_exe_Lexer=[0,ocaml_lex_tables,token,ocaml_lex_token_rec];
    runtime.caml_register_global(2,Dune_exe_Lexer,"Dune__exe__Lexer");
    return}
  (globalThis));


//# 1 ".bergman.eobjs/byte/dune__exe__Bergman.cmo.js"
(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$22=caml_string_of_jsbytes(","),
     cst$25=caml_string_of_jsbytes("-"),
     cst$24=caml_string_of_jsbytes("-"),
     cst$23=caml_string_of_jsbytes(","),
     v=caml_string_of_jsbytes("x,y"),
     cst_x=caml_string_of_jsbytes("x"),
     cst_y=caml_string_of_jsbytes("y"),
     cst_x$0=caml_string_of_jsbytes("x"),
     cst$21=caml_string_of_jsbytes(","),
     cst$14=caml_string_of_jsbytes(","),
     cst$15=caml_string_of_jsbytes(""),
     cst$17=caml_string_of_jsbytes("^"),
     cst$18=caml_string_of_jsbytes(""),
     cst$19=caml_string_of_jsbytes(""),
     cst$20=caml_string_of_jsbytes("+"),
     cst$16=caml_string_of_jsbytes("+"),
     cst$10=caml_string_of_jsbytes(","),
     cst_1=caml_string_of_jsbytes("-1"),
     cst$13=caml_string_of_jsbytes("-"),
     cst$12=caml_string_of_jsbytes("-"),
     cst$11=caml_string_of_jsbytes(","),
     cst$7=caml_string_of_jsbytes(","),
     cst$9=caml_string_of_jsbytes("+"),
     cst$8=caml_string_of_jsbytes(","),
     cst$4=caml_string_of_jsbytes(","),
     cst$6=caml_string_of_jsbytes("-"),
     cst$5=caml_string_of_jsbytes(","),
     cst_ext=caml_string_of_jsbytes("ext"),
     cst_plactic=caml_string_of_jsbytes("plactic"),
     cst_pow=caml_string_of_jsbytes("pow"),
     cst_sklyanin=caml_string_of_jsbytes("sklyanin"),
     cst_sym=caml_string_of_jsbytes("sym"),
     cst_symg=caml_string_of_jsbytes("symg"),
     cst_br$0=caml_string_of_jsbytes("<br/>"),
     cst$2=caml_string_of_jsbytes(" = "),
     cst_H=caml_string_of_jsbytes("H"),
     cst_Parsing_variables=caml_string_of_jsbytes("Parsing variables..."),
     cst_Parsing_relations=caml_string_of_jsbytes("Parsing relations..."),
     cst_Parsing_error=caml_string_of_jsbytes("Parsing error: "),
     cst=caml_string_of_jsbytes(" , "),
     cst_Relations=caml_string_of_jsbytes("Relations: "),
     cst_deglex=caml_string_of_jsbytes("deglex"),
     cst_revdeglex=caml_string_of_jsbytes("revdeglex"),
     cst_algebra=caml_string_of_jsbytes("algebra"),
     cst_monoid=caml_string_of_jsbytes("monoid"),
     cst_Invalid_augmentation=caml_string_of_jsbytes("Invalid augmentation!"),
     cst_Computing_Gr_bner_basis=
      caml_string_of_jsbytes("Computing Gr\xc3\xb6bner basis..."),
     cst_Computing_Anick_chains=
      caml_string_of_jsbytes("Computing Anick chains..."),
     cst$0=caml_string_of_jsbytes(""),
     cst_br$1=caml_string_of_jsbytes("<br/>"),
     cst$3=caml_string_of_jsbytes(" "),
     cst_chains=caml_string_of_jsbytes(" chains: "),
     cst_Computing_resolution=
      caml_string_of_jsbytes("Computing resolution..."),
     cst_br=caml_string_of_jsbytes("<br/>"),
     cst_Computing_Betti_numbers=
      caml_string_of_jsbytes("Computing Betti numbers..."),
     cst$1=caml_string_of_jsbytes(""),
     cst_Done=caml_string_of_jsbytes("Done."),
     cst_Error=caml_string_of_jsbytes("Error: "),
     cst_Not_found=caml_string_of_jsbytes("Not_found..."),
     cst_em=caml_string_of_jsbytes("<\/em>"),
     cst_em_style_color_red=caml_string_of_jsbytes('<em style="color:red">'),
     cst_Dune_exe_Bergman_Parsing=
      caml_string_of_jsbytes("Dune__exe__Bergman.Parsing"),
     Stdlib_String=global_data.Stdlib__String,
     Stdlib=global_data.Stdlib,
     Stdlib_List=global_data.Stdlib__List,
     Assert_failure=global_data.Assert_failure,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Stdlib_Printexc=global_data.Stdlib__Printexc,
     Dune_exe_Pol=global_data.Dune__exe__Pol,
     Alg_Alphabet=global_data.Alg__Alphabet,
     Stdlib_Array=global_data.Stdlib__Array,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Stdlib_Lexing=global_data.Stdlib__Lexing,
     Dune_exe_Lexer=global_data.Dune__exe__Lexer,
     Dune_exe_Parser=global_data.Dune__exe__Parser,
     Js_of_ocaml_Firebug=global_data.Js_of_ocaml__Firebug,
     Alg_Monoid=global_data.Alg__Monoid,
     Alg_Field=global_data.Alg__Field,
     Alg_Algebra=global_data.Alg__Algebra,
     doc=Js_of_ocaml_Dom_html[2],
     _h_=[0,caml_string_of_jsbytes("tools/bergman/bergman.ml"),327,13],
     _f_=[0,caml_string_of_jsbytes("tools/bergman/bergman.ml"),162,15],
     _g_=[0,caml_string_of_jsbytes("tools/bergman/bergman.ml"),170,17],
     _b_=[0,caml_string_of_jsbytes("tools/bergman/bergman.ml"),82,2],
     _a_=[0,caml_string_of_jsbytes("tools/bergman/bergman.ml"),17,38];
    function button(txt,action)
     {var
       button_type="button",
       t3=caml_call3(Js_of_ocaml_Dom_html[40],[0,button_type],0,doc),
       t0=caml_jsstring_of_string(txt);
      t3.value = t0;
      function _b6_(param){caml_call1(action,0);return Js_of_ocaml_Js[7]}
      var t2=caml_call1(Js_of_ocaml_Dom_html[10],_b6_);
      t3.onclick = t2;
      return t3}
    function debug(s)
     {var t4=caml_jsstring_of_string(s);
      return Js_of_ocaml_Firebug[1].debug(t4)}
    function jsget(x)
     {function _b5_(param){throw [0,Assert_failure,_a_]}
      return caml_call2(Js_of_ocaml_Js[5][8],x,_b5_)}
    var
     Parsing=
      [248,cst_Dune_exe_Bergman_Parsing,runtime.caml_fresh_oo_id(0)];
    function parse_pol(s)
     {var _b4_=caml_call2(Stdlib_Lexing[3],0,s);
      return caml_call2(Dune_exe_Parser[1],Dune_exe_Lexer[2],_b4_)}
    function char_of_string(s)
     {if(1 === caml_ml_string_length(s))return caml_string_get(s,0);
      throw [0,Assert_failure,_b_]}
    var
     _c_=Alg_Alphabet[1],
     include=caml_call1(Alg_Monoid[3],[0,_c_[1],_c_[2],_c_[3]]),
     is_commutative=include[1],
     mul=include[2],
     one=include[3],
     pow=include[4],
     inj=include[5],
     length=include[6],
     sub=include[7],
     eq=include[8],
     compare=include[9],
     peq=include[10],
     to_string=include[11],
     Map=include[12],
     included=include[13],
     unifier=include[14],
     ordered_unifiers=include[15],
     ordered_unifiers_bicontext=include[16],
     unifiers_bicontext=include[17],
     Order=include[18],
     Anick=include[19];
    function s(s)
     {function _b3_(i){return caml_string_get(s,i)}
      return caml_call2(Stdlib_Array[2],caml_ml_string_length(s),_b3_)}
    var
     M=
      [0,
       is_commutative,
       mul,
       one,
       pow,
       inj,
       length,
       sub,
       eq,
       compare,
       peq,
       to_string,
       Map,
       included,
       unifier,
       ordered_unifiers,
       ordered_unifiers_bicontext,
       unifiers_bicontext,
       Order,
       Anick,
       s],
     _d_=Alg_Alphabet[1],
     _e_=[0,_d_[1],_d_[2],_d_[3]],
     P=caml_call1(caml_call1(Alg_Algebra[4],Alg_Field[3]),_e_);
    function eval_pol(p)
     {function aux(param)
       {if(typeof param === "number")
         return 0 === param?P[2][20]:P[2][3];
        else
         switch(param[0])
          {case 0:
            var q=param[2],p=param[1],_bV_=aux(q),_bW_=aux(p);
            return caml_call2(P[2][22],_bW_,_bV_);
           case 1:
            var c=param[1],_bX_=caml_call1(M[5],c);
            return caml_call1(P[2][5],_bX_);
           case 2:
            var q$0=param[2],p$0=param[1],_bY_=aux(q$0),_bZ_=aux(p$0);
            return caml_call2(P[2][11],_bZ_,_bY_);
           case 3:
            var q$1=param[2],p$1=param[1],_b0_=aux(q$1),_b1_=aux(p$1);
            return caml_call2(P[2][14],_b1_,_b0_);
           default:
            var p$2=param[1],_b2_=aux(p$2);return caml_call1(P[2][13],_b2_)}}
      return aux(p)}
    function replace(c,t,s)
     {try
       {var
         n=caml_call2(Stdlib_String[35],s,c),
         _bQ_=
          caml_call3
           (Stdlib_String[15],
            s,
            n + 1 | 0,
            caml_ml_string_length(s) - (n + 1 | 0) | 0),
         _bR_=caml_call2(Stdlib[28],t,_bQ_),
         _bS_=caml_call3(Stdlib_String[15],s,0,n),
         _bT_=replace(c,t,caml_call2(Stdlib[28],_bS_,_bR_));
        return _bT_}
      catch(_bU_)
       {_bU_ = caml_wrap_exception(_bU_);
        if(_bU_ === Stdlib[8])return s;
        throw _bU_}}
    function run(param)
     {var
       _i_=jsget(doc.getElementById("vars")),
       t60=jsget(caml_call1(Js_of_ocaml_Dom_html[117][55],_i_)),
       _j_=jsget(doc.getElementById("relations")),
       t62=jsget(caml_call1(Js_of_ocaml_Dom_html[117][55],_j_)),
       _k_=jsget(doc.getElementById("order")),
       order=jsget(caml_call1(Js_of_ocaml_Dom_html[117][50],_k_)),
       _l_=jsget(doc.getElementById("generate")),
       t66=jsget(caml_call1(Js_of_ocaml_Dom_html[117][50],_l_)),
       _m_=jsget(doc.getElementById("generaten")),
       t68=jsget(caml_call1(Js_of_ocaml_Dom_html[117][33],_m_)),
       _n_=jsget(doc.getElementById("augmentation")),
       augmentation=jsget(caml_call1(Js_of_ocaml_Dom_html[117][50],_n_)),
       _o_=jsget(doc.getElementById("maxdeg")),
       maxdeg=jsget(caml_call1(Js_of_ocaml_Dom_html[117][33],_o_)),
       grobner=jsget(doc.getElementById("grobner")),
       chains=jsget(doc.getElementById("chains")),
       resolution=jsget(doc.getElementById("resolution")),
       betti=jsget(doc.getElementById("betti")),
       t58=jsget(doc.getElementById("go")),
       t33=jsget(doc.getElementById("status"));
      function status(s)
       {var t32=caml_jsstring_of_string(s);return t33.innerHTML = t32}
      function error(s)
       {var _bP_=caml_call2(Stdlib[28],s,cst_em);
        return status(caml_call2(Stdlib[28],cst_em_style_color_red,_bP_))}
      function _p_(param)
       {try
         {var
           vars=caml_string_of_jsstring(t60.value),
           relations=caml_string_of_jsstring(t62.value);
          grobner.innerHTML = "";
          chains.innerHTML = "";
          resolution.innerHTML = "";
          betti.innerHTML = "";
          status(cst_Parsing_variables);
          var
           vars$0=caml_call2(Stdlib_String[16],44,vars),
           vars$1=caml_call2(Stdlib_List[19],Stdlib_String[23],vars$0),
           vars$2=caml_call2(Stdlib_List[19],char_of_string,vars$1);
          status(cst_Parsing_relations);
          var
           relations$0=caml_call2(Stdlib_String[16],44,relations),
           relations$1=
            caml_call2(Stdlib_List[19],Stdlib_String[23],relations$0);
          try
           {var relations$2=caml_call2(Stdlib_List[19],parse_pol,relations$1)}
          catch(e)
           {e = caml_wrap_exception(e);
            var _bu_=caml_call1(Stdlib_Printexc[1],e);
            error(caml_call2(Stdlib[28],cst_Parsing_error,_bu_));
            throw Stdlib[3]}
          var
           _bv_=caml_call2(Stdlib_List[19],Dune_exe_Pol[1],relations$2),
           _bw_=caml_call2(Stdlib_String[6],cst,_bv_);
          grobner.innerHTML
          =
          caml_jsstring_of_string(caml_call2(Stdlib[28],cst_Relations,_bw_));
          var
           relations$3=caml_call2(Stdlib_List[19],eval_pol,relations$2),
           match=caml_string_of_jsstring(order.value);
          if(caml_string_notequal(match,cst_deglex))
           {if(caml_string_notequal(match,cst_revdeglex))
             throw [0,Assert_failure,_f_];
            var order$0=caml_call1(M[18][2],Alg_Alphabet[1][5])}
          else
           var order$0=caml_call1(M[18][2],Alg_Alphabet[1][4]);
          var pres=caml_call3(P[7],order$0,vars$2,relations$3);
          try
           {var match$0=caml_string_of_jsstring(augmentation.value);
            if(caml_string_notequal(match$0,cst_algebra))
             {if(caml_string_notequal(match$0,cst_monoid))
               throw [0,Assert_failure,_g_];
              var _bx_=caml_call1(P[14][4],pres)}
            else
             var _bx_=caml_call1(P[14][3],pres)}
          catch(_bO_)
           {_bO_ = caml_wrap_exception(_bO_);
            if(_bO_ === P[14][1])
             {error(cst_Invalid_augmentation);throw Stdlib[3]}
            throw _bO_}
          status(cst_Computing_Gr_bner_basis);
          var _by_=caml_call1(P[11],pres),pres$0=caml_call1(P[12],_by_);
          grobner.innerHTML
          =
          caml_jsstring_of_string(caml_call1(P[9],pres$0));
          status(cst_Computing_Anick_chains);
          var
           heads=caml_call1(P[8],pres$0),
           cc=caml_call1(M[19][3],vars$2),
           cc$0=[0,cc],
           s$0=[0,cst$0],
           i=0;
          for(;;)
           {var
             _bB_=caml_call2(Stdlib_List[19],M[19][12],cc$0[1]),
             _bC_=caml_call2(Stdlib_String[6],cst$3,_bB_),
             _bD_=caml_call2(Stdlib[28],_bC_,cst_br$1),
             _bE_=caml_call2(Stdlib[28],cst_chains,_bD_),
             _bF_=caml_call1(Stdlib[33],i),
             _bG_=caml_call2(Stdlib[28],_bF_,_bE_);
            s$0[1] = caml_call2(Stdlib[28],s$0[1],_bG_);
            chains.innerHTML = caml_jsstring_of_string(s$0[1]);
            cc$0[1] = caml_call2(M[19][9],heads,cc$0[1]);
            var _bH_=i + 1 | 0;
            if(6 !== i){var i=_bH_;continue}
            status(cst_Computing_resolution);
            var
             maxdeg$0=
              caml_int_of_string(caml_string_of_jsstring(maxdeg.value)),
             d=caml_call3(P[15][4],[0,_bx_],pres$0,maxdeg$0 + 1 | 0);
            resolution.innerHTML
            =
            caml_jsstring_of_string
             (replace(10,cst_br,caml_call1(P[15][1][16][6][6],d)));
            status(cst_Computing_Betti_numbers);
            var
             s$1=[0,cst$1],
             h=caml_call3(P[15][9],[0,_bx_],pres$0,maxdeg$0),
             _bz_=
              function(i,n)
               {var
                 _bI_=caml_call1(Stdlib[33],n),
                 _bJ_=caml_call2(Stdlib[28],_bI_,cst_br$0),
                 _bK_=caml_call2(Stdlib[28],cst$2,_bJ_),
                 _bL_=caml_call1(Stdlib[33],i),
                 _bM_=caml_call2(Stdlib[28],_bL_,_bK_),
                 _bN_=caml_call2(Stdlib[28],cst_H,_bM_);
                s$1[1] = caml_call2(Stdlib[28],s$1[1],_bN_);
                return 0};
            caml_call2(Stdlib_Array[14],_bz_,h);
            betti.innerHTML = caml_jsstring_of_string(s$1[1]);
            status(cst_Done);
            var _bA_=Js_of_ocaml_Js[7];
            return _bA_}}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn === Stdlib[3])return Js_of_ocaml_Js[8];
          if(exn[1] === Stdlib[7])
           {var s=exn[2];
            error(caml_call2(Stdlib[28],cst_Error,s));
            return Js_of_ocaml_Js[8]}
          if(exn === Stdlib[8]){error(cst_Not_found);return Js_of_ocaml_Js[8]}
          throw exn}}
      var t57=caml_call1(Js_of_ocaml_Dom_html[10],_p_);
      t58.onclick = t57;
      function generate_handler(param)
       {function list_init(n,f)
         {function aux(k)
           {if(n <= k)return 0;
            var _bt_=aux(k + 1 | 0);
            return [0,caml_call1(f,k),_bt_]}
          return aux(0)}
        function set(v,r)
         {var t59=caml_jsstring_of_string(v);
          t60.value = t59;
          var t61=caml_jsstring_of_string(r);
          return t62.value = t61}
        function gen(n)
         {var _bs_=caml_call1(Stdlib[29],n + 97 | 0);
          return caml_call2(Stdlib_String[1],1,_bs_)}
        var
         n=caml_int_of_string(caml_string_of_jsstring(t68.value)),
         match=caml_string_of_jsstring(t66.value);
        if(caml_string_notequal(match,cst_ext))
         if(caml_string_notequal(match,cst_plactic))
          if(caml_string_notequal(match,cst_pow))
           if(caml_string_notequal(match,cst_sklyanin))
            if(caml_string_notequal(match,cst_sym))
             {if(caml_string_notequal(match,cst_symg))
               throw [0,Assert_failure,_h_];
              var
               _Z_=list_init(n,gen),
               v$2=caml_call2(Stdlib_String[6],cst$10,_Z_),
               rel$3=[0,0],
               _$_=n - 2 | 0,
               ___=0;
              if(! (_$_ < 0))
               {var i$2=___;
                for(;;)
                 {var
                   _ap_=rel$3[1],
                   _aq_=gen(i$2),
                   _ar_=caml_call2(Stdlib[28],_aq_,cst_1),
                   _as_=gen(i$2);
                  rel$3[1] = [0,caml_call2(Stdlib[28],_as_,_ar_),_ap_];
                  var
                   _at_=rel$3[1],
                   _au_=gen(i$2 + 1 | 0),
                   _av_=gen(i$2),
                   _aw_=caml_call2(Stdlib[28],_av_,_au_),
                   _ax_=gen(i$2 + 1 | 0),
                   _ay_=caml_call2(Stdlib[28],_ax_,_aw_),
                   _az_=caml_call2(Stdlib[28],cst$13,_ay_),
                   _aA_=gen(i$2),
                   _aB_=caml_call2(Stdlib[28],_aA_,_az_),
                   _aC_=gen(i$2 + 1 | 0),
                   _aD_=caml_call2(Stdlib[28],_aC_,_aB_),
                   _aE_=gen(i$2);
                  rel$3[1] = [0,caml_call2(Stdlib[28],_aE_,_aD_),_at_];
                  var _aF_=i$2 + 1 | 0;
                  if(_$_ !== i$2){var i$2=_aF_;continue}
                  break}}
              var _ab_=n - 1 | 0,_aa_=0;
              if(! (_ab_ < 0))
               {var i$1=_aa_;
                for(;;)
                 {var _ad_=i$1 + 2 | 0,_ae_=n - 1 | 0;
                  if(! (_ae_ < _ad_))
                   {var j$1=_ad_;
                    for(;;)
                     {var
                       _ag_=rel$3[1],
                       _ah_=gen(i$1),
                       _ai_=gen(j$1),
                       _aj_=caml_call2(Stdlib[28],_ai_,_ah_),
                       _ak_=caml_call2(Stdlib[28],cst$12,_aj_),
                       _al_=gen(j$1),
                       _am_=caml_call2(Stdlib[28],_al_,_ak_),
                       _an_=gen(i$1);
                      rel$3[1] = [0,caml_call2(Stdlib[28],_an_,_am_),_ag_];
                      var _ao_=j$1 + 1 | 0;
                      if(_ae_ !== j$1){var j$1=_ao_;continue}
                      break}}
                  var _af_=i$1 + 1 | 0;
                  if(_ab_ !== i$1){var i$1=_af_;continue}
                  break}}
              var
               _ac_=caml_call1(Stdlib_List[9],rel$3[1]),
               rel$4=caml_call2(Stdlib_String[6],cst$11,_ac_);
              set(v$2,rel$4)}
            else
             {var
               _q_=list_init(n,gen),
               v$0=caml_call2(Stdlib_String[6],cst$4,_q_),
               rel=[0,0],
               _s_=n - 1 | 0,
               _r_=0;
              if(! (_s_ < 0))
               {var i=_r_;
                for(;;)
                 {var _u_=i + 1 | 0,_v_=n - 1 | 0;
                  if(! (_v_ < _u_))
                   {var j=_u_;
                    for(;;)
                     {var
                       _x_=rel[1],
                       _y_=gen(i),
                       _z_=gen(j),
                       _A_=caml_call2(Stdlib[28],_z_,_y_),
                       _B_=caml_call2(Stdlib[28],cst$6,_A_),
                       _C_=gen(j),
                       _D_=caml_call2(Stdlib[28],_C_,_B_),
                       _E_=gen(i);
                      rel[1] = [0,caml_call2(Stdlib[28],_E_,_D_),_x_];
                      var _F_=j + 1 | 0;
                      if(_v_ !== j){var j=_F_;continue}
                      break}}
                  var _w_=i + 1 | 0;
                  if(_s_ !== i){var i=_w_;continue}
                  break}}
              var
               _t_=caml_call1(Stdlib_List[9],rel[1]),
               rel$0=caml_call2(Stdlib_String[6],cst$5,_t_);
              set(v$0,rel$0)}
           else
            {var
              _aG_=list_init(n,gen),
              v$3=caml_call2(Stdlib_String[6],cst$14,_aG_),
              rel$5=[0,cst$15],
              _aI_=n - 1 | 0,
              _aH_=0;
             if(! (_aI_ < 0))
              {var i$4=_aH_;
               for(;;)
                {var
                  _aN_=caml_call1(Stdlib[33],n),
                  _aO_=caml_call2(Stdlib[28],cst$17,_aN_),
                  _aP_=gen(i$4),
                  _aQ_=caml_call2(Stdlib[28],_aP_,_aO_),
                  _aR_=
                   runtime.caml_string_equal(rel$5[1],cst$18)?cst$19:cst$20,
                  _aS_=caml_call2(Stdlib[28],_aR_,_aQ_);
                 rel$5[1] = caml_call2(Stdlib[28],rel$5[1],_aS_);
                 var _aT_=i$4 + 1 | 0;
                 if(_aI_ !== i$4){var i$4=_aT_;continue}
                 break}}
             rel$5[1] = caml_call2(Stdlib[28],rel$5[1],cst$16);
             var _aK_=n - 1 | 0,_aJ_=0;
             if(! (_aK_ < 0))
              {var i$3=_aJ_;
               for(;;)
                {var _aL_=gen(i$3);
                 rel$5[1] = caml_call2(Stdlib[28],rel$5[1],_aL_);
                 var _aM_=i$3 + 1 | 0;
                 if(_aK_ !== i$3){var i$3=_aM_;continue}
                 break}}
             set(v$3,rel$5[1])}
          else
           {var rel$6=[0,0],_aV_=n - 1 | 0,_aU_=0;
            if(! (_aV_ < 0))
             {var i$5=_aU_;
              for(;;)
               {var s=[0,cst_x],_aY_=i$5 - 1 | 0,_aX_=0;
                if(! (_aY_ < 0))
                 {var for$0=_aX_;
                  for(;;)
                   {s[1] = caml_call2(Stdlib[28],s[1],cst_y);
                    var _a0_=for$0 + 1 | 0;
                    if(_aY_ !== for$0){var for$0=_a0_;continue}
                    break}}
                s[1] = caml_call2(Stdlib[28],s[1],cst_x$0);
                rel$6[1] = [0,s[1],rel$6[1]];
                var _aZ_=i$5 + 1 | 0;
                if(_aV_ !== i$5){var i$5=_aZ_;continue}
                break}}
            var
             _aW_=caml_call1(Stdlib_List[9],rel$6[1]),
             rel$7=caml_call2(Stdlib_String[6],cst$21,_aW_);
            set(v,rel$7)}
         else
          {var
            v$4=list_init(n,gen),
            v$5=caml_call2(Stdlib_String[6],cst$22,v$4),
            rel$8=[0,0],
            _a2_=n - 1 | 0,
            _a1_=0;
           if(! (_a2_ < 0))
            {var x$1=_a1_;
             for(;;)
              {var _bg_=x$1 + 1 | 0,_bh_=n - 1 | 0;
               if(! (_bh_ < _bg_))
                {var y$1=_bg_;
                 for(;;)
                  {var _bj_=n - 1 | 0;
                   if(! (_bj_ < y$1))
                    {var z$1=y$1;
                     for(;;)
                      {var
                        x$2=gen(x$1),
                        y$2=gen(y$1),
                        z$2=gen(z$1),
                        _bl_=rel$8[1],
                        _bm_=caml_call2(Stdlib[28],x$2,z$2),
                        _bn_=caml_call2(Stdlib[28],y$2,_bm_),
                        _bo_=caml_call2(Stdlib[28],cst$25,_bn_),
                        _bp_=caml_call2(Stdlib[28],x$2,_bo_),
                        _bq_=caml_call2(Stdlib[28],z$2,_bp_);
                       rel$8[1] = [0,caml_call2(Stdlib[28],y$2,_bq_),_bl_];
                       var _br_=z$1 + 1 | 0;
                       if(_bj_ !== z$1){var z$1=_br_;continue}
                       break}}
                   var _bk_=y$1 + 1 | 0;
                   if(_bh_ !== y$1){var y$1=_bk_;continue}
                   break}}
               var _bi_=x$1 + 1 | 0;
               if(_a2_ !== x$1){var x$1=_bi_;continue}
               break}}
           var _a4_=n - 1 | 0,_a3_=0;
           if(! (_a4_ < 0))
            {var x=_a3_;
             for(;;)
              {var _a6_=n - 1 | 0;
               if(! (_a6_ < x))
                {var y=x;
                 for(;;)
                  {var _a8_=y + 1 | 0,_a9_=n - 1 | 0;
                   if(! (_a9_ < _a8_))
                    {var z=_a8_;
                     for(;;)
                      {var
                        x$0=gen(x),
                        y$0=gen(y),
                        z$0=gen(z),
                        _a$_=rel$8[1],
                        _ba_=caml_call2(Stdlib[28],x$0,y$0),
                        _bb_=caml_call2(Stdlib[28],z$0,_ba_),
                        _bc_=caml_call2(Stdlib[28],cst$24,_bb_),
                        _bd_=caml_call2(Stdlib[28],y$0,_bc_),
                        _be_=caml_call2(Stdlib[28],z$0,_bd_);
                       rel$8[1] = [0,caml_call2(Stdlib[28],x$0,_be_),_a$_];
                       var _bf_=z + 1 | 0;
                       if(_a9_ !== z){var z=_bf_;continue}
                       break}}
                   var _a__=y + 1 | 0;
                   if(_a6_ !== y){var y=_a__;continue}
                   break}}
               var _a7_=x + 1 | 0;
               if(_a4_ !== x){var x=_a7_;continue}
               break}}
           var
            _a5_=caml_call1(Stdlib_List[9],rel$8[1]),
            rel$9=caml_call2(Stdlib_String[6],cst$23,_a5_);
           set(v$5,rel$9)}
        else
         {var
           _G_=list_init(n,gen),
           v$1=caml_call2(Stdlib_String[6],cst$7,_G_),
           rel$1=[0,0],
           _I_=n - 1 | 0,
           _H_=0;
          if(! (_I_ < 0))
           {var i$0=_H_;
            for(;;)
             {var _K_=rel$1[1],_L_=gen(i$0),_M_=gen(i$0);
              rel$1[1] = [0,caml_call2(Stdlib[28],_M_,_L_),_K_];
              var _N_=i$0 + 1 | 0,_O_=n - 1 | 0;
              if(! (_O_ < _N_))
               {var j$0=_N_;
                for(;;)
                 {var
                   _Q_=rel$1[1],
                   _R_=gen(i$0),
                   _S_=gen(j$0),
                   _T_=caml_call2(Stdlib[28],_S_,_R_),
                   _U_=caml_call2(Stdlib[28],cst$9,_T_),
                   _V_=gen(j$0),
                   _W_=caml_call2(Stdlib[28],_V_,_U_),
                   _X_=gen(i$0);
                  rel$1[1] = [0,caml_call2(Stdlib[28],_X_,_W_),_Q_];
                  var _Y_=j$0 + 1 | 0;
                  if(_O_ !== j$0){var j$0=_Y_;continue}
                  break}}
              var _P_=i$0 + 1 | 0;
              if(_I_ !== i$0){var i$0=_P_;continue}
              break}}
          var
           _J_=caml_call1(Stdlib_List[9],rel$1[1]),
           rel$2=caml_call2(Stdlib_String[6],cst$8,_J_);
          set(v$1,rel$2)}
        return Js_of_ocaml_Js[7]}
      var t65=caml_call1(Js_of_ocaml_Dom_html[10],generate_handler);
      t66.oninput = t65;
      var t67=caml_call1(Js_of_ocaml_Dom_html[10],generate_handler);
      t68.onchange = t67;
      return Js_of_ocaml_Js[7]}
    var t69=caml_call1(Js_of_ocaml_Dom_html[10],run);
    Js_of_ocaml_Dom_html[8].onload = t69;
    var
     Dune_exe_Bergman=
      [0,
       doc,
       button,
       debug,
       jsget,
       Parsing,
       parse_pol,
       char_of_string,
       M,
       P,
       eval_pol,
       replace,
       run];
    runtime.caml_register_global(141,Dune_exe_Bergman,"Dune__exe__Bergman");
    return}
  (globalThis));


//# 1 "../../.js/stdlib/std_exit.cmo.js"
(function(globalThis)
   {"use strict";
    var runtime=globalThis.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    var global_data=runtime.caml_get_global_data(),Stdlib=global_data.Stdlib;
    caml_call1(Stdlib[103],0);
    var Std_exit=[0];
    runtime.caml_register_global(1,Std_exit,"Std_exit");
    return}
  (globalThis));


//# sourceMappingURL=data:application/json;base64,